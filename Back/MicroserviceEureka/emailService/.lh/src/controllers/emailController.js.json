{
    "sourceFile": "src/controllers/emailController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 79,
            "patches": [
                {
                    "date": 1748481092181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748514488924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,9 @@\n \r\n // Envoyer un email\r\n const sendEmailHandler = async (req, res) => {\r\n   try {\r\n-    // L'access token devrait idéalement être extrait d'un header (Authorization: Bearer <token>)\r\n-    // ou d'une session sécurisée, plutôt que du corps de la requête.\r\n-    // Pour rester fidèle au code original, nous le prenons du body.\r\n-    const { accessToken, emailData } = req.body;\r\n+     const { accessToken, emailData } = req.body;\r\n     if (!accessToken || !emailData) {\r\n       return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailData)\" });\r\n     }\r\n     // Valider emailData pourrait être ajouté ici\r\n"
                },
                {
                    "date": 1748514873900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,76 @@\n     });\r\n   }\r\n };\r\n \r\n+/ Récupérer un email complet avec tous ses éléments\r\n+const getFullEmailHandler = async (req, res) => {\r\n+  try {\r\n+    const { accessToken } = req.query;\r\n+    const { emailId } = req.params;\r\n+\r\n+    if (!accessToken || !emailId) {\r\n+      return res.status(400).json({ \r\n+        success: false, \r\n+        error: \"Paramètres manquants (accessToken, emailId)\" \r\n+      });\r\n+    }\r\n+\r\n+    const email = await gmailService.getFullEmail(accessToken, emailId);\r\n+    \r\n+    // Optionnel: Récupérer les pièces jointes complètes si demandé\r\n+    if (req.query.includeAttachments === 'true') {\r\n+      for (const attachment of email.attachments) {\r\n+        attachment.fileData = await gmailService.getAttachment(\r\n+          accessToken, \r\n+          emailId, \r\n+          attachment.body.attachmentId\r\n+        );\r\n+      }\r\n+    }\r\n+\r\n+    res.json({ success: true, data: email });\r\n+  } catch (error) {\r\n+    console.error(\"Erreur récupération email complet:\", error);\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Erreur lors de la récupération de l'email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Récupérer les emails avec aperçu des pièces jointes\r\n+const getEmailsWithAttachmentsHandler = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, maxResults = 10 } = req.query;\r\n+    \r\n+    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n+    const enhancedEmails = await Promise.all(\r\n+      emails.map(async email => {\r\n+        const fullEmail = await gmailService.getFullEmail(accessToken, email.id);\r\n+        return {\r\n+          ...email,\r\n+          hasAttachments: fullEmail.attachments.length > 0,\r\n+          attachmentsPreview: fullEmail.attachments.map(a => ({\r\n+            filename: a.filename,\r\n+            mimeType: a.mimeType,\r\n+            size: a.size\r\n+          }))\r\n+        };\r\n+      })\r\n+    );\r\n+\r\n+    res.json({ success: true, data: enhancedEmails });\r\n+  } catch (error) {\r\n+    console.error(\"Erreur récupération emails avec pièces jointes:\", error);\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Erreur lors de la récupération des emails\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n module.exports = {\r\n   sendEmailHandler,\r\n   getSentEmailsHandler,\r\n   deleteEmailHandler,\r\n"
                },
                {
                    "date": 1748514884158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n     });\r\n   }\r\n };\r\n \r\n-/ Récupérer un email complet avec tous ses éléments\r\n+// Récupérer un email complet avec tous ses éléments\r\n const getFullEmailHandler = async (req, res) => {\r\n   try {\r\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n"
                },
                {
                    "date": 1748514892710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,8 +223,10 @@\n     });\r\n   }\r\n };\r\n module.exports = {\r\n+  getFullEmailHandler,\r\n+  getEmailsWithAttachmentsHandler,\r\n   sendEmailHandler,\r\n   getSentEmailsHandler,\r\n   deleteEmailHandler,\r\n   restoreEmailHandler,\r\n"
                },
                {
                    "date": 1748519010215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const gmailService = require(\"../services/gmailService\");\r\n \r\n // Envoyer un email\r\n-const sendEmailHandler = async (req, res) => {\r\n+const sendEmail = async (req, res) => {\r\n   try {\r\n      const { accessToken, emailData } = req.body;\r\n     if (!accessToken || !emailData) {\r\n       return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailData)\" });\r\n"
                },
                {
                    "date": 1748519039543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,26 +2,36 @@\n \r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n-     const { accessToken, emailData } = req.body;\r\n-    if (!accessToken || !emailData) {\r\n-      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailData)\" });\r\n+    const { accessToken, emailData } = req.body;\r\n+    \r\n+    // Convert files to attachment format if needed\r\n+    const attachments = [];\r\n+    if (req.files) {\r\n+      attachments.push(...req.files.map(file => ({\r\n+        filename: file.originalname,\r\n+        mimeType: file.mimetype,\r\n+        content: file.buffer\r\n+      })));\r\n     }\r\n-    // Valider emailData pourrait être ajouté ici\r\n \r\n-    const result = await gmailService.sendEmail(accessToken, emailData);\r\n+    const result = await gmailService.sendEmail(accessToken, {\r\n+      ...emailData,\r\n+      attachments: [...(emailData.attachments || []), ...attachments]\r\n+    });\r\n+    \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n-    console.error(\"Erreur lors de l'envoi de l'email:\", error);\r\n-    res.status(error.response?.status || 500).json({ \r\n-      success: false, \r\n-      error: \"Erreur lors de l'envoi de l'email.\",\r\n-      details: error.response?.data || error.message \r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to send email\",\r\n+      details: error.message\r\n     });\r\n   }\r\n };\r\n \r\n+\r\n // Récupérer les emails envoyés\r\n const getSentEmailsHandler = async (req, res) => {\r\n   try {\r\n     // Idem pour accessToken, préférer header/session\r\n"
                },
                {
                    "date": 1748519066289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,15 @@\n   }\r\n };\r\n \r\n \r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n // Récupérer les emails envoyés\r\n const getSentEmailsHandler = async (req, res) => {\r\n   try {\r\n     // Idem pour accessToken, préférer header/session\r\n"
                },
                {
                    "date": 1748519088200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,16 +29,46 @@\n     });\r\n   }\r\n };\r\n \r\n+// Get full email details\r\n+const getEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken } = req.query;\r\n+    const { emailId } = req.params;\r\n+    const includeAttachments = req.query.includeAttachments === 'true';\r\n+    \r\n+    const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n+    res.json({ success: true, data: email });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+// Get inbox emails\r\n+const getInbox = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, maxResults } = req.query;\r\n+    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n+    res.json({ success: true, data: emails });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get inbox emails\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n-\r\n // Récupérer les emails envoyés\r\n const getSentEmailsHandler = async (req, res) => {\r\n   try {\r\n     // Idem pour accessToken, préférer header/session\r\n"
                },
                {
                    "date": 1748519097903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,14 +61,27 @@\n     });\r\n   }\r\n };\r\n \r\n+// Get sent emails\r\n+const getSent = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, maxResults } = req.query;\r\n+    const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n+    res.json({ success: true, data: emails });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get sent emails\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n \r\n \r\n \r\n \r\n \r\n-\r\n // Récupérer les emails envoyés\r\n const getSentEmailsHandler = async (req, res) => {\r\n   try {\r\n     // Idem pour accessToken, préférer header/session\r\n"
                },
                {
                    "date": 1748519191813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,24 @@\n       details: error.message\r\n     });\r\n   }\r\n };\r\n+// Delete email\r\n+const deleteEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, permanent } = req.query;\r\n+    const { emailId } = req.params;\r\n+    \r\n+    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true');\r\n+    res.json({ success: true });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to delete email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1748519234271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,13 +91,28 @@\n       details: error.message\r\n     });\r\n   }\r\n };\r\n+// Mark as read\r\n+const markAsRead = async (req, res) => {\r\n+  try {\r\n+    const { accessToken } = req.query;\r\n+    const { emailId } = req.params;\r\n+    \r\n+    await gmailService.markAsRead(accessToken, emailId);\r\n+    res.json({ success: true });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to mark email as read\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n \r\n \r\n \r\n \r\n-\r\n // Récupérer les emails envoyés\r\n const getSentEmailsHandler = async (req, res) => {\r\n   try {\r\n     // Idem pour accessToken, préférer header/session\r\n"
                },
                {
                    "date": 1748519324769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,14 +314,15 @@\n     });\r\n   }\r\n };\r\n module.exports = {\r\n-  getFullEmailHandler,\r\n-  getEmailsWithAttachmentsHandler,\r\n-  sendEmailHandler,\r\n-  getSentEmailsHandler,\r\n-  deleteEmailHandler,\r\n-  restoreEmailHandler,\r\n-  getInboxEmailsHandler,\r\n-  markAsReadHandler,\r\n-  checkEmailReadStatusHandler,\r\n+  sendEmail,\r\n+  getEmail,\r\n+  getInbox,\r\n+  getSent,\r\n+  deleteEmail,\r\n+  markAsRead,\r\n+  createDraft,\r\n+  getDraftsList,\r\n+  deleteDraft,\r\n+  sendDraft\r\n };\r\n"
                },
                {
                    "date": 1748519336707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,220 +109,12 @@\n   }\r\n };\r\n \r\n \r\n-\r\n-\r\n-// Récupérer les emails envoyés\r\n-const getSentEmailsHandler = async (req, res) => {\r\n-  try {\r\n-    // Idem pour accessToken, préférer header/session\r\n-    const { accessToken, maxResults = 10 } = req.query;\r\n-    if (!accessToken) {\r\n-      return res.status(400).json({ success: false, error: \"Access token requis.\" });\r\n-    }\r\n-\r\n-    const messages = await gmailService.getSentEmails(accessToken, maxResults);\r\n-    res.json({ success: true, data: messages });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur lors de la récupération des emails envoyés:\", error);\r\n-    res.status(error.response?.status || 500).json({ \r\n-        success: false, \r\n-        error: \"Erreur lors de la récupération des emails envoyés.\",\r\n-        details: error.response?.data || error.message \r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Supprimer un email\r\n-const deleteEmailHandler = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, permanent = 'false' } = req.query; // Note: query params are strings\r\n-    const { emailId } = req.params;\r\n-\r\n-    if (!accessToken || !emailId) {\r\n-      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n-    }\r\n-\r\n-    const isPermanent = permanent === 'true';\r\n-    await gmailService.deleteEmail(accessToken, emailId, isPermanent);\r\n-    res.json({ \r\n-      success: true, \r\n-      message: isPermanent ? \"Email supprimé définitivement\" : \"Email déplacé vers la corbeille\"\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur lors de la suppression de l'email:\", error);\r\n-     res.status(error.response?.status || 500).json({ \r\n-      success: false, \r\n-      error: \"Erreur lors de la suppression de l'email.\",\r\n-      details: error.response?.data || error.message \r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Restaurer un email depuis la corbeille\r\n-const restoreEmailHandler = async (req, res) => {\r\n-  try {\r\n-    // Idem pour accessToken\r\n-    const { accessToken } = req.query; \r\n-    const { emailId } = req.params;\r\n-\r\n-    if (!accessToken || !emailId) {\r\n-        return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n-    }\r\n-\r\n-    await gmailService.restoreEmail(accessToken, emailId);\r\n-    res.json({ success: true, message: \"Email restauré depuis la corbeille\" });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur lors de la restauration de l'email:\", error);\r\n-    res.status(error.response?.status || 500).json({ \r\n-        success: false, \r\n-        error: \"Erreur lors de la restauration de l'email.\",\r\n-        details: error.response?.data || error.message \r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Récupérer les emails entrants\r\n-const getInboxEmailsHandler = async (req, res) => {\r\n-  try {\r\n-    // Idem pour accessToken\r\n-    const { accessToken, maxResults = 20 } = req.query;\r\n-    if (!accessToken) {\r\n-      return res.status(400).json({ success: false, error: \"Access token requis.\" });\r\n-    }\r\n-\r\n-    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n-    res.json({ success: true, data: emails });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur lors de la récupération de la boîte de réception:\", error);\r\n-    res.status(error.response?.status || 500).json({ \r\n-        success: false, \r\n-        error: \"Erreur lors de la récupération de la boîte de réception.\",\r\n-        details: error.response?.data || error.message \r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Marquer un email comme lu\r\n-const markAsReadHandler = async (req, res) => {\r\n-  try {\r\n-    // Idem pour accessToken\r\n-    const { accessToken, emailId } = req.body;\r\n-    if (!accessToken || !emailId) {\r\n-      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n-    }\r\n-\r\n-    await gmailService.markAsRead(accessToken, emailId);\r\n-    res.json({ success: true, message: \"Email marqué comme lu.\" });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur lors du marquage comme lu:\", error);\r\n-    res.status(error.response?.status || 500).json({ \r\n-        success: false, \r\n-        error: \"Erreur lors du marquage comme lu.\",\r\n-        details: error.response?.data || error.message \r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Vérifier si un email a été lu\r\n-const checkEmailReadStatusHandler = async (req, res) => {\r\n-  try {\r\n-    // Idem pour accessToken\r\n-    const { accessToken } = req.query;\r\n-    const { emailId } = req.params;\r\n-    if (!accessToken || !emailId) {\r\n-      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n-    }\r\n-\r\n-    const status = await gmailService.checkEmailReadStatus(accessToken, emailId);\r\n-    res.json({ success: true, data: status });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur lors de la vérification du statut de lecture:\", error);\r\n-    res.status(error.response?.status || 500).json({ \r\n-        success: false, \r\n-        error: \"Erreur lors de la vérification du statut de lecture.\",\r\n-        details: error.response?.data || error.message \r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Récupérer un email complet avec tous ses éléments\r\n-const getFullEmailHandler = async (req, res) => {\r\n-  try {\r\n-    const { accessToken } = req.query;\r\n-    const { emailId } = req.params;\r\n-\r\n-    if (!accessToken || !emailId) {\r\n-      return res.status(400).json({ \r\n-        success: false, \r\n-        error: \"Paramètres manquants (accessToken, emailId)\" \r\n-      });\r\n-    }\r\n-\r\n-    const email = await gmailService.getFullEmail(accessToken, emailId);\r\n-    \r\n-    // Optionnel: Récupérer les pièces jointes complètes si demandé\r\n-    if (req.query.includeAttachments === 'true') {\r\n-      for (const attachment of email.attachments) {\r\n-        attachment.fileData = await gmailService.getAttachment(\r\n-          accessToken, \r\n-          emailId, \r\n-          attachment.body.attachmentId\r\n-        );\r\n-      }\r\n-    }\r\n-\r\n-    res.json({ success: true, data: email });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur récupération email complet:\", error);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Erreur lors de la récupération de l'email\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Récupérer les emails avec aperçu des pièces jointes\r\n-const getEmailsWithAttachmentsHandler = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, maxResults = 10 } = req.query;\r\n-    \r\n-    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n-    const enhancedEmails = await Promise.all(\r\n-      emails.map(async email => {\r\n-        const fullEmail = await gmailService.getFullEmail(accessToken, email.id);\r\n-        return {\r\n-          ...email,\r\n-          hasAttachments: fullEmail.attachments.length > 0,\r\n-          attachmentsPreview: fullEmail.attachments.map(a => ({\r\n-            filename: a.filename,\r\n-            mimeType: a.mimeType,\r\n-            size: a.size\r\n-          }))\r\n-        };\r\n-      })\r\n-    );\r\n-\r\n-    res.json({ success: true, data: enhancedEmails });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur récupération emails avec pièces jointes:\", error);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Erreur lors de la récupération des emails\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n module.exports = {\r\n   sendEmail,\r\n   getEmail,\r\n   getInbox,\r\n   getSent,\r\n   deleteEmail,\r\n-  markAsRead,\r\n-  createDraft,\r\n-  getDraftsList,\r\n-  deleteDraft,\r\n-  sendDraft\r\n+  markAsRead\r\n };\r\n"
                },
                {
                    "date": 1748519882495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,120 +0,0 @@\n-const gmailService = require(\"../services/gmailService\");\r\n-\r\n-// Envoyer un email\r\n-const sendEmail = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, emailData } = req.body;\r\n-    \r\n-    // Convert files to attachment format if needed\r\n-    const attachments = [];\r\n-    if (req.files) {\r\n-      attachments.push(...req.files.map(file => ({\r\n-        filename: file.originalname,\r\n-        mimeType: file.mimetype,\r\n-        content: file.buffer\r\n-      })));\r\n-    }\r\n-\r\n-    const result = await gmailService.sendEmail(accessToken, {\r\n-      ...emailData,\r\n-      attachments: [...(emailData.attachments || []), ...attachments]\r\n-    });\r\n-    \r\n-    res.json({ success: true, data: result });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to send email\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Get full email details\r\n-const getEmail = async (req, res) => {\r\n-  try {\r\n-    const { accessToken } = req.query;\r\n-    const { emailId } = req.params;\r\n-    const includeAttachments = req.query.includeAttachments === 'true';\r\n-    \r\n-    const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n-    res.json({ success: true, data: email });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to get email\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-// Get inbox emails\r\n-const getInbox = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, maxResults } = req.query;\r\n-    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n-    res.json({ success: true, data: emails });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to get inbox emails\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Get sent emails\r\n-const getSent = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, maxResults } = req.query;\r\n-    const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n-    res.json({ success: true, data: emails });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to get sent emails\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-// Delete email\r\n-const deleteEmail = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, permanent } = req.query;\r\n-    const { emailId } = req.params;\r\n-    \r\n-    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true');\r\n-    res.json({ success: true });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to delete email\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-// Mark as read\r\n-const markAsRead = async (req, res) => {\r\n-  try {\r\n-    const { accessToken } = req.query;\r\n-    const { emailId } = req.params;\r\n-    \r\n-    await gmailService.markAsRead(accessToken, emailId);\r\n-    res.json({ success: true });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to mark email as read\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-\r\n-module.exports = {\r\n-  sendEmail,\r\n-  getEmail,\r\n-  getInbox,\r\n-  getSent,\r\n-  deleteEmail,\r\n-  markAsRead\r\n-};\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748522020257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,120 @@\n-\n+const gmailService = require(\"../services/gmailService\");\r\n+\r\n+// Envoyer un email\r\n+const sendEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, ...emailData } = req.body;\r\n+    \r\n+    // Convert files to attachment format if needed\r\n+    const attachments = [];\r\n+    if (req.files) {\r\n+      attachments.push(...req.files.map(file => ({\r\n+        filename: file.originalname,\r\n+        mimeType: file.mimetype,\r\n+        content: file.buffer\r\n+      })));\r\n+    }\r\n+\r\n+    const result = await gmailService.sendEmail(accessToken, {\r\n+      ...emailData,\r\n+      attachments: [...(emailData.attachments || []), ...attachments]\r\n+    });\r\n+    \r\n+    res.json({ success: true, data: result });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to send email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Get full email details\r\n+const getEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken } = req.query;\r\n+    const { emailId } = req.params;\r\n+    const includeAttachments = req.query.includeAttachments === 'true';\r\n+    \r\n+    const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n+    res.json({ success: true, data: email });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+// Get inbox emails\r\n+const getInbox = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, maxResults } = req.query;\r\n+    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n+    res.json({ success: true, data: emails });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get inbox emails\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Get sent emails\r\n+const getSent = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, maxResults } = req.query;\r\n+    const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n+    res.json({ success: true, data: emails });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get sent emails\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+// Delete email\r\n+const deleteEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, permanent } = req.query;\r\n+    const { emailId } = req.params;\r\n+    \r\n+    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true');\r\n+    res.json({ success: true });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to delete email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+// Mark as read\r\n+const markAsRead = async (req, res) => {\r\n+  try {\r\n+    const { accessToken } = req.query;\r\n+    const { emailId } = req.params;\r\n+    \r\n+    await gmailService.markAsRead(accessToken, emailId);\r\n+    res.json({ success: true });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to mark email as read\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+\r\n+module.exports = {\r\n+  sendEmail,\r\n+  getEmail,\r\n+  getInbox,\r\n+  getSent,\r\n+  deleteEmail,\r\n+  markAsRead\r\n+};\r\n"
                },
                {
                    "date": 1748522059953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,31 +2,38 @@\n \r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n-    const { accessToken, ...emailData } = req.body;\r\n+    const { accessToken, ...emailData } = req.body; // Extraire accessToken et le reste dans emailData\r\n     \r\n     // Convert files to attachment format if needed\r\n     const attachments = [];\r\n-    if (req.files) {\r\n+    if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n         filename: file.originalname,\r\n         mimeType: file.mimetype,\r\n         content: file.buffer\r\n       })));\r\n     }\r\n \r\n+    // S'assurer que emailData.attachments est un tableau\r\n+    const emailAttachments = Array.isArray(emailData.attachments) \r\n+      ? emailData.attachments \r\n+      : [];\r\n+\r\n     const result = await gmailService.sendEmail(accessToken, {\r\n       ...emailData,\r\n-      attachments: [...(emailData.attachments || []), ...attachments]\r\n+      attachments: [...emailAttachments, ...attachments]\r\n     });\r\n     \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n+    console.error(\"Erreur détaillée:\", error);\r\n     res.status(500).json({\r\n       success: false,\r\n       error: \"Failed to send email\",\r\n-      details: error.message\r\n+      details: error.message,\r\n+      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n     });\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1748526472915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n // Get inbox emails\r\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n+    const userId = req.user.id; \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748526482883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n     const userId = req.user.id; \r\n-    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n+    const emails = await gmailService.getInboxEmails(accessToken, maxResults,);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748526489639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n     const userId = req.user.id; \r\n-    const emails = await gmailService.getInboxEmails(accessToken, maxResults,);\r\n+    const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748526516275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n const deleteEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, permanent } = req.query;\r\n     const { emailId } = req.params;\r\n-    \r\n+    const userId = req.user.id;\r\n     await gmailService.deleteEmail(accessToken, emailId, permanent === 'true');\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748526528338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n   try {\r\n     const { accessToken, permanent } = req.query;\r\n     const { emailId } = req.params;\r\n     const userId = req.user.id;\r\n-    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true');\r\n+    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userI);\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748526905175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,10 +88,10 @@\n const deleteEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, permanent } = req.query;\r\n     const { emailId } = req.params;\r\n-    const userId = req.user.id;\r\n-    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userI);\r\n+    const userId = \"me\";\r\n+    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userId);\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748526915964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n // Get inbox emails\r\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n-    const userId = req.user.id; \r\n+    const userId = \"me\"; \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n@@ -88,9 +88,9 @@\n const deleteEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, permanent } = req.query;\r\n     const { emailId } = req.params;\r\n-    const userId = \"me\";\r\n+    const userId = req.user.id;\r\n     await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userId);\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748527031758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n // Get inbox emails\r\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n-    const userId = \"me\"; \r\n+    const userId = req.user.id; \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748534233561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const gmailService = require(\"../services/gmailService\");\r\n \r\n+\r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body; // Extraire accessToken et le reste dans emailData\r\n"
                },
                {
                    "date": 1748534273023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+const gmailService = require(\"../services/gmailService\");\r\n+\r\n+const getUserId = (req) => {\r\n+  return req.user?.id || req.user?.email || 'default-user';\r\n+};\r\n+// Envoyer un email\r\n+const sendEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, ...emailData } = req.body;\r\n+    const userId = getUserId(req);\r\n+    \r\n+    const attachments = [];\r\n+    if (req.files && req.files.length > 0) {\r\n+      attachments.push(...req.files.map(file => ({\r\n+        filename: file.originalname,\r\n+        mimeType: file.mimetype,\r\n+        content: file.buffer\r\n+      })));\r\n+    }\r\n+\r\n+    // S'assurer que emailData.attachments est un tableau\r\n+    const emailAttachments = Array.isArray(emailData.attachments) \r\n+      ? emailData.attachments \r\n+      : [];\r\n+\r\n+    const result = await gmailService.sendEmail(accessToken, {\r\n+      ...emailData,\r\n+      attachments: [...emailAttachments, ...attachments]\r\n+    });\r\n+    \r\n+    res.json({ success: true, data: result });\r\n+  } catch (error) {\r\n+    console.error(\"Erreur détaillée:\", error);\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to send email\",\r\n+      details: error.message,\r\n+      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Get full email details\r\n+const getEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken } = req.query;\r\n+    const { emailId } = req.params;\r\n+    const includeAttachments = req.query.includeAttachments === 'true';\r\n+    \r\n+    const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n+    res.json({ success: true, data: email });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+// Get inbox emails\r\n+const getInbox = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, maxResults } = req.query;\r\n+    const userId = req.user.id; \r\n+    const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n+    res.json({ success: true, data: emails });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get inbox emails\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Get sent emails\r\n+const getSent = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, maxResults } = req.query;\r\n+    const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n+    res.json({ success: true, data: emails });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to get sent emails\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+// Delete email\r\n+const deleteEmail = async (req, res) => {\r\n+  try {\r\n+    const { accessToken, permanent } = req.query;\r\n+    const { emailId } = req.params;\r\n+    const userId = req.user.id;\r\n+    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userId);\r\n+    res.json({ success: true });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to delete email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+// Mark as read\r\n+const markAsRead = async (req, res) => {\r\n+  try {\r\n+    const { accessToken } = req.query;\r\n+    const { emailId } = req.params;\r\n+    \r\n+    await gmailService.markAsRead(accessToken, emailId);\r\n+    res.json({ success: true });\r\n+  } catch (error) {\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Failed to mark email as read\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+\r\n+module.exports = {\r\n+  sendEmail,\r\n+  getEmail,\r\n+  getInbox,\r\n+  getSent,\r\n+  deleteEmail,\r\n+  markAsRead\r\n+};\r\n"
                },
                {
                    "date": 1748534315885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       : [];\r\n \r\n     const result = await gmailService.sendEmail(accessToken, {\r\n       ...emailData,\r\n-      attachments: [...emailAttachments, ...attachments]\r\n+      attachments: [...(emailAttachments), ...attachments]\r\n     });\r\n     \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n@@ -128,133 +128,4 @@\n   getSent,\r\n   deleteEmail,\r\n   markAsRead\r\n };\r\n-const gmailService = require(\"../services/gmailService\");\r\n-\r\n-\r\n-// Envoyer un email\r\n-const sendEmail = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, ...emailData } = req.body; // Extraire accessToken et le reste dans emailData\r\n-    \r\n-    // Convert files to attachment format if needed\r\n-    const attachments = [];\r\n-    if (req.files && req.files.length > 0) {\r\n-      attachments.push(...req.files.map(file => ({\r\n-        filename: file.originalname,\r\n-        mimeType: file.mimetype,\r\n-        content: file.buffer\r\n-      })));\r\n-    }\r\n-\r\n-    // S'assurer que emailData.attachments est un tableau\r\n-    const emailAttachments = Array.isArray(emailData.attachments) \r\n-      ? emailData.attachments \r\n-      : [];\r\n-\r\n-    const result = await gmailService.sendEmail(accessToken, {\r\n-      ...emailData,\r\n-      attachments: [...emailAttachments, ...attachments]\r\n-    });\r\n-    \r\n-    res.json({ success: true, data: result });\r\n-  } catch (error) {\r\n-    console.error(\"Erreur détaillée:\", error);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to send email\",\r\n-      details: error.message,\r\n-      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Get full email details\r\n-const getEmail = async (req, res) => {\r\n-  try {\r\n-    const { accessToken } = req.query;\r\n-    const { emailId } = req.params;\r\n-    const includeAttachments = req.query.includeAttachments === 'true';\r\n-    \r\n-    const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n-    res.json({ success: true, data: email });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to get email\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-// Get inbox emails\r\n-const getInbox = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, maxResults } = req.query;\r\n-    const userId = req.user.id; \r\n-    const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n-    res.json({ success: true, data: emails });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to get inbox emails\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-// Get sent emails\r\n-const getSent = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, maxResults } = req.query;\r\n-    const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n-    res.json({ success: true, data: emails });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to get sent emails\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-// Delete email\r\n-const deleteEmail = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, permanent } = req.query;\r\n-    const { emailId } = req.params;\r\n-    const userId = req.user.id;\r\n-    await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userId);\r\n-    res.json({ success: true });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to delete email\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-// Mark as read\r\n-const markAsRead = async (req, res) => {\r\n-  try {\r\n-    const { accessToken } = req.query;\r\n-    const { emailId } = req.params;\r\n-    \r\n-    await gmailService.markAsRead(accessToken, emailId);\r\n-    res.json({ success: true });\r\n-  } catch (error) {\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      error: \"Failed to mark email as read\",\r\n-      details: error.message\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-\r\n-module.exports = {\r\n-  sendEmail,\r\n-  getEmail,\r\n-  getInbox,\r\n-  getSent,\r\n-  deleteEmail,\r\n-  markAsRead\r\n-};\r\n"
                },
                {
                    "date": 1748534326228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,11 @@\n       : [];\r\n \r\n     const result = await gmailService.sendEmail(accessToken, {\r\n       ...emailData,\r\n-      attachments: [...(emailAttachments), ...attachments]\r\n-    });\r\n+      attachments: [...(emailAttachments|| []), ...attachments]\r\n+    },\r\n+  );\r\n     \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n     console.error(\"Erreur détaillée:\", error);\r\n"
                },
                {
                    "date": 1748534332662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n     const result = await gmailService.sendEmail(accessToken, {\r\n       ...emailData,\r\n       attachments: [...(emailAttachments|| []), ...attachments]\r\n     },\r\n+    userId\r\n   );\r\n     \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1748534347865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n const getEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n+    \r\n     const includeAttachments = req.query.includeAttachments === 'true';\r\n     \r\n     const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n     res.json({ success: true, data: email });\r\n"
                },
                {
                    "date": 1748534354906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n const getEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n-    \r\n+    const userId = getUserId(req);\r\n     const includeAttachments = req.query.includeAttachments === 'true';\r\n     \r\n     const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n     res.json({ success: true, data: email });\r\n"
                },
                {
                    "date": 1748534376858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n     const userId = getUserId(req);\r\n     const includeAttachments = req.query.includeAttachments === 'true';\r\n+    let email = gmailService.getEmailFromStorage(userId, emailId);\r\n     \r\n     const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n     res.json({ success: true, data: email });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1748534398334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,13 @@\n     const { emailId } = req.params;\r\n     const userId = getUserId(req);\r\n     const includeAttachments = req.query.includeAttachments === 'true';\r\n     let email = gmailService.getEmailFromStorage(userId, emailId);\r\n-    \r\n-    const email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments);\r\n-    res.json({ success: true, data: email });\r\n+\r\n+ if (!email) {\r\n+      const includeAttachments = req.query.includeAttachments === 'true';\r\n+      email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments, userId);\r\n+    }    res.json({ success: true, data: email });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n       error: \"Failed to get email\",\r\n"
                },
                {
                    "date": 1748534417996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,10 @@\n \r\n  if (!email) {\r\n       const includeAttachments = req.query.includeAttachments === 'true';\r\n       email = await gmailService.getFullEmail(accessToken, emailId, includeAttachments, userId);\r\n-    }    res.json({ success: true, data: email });\r\n+    }\r\n+        res.json({ success: true, data: email });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n       error: \"Failed to get email\",\r\n@@ -66,9 +67,9 @@\n // Get inbox emails\r\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n-    const userId = req.user.id; \r\n+    const userId = getUserId(req);\r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748534520326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n // Get sent emails\r\n const getSent = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n+    \r\n     const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748534526658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n // Get sent emails\r\n const getSent = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n-    \r\n+    const userId = getUserId(req);\r\n     const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748534535092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n const getSent = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n     const userId = getUserId(req);\r\n-    const emails = await gmailService.getSentEmails(accessToken, maxResults);\r\n+    const emails = await gmailService.getSentEmails(accessToken, maxResults,);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748534541303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n const getSent = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults } = req.query;\r\n     const userId = getUserId(req);\r\n-    const emails = await gmailService.getSentEmails(accessToken, maxResults,);\r\n+    const emails = await gmailService.getSentEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748534559730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n const deleteEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, permanent } = req.query;\r\n     const { emailId } = req.params;\r\n-    const userId = req.user.id;\r\n+    const userId = getUserId(req);\r\n     await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userId);\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748534583841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n const markAsRead = async (req, res) => {\r\n   try {\r\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n-    \r\n+    const userId = getUserId(req);\r\n     await gmailService.markAsRead(accessToken, emailId);\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748534597395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,17 @@\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n     const userId = getUserId(req);\r\n     await gmailService.markAsRead(accessToken, emailId);\r\n+    const folders = ['inbox', 'sent', 'drafts'];\r\n+    for (const folder of folders) {\r\n+      const email = gmailService.getEmailFromStorage(userId, emailId, folder);\r\n+      if (email) {\r\n+        email.isRead = true;\r\n+        emailStorage.saveEmail(userId, email, folder);\r\n+        break;\r\n+      }\r\n+    }\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748535281071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const gmailService = require(\"../services/gmailService\");\r\n \r\n const getUserId = (req) => {\r\n-  return req.user?.id || req.user?.email || 'default-user';\r\n+  return req.user?.id || req.user?.email || 'me';\r\n };\r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1748535331284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const gmailService = require(\"../services/gmailService\");\r\n \r\n const getUserId = (req) => {\r\n-  return req.user?.id || req.user?.email || 'me';\r\n+  return req.user?.id || req.user?.email || 'default-user';\r\n };\r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1748535719704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n-    const userId = getUserId(req);\r\n+    const userId = em;\r\n     \r\n     const attachments = [];\r\n     if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n"
                },
                {
                    "date": 1748535728110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n-    const userId = em;\r\n+    const userId = emailData.from;\r\n     \r\n     const attachments = [];\r\n     if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n"
                },
                {
                    "date": 1748535783652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n     const userId = emailData.from;\r\n-    \r\n+    console.error(\"Erreur détaillée:\", error);\r\n     const attachments = [];\r\n     if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n         filename: file.originalname,\r\n"
                },
                {
                    "date": 1748535792055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n     const userId = emailData.from;\r\n-    console.error(\"Erreur détaillée:\", error);\r\n+    console.error(\"userId\", error);\r\n     const attachments = [];\r\n     if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n         filename: file.originalname,\r\n"
                },
                {
                    "date": 1748536177233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n-    const userId = emailData.from;\r\n-    console.error(\"userId\", error);\r\n+    const userId = getUserId(req);\r\n+    console.error(\"userId\", userId);\r\n     const attachments = [];\r\n     if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n         filename: file.originalname,\r\n"
                },
                {
                    "date": 1748536219989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n-    const userId = getUserId(req);\r\n+    const userId = emailData.from;\r\n     console.error(\"userId\", userId);\r\n     const attachments = [];\r\n     if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n"
                },
                {
                    "date": 1748536417743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,11 @@\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n-    const userId = emailData.from;\r\n-    console.error(\"userId\", userId);\r\n+    const userId = emailData.from; // Utilisez l'email de l'expéditeur comme userId\r\n+    \r\n+    console.log(\"userId\", userId);\r\n     const attachments = [];\r\n     if (req.files && req.files.length > 0) {\r\n       attachments.push(...req.files.map(file => ({\r\n         filename: file.originalname,\r\n"
                },
                {
                    "date": 1748536444034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,14 +23,16 @@\n     const emailAttachments = Array.isArray(emailData.attachments) \r\n       ? emailData.attachments \r\n       : [];\r\n \r\n-    const result = await gmailService.sendEmail(accessToken, {\r\n-      ...emailData,\r\n-      attachments: [...(emailAttachments|| []), ...attachments]\r\n-    },\r\n-    userId\r\n-  );\r\n+    const result = await gmailService.sendEmail(\r\n+      accessToken, \r\n+      {\r\n+        ...emailData,\r\n+        attachments: [...emailAttachments, ...attachments]\r\n+      },\r\n+      userId\r\n+    );\r\n     \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n     console.error(\"Erreur détaillée:\", error);\r\n"
                },
                {
                    "date": 1748536694382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n       },\r\n       userId\r\n     );\r\n     \r\n+    \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n     console.error(\"Erreur détaillée:\", error);\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748536715886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n         attachments: [...emailAttachments, ...attachments]\r\n       },\r\n       userId\r\n     );\r\n+\r\n     \r\n-    \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n     console.error(\"Erreur détaillée:\", error);\r\n     res.status(500).json({\r\n@@ -51,9 +51,9 @@\n   try {\r\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n     const userId = getUserId(req);\r\n-    const includeAttachments = req.query.includeAttachments === 'true';\r\n+\r\n     let email = gmailService.getEmailFromStorage(userId, emailId);\r\n \r\n  if (!email) {\r\n       const includeAttachments = req.query.includeAttachments === 'true';\r\n"
                },
                {
                    "date": 1748537342185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,16 @@\n const gmailService = require(\"../services/gmailService\");\r\n \r\n const getUserId = (req) => {\r\n-  return req.user?.id || req.user?.email || 'default-user';\r\n+  // Priorité à l'email de l'utilisateur authentifié\r\n+  if (req.user?.email) return req.user.email;\r\n+  \r\n+  // Sinon, essayer d'extraire l'email d'autres sources\r\n+  if (req.user?.id && req.user.id.includes('@')) return req.user.id;\r\n+  if (req.body?.from) return req.body.from;\r\n+  \r\n+  // Fallback sécurisé\r\n+  return 'unknown_user@example.com';\r\n };\r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1748537602441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,11 @@\n const gmailService = require(\"../services/gmailService\");\r\n \r\n const getUserId = (req) => {\r\n-  // Priorité à l'email de l'utilisateur authentifié\r\n-  if (req.user?.email) return req.user.email;\r\n-  \r\n-  // Sinon, essayer d'extraire l'email d'autres sources\r\n-  if (req.user?.id && req.user.id.includes('@')) return req.user.id;\r\n-  if (req.body?.from) return req.body.from;\r\n-  \r\n-  // Fallback sécurisé\r\n-  return 'unknown_user@example.com';\r\n+  // Use the authenticated user's email or the from address\r\n+  return req.user?.email || req.body.from || 'default-user';\r\n };\r\n+\r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, ...emailData } = req.body;\r\n"
                },
                {
                    "date": 1748537883113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \r\n // Get full email details\r\n const getEmail = async (req, res) => {\r\n   try {\r\n-    const { accessToken } = req.query;\r\n+    const { accessToken ,  } = req.query;\r\n     const { emailId } = req.params;\r\n     const userId = getUserId(req);\r\n \r\n     let email = gmailService.getEmailFromStorage(userId, emailId);\r\n"
                },
                {
                    "date": 1748537889623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,10 @@\n \r\n // Get full email details\r\n const getEmail = async (req, res) => {\r\n   try {\r\n-    const { accessToken ,  } = req.query;\r\n+    const { accessToken , userId } = req.query;\r\n     const { emailId } = req.params;\r\n-    const userId = getUserId(req);\r\n \r\n     let email = gmailService.getEmailFromStorage(userId, emailId);\r\n \r\n  if (!email) {\r\n"
                },
                {
                    "date": 1748538584781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n };\r\n // Get inbox emails\r\n const getInbox = async (req, res) => {\r\n   try {\r\n-    const { accessToken, maxResults } = req.query;\r\n+    const { accessToken, maxResults,userId } = req.query;\r\n     const userId = getUserId(req);\r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1748538602624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n // Get inbox emails\r\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults,userId } = req.query;\r\n-    const userId = getUserId(req);\r\n+   \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n@@ -87,10 +87,11 @@\n \r\n // Get sent emails\r\n const getSent = async (req, res) => {\r\n   try {\r\n-    const { accessToken, maxResults } = req.query;\r\n     const userId = getUserId(req);\r\n+    const { accessToken, maxResults ,} = req.query;\r\n+    const userId = getUserId(req);\r\n     const emails = await gmailService.getSentEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748538609178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,11 +87,10 @@\n \r\n // Get sent emails\r\n const getSent = async (req, res) => {\r\n   try {\r\n+    const { accessToken, maxResults ,userId} = req.query;\r\n     const userId = getUserId(req);\r\n-    const { accessToken, maxResults ,} = req.query;\r\n-    const userId = getUserId(req);\r\n     const emails = await gmailService.getSentEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748538618385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n // Get sent emails\r\n const getSent = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults ,userId} = req.query;\r\n-    const userId = getUserId(req);\r\n+   \r\n     const emails = await gmailService.getSentEmails(accessToken, maxResults,userId);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n@@ -104,9 +104,9 @@\n const deleteEmail = async (req, res) => {\r\n   try {\r\n     const { accessToken, permanent } = req.query;\r\n     const { emailId } = req.params;\r\n-    const userId = getUserId(req);\r\n+ \r\n     await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userId);\r\n     res.json({ success: true });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1748538635034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n };\r\n // Delete email\r\n const deleteEmail = async (req, res) => {\r\n   try {\r\n-    const { accessToken, permanent } = req.query;\r\n+    const { accessToken, permanent,userId } = req.query;\r\n     const { emailId } = req.params;\r\n  \r\n     await gmailService.deleteEmail(accessToken, emailId, permanent === 'true',userId);\r\n     res.json({ success: true });\r\n@@ -120,9 +120,9 @@\n const markAsRead = async (req, res) => {\r\n   try {\r\n     const { accessToken } = req.query;\r\n     const { emailId } = req.params;\r\n-    const userId = getUserId(req);\r\n+   \r\n     await gmailService.markAsRead(accessToken, emailId);\r\n     const folders = ['inbox', 'sent', 'drafts'];\r\n     for (const folder of folders) {\r\n       const email = gmailService.getEmailFromStorage(userId, emailId, folder);\r\n"
                },
                {
                    "date": 1748706984258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,10 @@\n   try {\r\n     const { accessToken, maxResults,userId } = req.query;\r\n    \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n+   \r\n+   \r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n@@ -118,9 +120,9 @@\n };\r\n // Mark as read\r\n const markAsRead = async (req, res) => {\r\n   try {\r\n-    const { accessToken } = req.query;\r\n+    const { accessToken,userId } = req.query;\r\n     const { emailId } = req.params;\r\n    \r\n     await gmailService.markAsRead(accessToken, emailId);\r\n     const folders = ['inbox', 'sent', 'drafts'];\r\n"
                },
                {
                    "date": 1748706996333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     const { accessToken, maxResults,userId } = req.query;\r\n    \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n    \r\n-   \r\n+   const filteredEmails = emails.filter(email => email !== null);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748707004875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n    \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n    \r\n    const filteredEmails = emails.filter(email => email !== null);\r\n-    res.json({ success: true, data: emails });\r\n+    res.json({ success: true, data: filteredEmails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n       error: \"Failed to get inbox emails\",\r\n"
                },
                {
                    "date": 1748707063776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,9 @@\n   try {\r\n     const { accessToken, maxResults,userId } = req.query;\r\n    \r\n     const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n-   \r\n-   const filteredEmails = emails.filter(email => email !== null);\r\n+\r\n     res.json({ success: true, data: filteredEmails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1748708559194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,11 +73,11 @@\n const getInbox = async (req, res) => {\r\n   try {\r\n     const { accessToken, maxResults,userId } = req.query;\r\n    \r\n-    const emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n+    let emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n \r\n-    res.json({ success: true, data: filteredEmails });\r\n+    res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n       error: \"Failed to get inbox emails\",\r\n"
                },
                {
                    "date": 1748708566293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   try {\r\n     const { accessToken, maxResults,userId } = req.query;\r\n    \r\n     let emails = await gmailService.getInboxEmails(accessToken, maxResults,userId);\r\n-\r\n+emails = emails.filter(email => email && !email.skipped);\r\n     res.json({ success: true, data: emails });\r\n   } catch (error) {\r\n     res.status(500).json({\r\n       success: false,\r\n"
                },
                {
                    "date": 1749379633759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,40 @@\n const gmailService = require(\"../services/gmailService\");\r\n-\r\n+const { sendSystemEmail } = require('../services/gmailService');\r\n+const systemAuth = require('../utils/systemAuth');\r\n const getUserId = (req) => {\r\n   // Use the authenticated user's email or the from address\r\n   return req.user?.email || req.body.from || 'default-user';\r\n };\r\n \r\n // Envoyer un email\r\n const sendEmail = async (req, res) => {\r\n-  try {\r\n-    const { accessToken, ...emailData } = req.body;\r\n-    const userId = emailData.from; // Utilisez l'email de l'expéditeur comme userId\r\n+ try {\r\n+    const { accessToken, from, to, subject, text, attachments: emailAttachments = [] } = req.body;\r\n+    const userId = from;\r\n     \r\n     console.log(\"userId\", userId);\r\n-    const attachments = [];\r\n-    if (req.files && req.files.length > 0) {\r\n-      attachments.push(...req.files.map(file => ({\r\n-        filename: file.originalname,\r\n-        mimeType: file.mimetype,\r\n-        content: file.buffer\r\n-      })));\r\n-    }\r\n+    \r\n+    // Gestion des fichiers uploadés\r\n+    const fileAttachments = req.files?.map(file => ({\r\n+      filename: file.originalname,\r\n+      mimeType: file.mimetype,\r\n+      content: file.buffer\r\n+    })) || [];\r\n \r\n-    // S'assurer que emailData.attachments est un tableau\r\n-    const emailAttachments = Array.isArray(emailData.attachments) \r\n-      ? emailData.attachments \r\n-      : [];\r\n-\r\n+    // Envoi de l'email\r\n     const result = await gmailService.sendEmail(\r\n       accessToken, \r\n       {\r\n-        ...emailData,\r\n-        attachments: [...emailAttachments, ...attachments]\r\n+        from,\r\n+        to,\r\n+        subject,\r\n+        text,\r\n+        attachments: [...emailAttachments, ...fileAttachments]\r\n       },\r\n       userId\r\n     );\r\n \r\n-    \r\n     res.json({ success: true, data: result });\r\n   } catch (error) {\r\n     console.error(\"Erreur détaillée:\", error);\r\n     res.status(500).json({\r\n"
                },
                {
                    "date": 1749379740647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const gmailService = require(\"../services/gmailService\");\r\n const { sendSystemEmail } = require('../services/gmailService');\r\n-const systemAuth = require('../utils/systemAuth');\r\n+const systemAuth = require('../services/systemAuth');\r\n const getUserId = (req) => {\r\n   // Use the authenticated user's email or the from address\r\n   return req.user?.email || req.body.from || 'default-user';\r\n };\r\n"
                },
                {
                    "date": 1749379762772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const gmailService = require(\"../services/gmailService\");\r\n const { sendSystemEmail } = require('../services/gmailService');\r\n-const systemAuth = require('../services/systemAuth');\r\n+const systemAuth = require('../services/systemAuthService');\r\n const getUserId = (req) => {\r\n   // Use the authenticated user's email or the from address\r\n   return req.user?.email || req.body.from || 'default-user';\r\n };\r\n@@ -140,9 +140,9 @@\n     });\r\n   }\r\n };\r\n \r\n-\r\n+cons\r\n module.exports = {\r\n   sendEmail,\r\n   getEmail,\r\n   getInbox,\r\n"
                },
                {
                    "date": 1749379773585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,10 @@\n     });\r\n   }\r\n };\r\n \r\n-cons\r\n+const sendSystemEmail = async (req, res) => {\r\n+\r\n module.exports = {\r\n   sendEmail,\r\n   getEmail,\r\n   getInbox,\r\n"
                },
                {
                    "date": 1749379783564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,30 @@\n   }\r\n };\r\n \r\n const sendSystemEmail = async (req, res) => {\r\n+  try {\r\n+    // Utilisez le compte système pour envoyer l'email\r\n+    const result = await sendSystemEmail(\r\n+      systemAuth.SYSTEM_USER_ID, // L'ID du compte système\r\n+      req.body\r\n+    );\r\n \r\n+    res.json({ \r\n+      success: true, \r\n+      message: 'Email envoyé avec succès',\r\n+      data: result\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(\"Erreur lors de l'envoi de l'email système:\", error);\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      error: \"Échec de l'envoi de l'email\",\r\n+      details: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n module.exports = {\r\n   sendEmail,\r\n   getEmail,\r\n   getInbox,\r\n"
                },
                {
                    "date": 1749379790911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,6 +169,7 @@\n   getEmail,\r\n   getInbox,\r\n   getSent,\r\n   deleteEmail,\r\n-  markAsRead\r\n+  markAsRead,\r\n+  \r\n };\r\n"
                },
                {
                    "date": 1749380161687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const gmailService = require(\"../services/gmailService\");\r\n-const { sendSystemEmail } = require('../services/gmailService');\r\n+//const { sendSystemEmail } = require('../services/gmailService');\r\n const systemAuth = require('../services/systemAuthService');\r\n const getUserId = (req) => {\r\n   // Use the authenticated user's email or the from address\r\n   return req.user?.email || req.body.from || 'default-user';\r\n@@ -170,6 +170,6 @@\n   getInbox,\r\n   getSent,\r\n   deleteEmail,\r\n   markAsRead,\r\n-  \r\n+  sendSystemEmail\r\n };\r\n"
                },
                {
                    "date": 1749380179788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n \r\n const sendSystemEmail = async (req, res) => {\r\n   try {\r\n     // Utilisez le compte système pour envoyer l'email\r\n-    const result = await sendSystemEmail(\r\n+    const result = await gmailService.sendSystemEmail(\r\n       systemAuth.SYSTEM_USER_ID, // L'ID du compte système\r\n       req.body\r\n     );\r\n \r\n"
                },
                {
                    "date": 1749384791248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n };\r\n \r\n const sendSystemEmail = async (req, res) => {\r\n   try {\r\n+    console.log('Requête reçue pour sendSystemEmail:', req.body);\r\n     // Utilisez le compte système pour envoyer l'email\r\n     const result = await gmailService.sendSystemEmail(\r\n       systemAuth.SYSTEM_USER_ID, // L'ID du compte système\r\n       req.body\r\n"
                },
                {
                    "date": 1749384800950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n     const result = await gmailService.sendSystemEmail(\r\n       systemAuth.SYSTEM_USER_ID, // L'ID du compte système\r\n       req.body\r\n     );\r\n-\r\n+console.log('Email envoyé avec succès:', result);\r\n     res.json({ \r\n       success: true, \r\n       message: 'Email envoyé avec succès',\r\n       data: result\r\n"
                },
                {
                    "date": 1749388068268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,8 +143,10 @@\n \r\n const sendSystemEmail = async (req, res) => {\r\n   try {\r\n     console.log('Requête reçue pour sendSystemEmail:', req.body);\r\n+    console.log('SYSTEM_USER_ID:', systemAuth.SYSTEM_USER_ID);\r\n+    console.log('Email data:', req.body);\r\n     // Utilisez le compte système pour envoyer l'email\r\n     const result = await gmailService.sendSystemEmail(\r\n       systemAuth.SYSTEM_USER_ID, // L'ID du compte système\r\n       req.body\r\n"
                }
            ],
            "date": 1748481092181,
            "name": "Commit-0",
            "content": "const gmailService = require(\"../services/gmailService\");\r\n\r\n// Envoyer un email\r\nconst sendEmailHandler = async (req, res) => {\r\n  try {\r\n    // L'access token devrait idéalement être extrait d'un header (Authorization: Bearer <token>)\r\n    // ou d'une session sécurisée, plutôt que du corps de la requête.\r\n    // Pour rester fidèle au code original, nous le prenons du body.\r\n    const { accessToken, emailData } = req.body;\r\n    if (!accessToken || !emailData) {\r\n      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailData)\" });\r\n    }\r\n    // Valider emailData pourrait être ajouté ici\r\n\r\n    const result = await gmailService.sendEmail(accessToken, emailData);\r\n    res.json({ success: true, data: result });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de l'envoi de l'email:\", error);\r\n    res.status(error.response?.status || 500).json({ \r\n      success: false, \r\n      error: \"Erreur lors de l'envoi de l'email.\",\r\n      details: error.response?.data || error.message \r\n    });\r\n  }\r\n};\r\n\r\n// Récupérer les emails envoyés\r\nconst getSentEmailsHandler = async (req, res) => {\r\n  try {\r\n    // Idem pour accessToken, préférer header/session\r\n    const { accessToken, maxResults = 10 } = req.query;\r\n    if (!accessToken) {\r\n      return res.status(400).json({ success: false, error: \"Access token requis.\" });\r\n    }\r\n\r\n    const messages = await gmailService.getSentEmails(accessToken, maxResults);\r\n    res.json({ success: true, data: messages });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des emails envoyés:\", error);\r\n    res.status(error.response?.status || 500).json({ \r\n        success: false, \r\n        error: \"Erreur lors de la récupération des emails envoyés.\",\r\n        details: error.response?.data || error.message \r\n    });\r\n  }\r\n};\r\n\r\n// Supprimer un email\r\nconst deleteEmailHandler = async (req, res) => {\r\n  try {\r\n    const { accessToken, permanent = 'false' } = req.query; // Note: query params are strings\r\n    const { emailId } = req.params;\r\n\r\n    if (!accessToken || !emailId) {\r\n      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n    }\r\n\r\n    const isPermanent = permanent === 'true';\r\n    await gmailService.deleteEmail(accessToken, emailId, isPermanent);\r\n    res.json({ \r\n      success: true, \r\n      message: isPermanent ? \"Email supprimé définitivement\" : \"Email déplacé vers la corbeille\"\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la suppression de l'email:\", error);\r\n     res.status(error.response?.status || 500).json({ \r\n      success: false, \r\n      error: \"Erreur lors de la suppression de l'email.\",\r\n      details: error.response?.data || error.message \r\n    });\r\n  }\r\n};\r\n\r\n// Restaurer un email depuis la corbeille\r\nconst restoreEmailHandler = async (req, res) => {\r\n  try {\r\n    // Idem pour accessToken\r\n    const { accessToken } = req.query; \r\n    const { emailId } = req.params;\r\n\r\n    if (!accessToken || !emailId) {\r\n        return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n    }\r\n\r\n    await gmailService.restoreEmail(accessToken, emailId);\r\n    res.json({ success: true, message: \"Email restauré depuis la corbeille\" });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la restauration de l'email:\", error);\r\n    res.status(error.response?.status || 500).json({ \r\n        success: false, \r\n        error: \"Erreur lors de la restauration de l'email.\",\r\n        details: error.response?.data || error.message \r\n    });\r\n  }\r\n};\r\n\r\n// Récupérer les emails entrants\r\nconst getInboxEmailsHandler = async (req, res) => {\r\n  try {\r\n    // Idem pour accessToken\r\n    const { accessToken, maxResults = 20 } = req.query;\r\n    if (!accessToken) {\r\n      return res.status(400).json({ success: false, error: \"Access token requis.\" });\r\n    }\r\n\r\n    const emails = await gmailService.getInboxEmails(accessToken, maxResults);\r\n    res.json({ success: true, data: emails });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération de la boîte de réception:\", error);\r\n    res.status(error.response?.status || 500).json({ \r\n        success: false, \r\n        error: \"Erreur lors de la récupération de la boîte de réception.\",\r\n        details: error.response?.data || error.message \r\n    });\r\n  }\r\n};\r\n\r\n// Marquer un email comme lu\r\nconst markAsReadHandler = async (req, res) => {\r\n  try {\r\n    // Idem pour accessToken\r\n    const { accessToken, emailId } = req.body;\r\n    if (!accessToken || !emailId) {\r\n      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n    }\r\n\r\n    await gmailService.markAsRead(accessToken, emailId);\r\n    res.json({ success: true, message: \"Email marqué comme lu.\" });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors du marquage comme lu:\", error);\r\n    res.status(error.response?.status || 500).json({ \r\n        success: false, \r\n        error: \"Erreur lors du marquage comme lu.\",\r\n        details: error.response?.data || error.message \r\n    });\r\n  }\r\n};\r\n\r\n// Vérifier si un email a été lu\r\nconst checkEmailReadStatusHandler = async (req, res) => {\r\n  try {\r\n    // Idem pour accessToken\r\n    const { accessToken } = req.query;\r\n    const { emailId } = req.params;\r\n    if (!accessToken || !emailId) {\r\n      return res.status(400).json({ success: false, error: \"Paramètres manquants (accessToken, emailId)\" });\r\n    }\r\n\r\n    const status = await gmailService.checkEmailReadStatus(accessToken, emailId);\r\n    res.json({ success: true, data: status });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la vérification du statut de lecture:\", error);\r\n    res.status(error.response?.status || 500).json({ \r\n        success: false, \r\n        error: \"Erreur lors de la vérification du statut de lecture.\",\r\n        details: error.response?.data || error.message \r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  sendEmailHandler,\r\n  getSentEmailsHandler,\r\n  deleteEmailHandler,\r\n  restoreEmailHandler,\r\n  getInboxEmailsHandler,\r\n  markAsReadHandler,\r\n  checkEmailReadStatusHandler,\r\n};\r\n"
        }
    ]
}