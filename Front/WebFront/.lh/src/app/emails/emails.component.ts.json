{
    "sourceFile": "src/app/emails/emails.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 177,
            "patches": [
                {
                    "date": 1748563144880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748563150714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   bodySnippet: string;\r\n   date: Date;\r\n   read?: boolean; // Pour les emails reçus\r\n }\r\n-\r\n+type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n"
                },
                {
                    "date": 1748563160587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,49 @@\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n-export class EmailsComponent {\r\n+export class EmailsComponent implements OnInit { // Nom de classe mis à jour\r\n+  receivedEmails: Email[] = [];\r\n+  sentEmails: Email[] = [];\r\n+  draftEmails: Email[] = [];\r\n \r\n+  activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n+\r\n+  constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.loadMockEmails();\r\n+  }\r\n+\r\n+  loadMockEmails(): void {\r\n+    this.receivedEmails = [\r\n+      { id: 1, from: 'alice@example.com', subject: 'Invitation à la réunion de projet', bodySnippet: 'Bonjour, vous êtes cordialement invité à notre réunion...', date: new Date(Date.now() - 86400000), read: false },\r\n+      { id: 2, from: 'newsletter@info.com', subject: 'Votre résumé hebdomadaire ArchiManage', bodySnippet: 'Découvrez les dernières fonctionnalités et actualités...', date: new Date(Date.now() - 172800000), read: true },\r\n+      { id: 3, from: 'bob-construct@example.com', subject: 'Question concernant le plan B-102', bodySnippet: 'J\\'aurais une question sur les spécifications du plan...', date: new Date(Date.now() - 259200000), read: false },\r\n+    ];\r\n+\r\n+    this.sentEmails = [\r\n+      { id: 4, to: 'client.final@example.com', subject: 'RE: Validation des plans finaux', bodySnippet: 'Merci pour votre retour. Les modifications ont été apportées.', date: new Date(Date.now() - 345600000) },\r\n+      { id: 5, to: 'team@archimanage.com', subject: 'Compte rendu de la réunion client du 15/03', bodySnippet: 'Ci-joint le compte rendu de notre dernière réunion...', date: new Date(Date.now() - 432000000) },\r\n+    ];\r\n+\r\n+    this.draftEmails = [\r\n+      { id: 6, to: 'fournisseur-materiaux@example.com', subject: 'Demande de devis pour projet Alpha', bodySnippet: 'Bonjour, pourriez-vous nous fournir un devis pour les matériaux listés...', date: new Date() },\r\n+    ];\r\n+  }\r\n+\r\n+  setActiveTab(tab: ActiveEmailTab): void {\r\n+    this.activeTab = tab;\r\n+    console.log('Onglet changé vers:', this.activeTab);\r\n+    // Vous pouvez charger des données spécifiques à l'onglet ici si nécessaire\r\n+  }\r\n+\r\n+  selectEmail(email: Email, tabName: ActiveEmailTab): void {\r\n+    console.log(`Email sélectionné depuis l'onglet ${tabName}:`, email);\r\n+    // Ici, vous pourriez implémenter la logique pour afficher l'email complet,\r\n+    // par exemple dans un modal ou une vue de détail.\r\n+    if (tabName === 'received' && email.read === false) {\r\n+      email.read = true; // Marquer comme lu\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1748598709645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n interface Email {\r\n   id: number;\r\n   from?: string;\r\n   to?: string;\r\n@@ -23,8 +23,9 @@\n \r\n   constructor() { }\r\n \r\n   ngOnInit(): void {\r\n+    \r\n     this.loadMockEmails();\r\n   }\r\n \r\n   loadMockEmails(): void {\r\n"
                },
                {
                    "date": 1748598717188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,12 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor() { }\r\n+  constructor(private) { }\r\n \r\n   ngOnInit(): void {\r\n-    \r\n+    this.authService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n   }\r\n \r\n   loadMockEmails(): void {\r\n"
                },
                {
                    "date": 1748598722365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { Component, OnInit } from '@angular/core';\r\n+import { AuthService } from '../services/auth.service';\r\n interface Email {\r\n   id: number;\r\n   from?: string;\r\n   to?: string;\r\n@@ -20,9 +21,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor(private) { }\r\n+  constructor(private authService: AuthService) { }\r\n \r\n   ngOnInit(): void {\r\n     this.authService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748599183716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor(private authService: AuthService) { }\r\n+  constructor(private authSevice: AuthService) { }\r\n \r\n   ngOnInit(): void {\r\n     this.authService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748599188782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor(private authSevice: AuthService) { }\r\n+  constructor(private googleA: AuthService) { }\r\n \r\n   ngOnInit(): void {\r\n     this.authService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748599197454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor(private googleA: AuthService) { }\r\n+  constructor(private googleAuthSerive: AuthService) { }\r\n \r\n   ngOnInit(): void {\r\n     this.authService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748599205086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor(private googleAuthSerive: AuthService) { }\r\n+  constructor(private googleAuthService: AuthService) { }\r\n \r\n   ngOnInit(): void {\r\n     this.authService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748599210838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor(private googleAuthService: AuthService) { }\r\n+  constructor(private googleAuthService: Goog) { }\r\n \r\n   ngOnInit(): void {\r\n     this.authService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748599217887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Component, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n+import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n interface Email {\r\n   id: number;\r\n   from?: string;\r\n   to?: string;\r\n@@ -21,12 +22,12 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n \r\n-  constructor(private googleAuthService: Goog) { }\r\n+  constructor(private googleAuthService: GoogleAuthService) { }\r\n \r\n   ngOnInit(): void {\r\n-    this.authService.initGoogleAuth();\r\n+    this.googleAuthService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n   }\r\n \r\n   loadMockEmails(): void {\r\n"
                },
                {
                    "date": 1748600109641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   sentEmails: Email[] = [];\r\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n-\r\n+ isLoading = false;\r\n   constructor(private googleAuthService: GoogleAuthService) { }\r\n \r\n   ngOnInit(): void {\r\n     this.googleAuthService.initGoogleAuth();\r\n"
                },
                {
                    "date": 1748600120244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n-  constructor(private googleAuthService: GoogleAuthService) { }\r\n+  constructor(private googleAuthService: GoogleAuthService, p) { }\r\n \r\n   ngOnInit(): void {\r\n     this.googleAuthService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748600128222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n-  constructor(private googleAuthService: GoogleAuthService, p) { }\r\n+  constructor(private googleAuthService: GoogleAuthService, private rou) { }\r\n \r\n   ngOnInit(): void {\r\n     this.googleAuthService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748600135909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n-  constructor(private googleAuthService: GoogleAuthService, private rou) { }\r\n+  constructor(private googleAuthService: GoogleAuthService, private router:) { }\r\n \r\n   ngOnInit(): void {\r\n     this.googleAuthService.initGoogleAuth();\r\n     this.loadMockEmails();\r\n"
                },
                {
                    "date": 1748600161925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Component, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n+import { Router } from '@angular/router';\r\n interface Email {\r\n   id: number;\r\n   from?: string;\r\n   to?: string;\r\n@@ -22,13 +23,12 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n-  constructor(private googleAuthService: GoogleAuthService, private router:) { }\r\n+  constructor(private googleAuthService: GoogleAuthService, private router: Router) { }\r\n \r\n   ngOnInit(): void {\r\n-    this.googleAuthService.initGoogleAuth();\r\n-    this.loadMockEmails();\r\n+    this.checkAuthAndLoadEmails();\r\n   }\r\n \r\n   loadMockEmails(): void {\r\n     this.receivedEmails = [\r\n"
                },
                {
                    "date": 1748600173843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,18 @@\n \r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n   }\r\n-\r\n+private checkAuthAndLoadEmails(): void {\r\n+    const token = this.googleAuthService.getGoogleAccessToken();\r\n+    \r\n+    if (!token) {\r\n+      // Si pas de token, initier l'authentification\r\n+      this.googleAuthService.initGoogleAuth(this.router.url);\r\n+    } else {\r\n+      // Si token existe, charger les emails\r\n+      this.loadEmails();\r\n+    }\r\n   loadMockEmails(): void {\r\n     this.receivedEmails = [\r\n       { id: 1, from: 'alice@example.com', subject: 'Invitation à la réunion de projet', bodySnippet: 'Bonjour, vous êtes cordialement invité à notre réunion...', date: new Date(Date.now() - 86400000), read: false },\r\n       { id: 2, from: 'newsletter@info.com', subject: 'Votre résumé hebdomadaire ArchiManage', bodySnippet: 'Découvrez les dernières fonctionnalités et actualités...', date: new Date(Date.now() - 172800000), read: true },\r\n"
                },
                {
                    "date": 1748600184863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,16 @@\n       this.googleAuthService.initGoogleAuth(this.router.url);\r\n     } else {\r\n       // Si token existe, charger les emails\r\n       this.loadEmails();\r\n-    }\r\n+    }}\r\n+     private loadEmails(): void {\r\n+    this.isLoading = true;\r\n+    // Ici vous devrez implémenter la vraie logique de chargement\r\n+    // depuis votre backend en utilisant le token\r\n+    this.loadMockEmails();\r\n+    this.isLoading = false;\r\n+  }\r\n   loadMockEmails(): void {\r\n     this.receivedEmails = [\r\n       { id: 1, from: 'alice@example.com', subject: 'Invitation à la réunion de projet', bodySnippet: 'Bonjour, vous êtes cordialement invité à notre réunion...', date: new Date(Date.now() - 86400000), read: false },\r\n       { id: 2, from: 'newsletter@info.com', subject: 'Votre résumé hebdomadaire ArchiManage', bodySnippet: 'Découvrez les dernières fonctionnalités et actualités...', date: new Date(Date.now() - 172800000), read: true },\r\n"
                },
                {
                    "date": 1748605327319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n+ isAuthenticated = false;\r\n   constructor(private googleAuthService: GoogleAuthService, private router: Router) { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n"
                },
                {
                    "date": 1748605333324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n  isAuthenticated = false;\r\n-  constructor(private googleAuthService: GoogleAuthService, private router: Router) { }\r\n+  constructor(\r\n+    private googleAuthService: GoogleAuthService, private router: Router) { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n   }\r\n"
                },
                {
                    "date": 1748605366696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,23 +25,26 @@\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n  isAuthenticated = false;\r\n   constructor(\r\n-    private googleAuthService: GoogleAuthService, private router: Router) { }\r\n+    private googleAuthService: GoogleAuthService, \r\n+    private router: Router) { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n   }\r\n private checkAuthAndLoadEmails(): void {\r\n-    const token = this.googleAuthService.getGoogleAccessToken();\r\n-    \r\n-    if (!token) {\r\n-      // Si pas de token, initier l'authentification\r\n-      this.googleAuthService.initGoogleAuth(this.router.url);\r\n-    } else {\r\n-      // Si token existe, charger les emails\r\n-      this.loadEmails();\r\n-    }}\r\n+    this.googleAuthService.googleAccessToken$.subscribe(token => {\r\n+      this.isAuthenticated = !!token;\r\n+      \r\n+      if (this.isAuthenticated) {\r\n+        this.loadEmails();\r\n+      } else {\r\n+        // Si non authentifié, sauvegarder l'URL actuelle avant redirection\r\n+        this.googleAuthService.initGoogleAuth(this.router.url);\r\n+      }\r\n+    });\r\n+  }\r\n      private loadEmails(): void {\r\n     this.isLoading = true;\r\n     // Ici vous devrez implémenter la vraie logique de chargement\r\n     // depuis votre backend en utilisant le token\r\n"
                },
                {
                    "date": 1748631895782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,16 +24,17 @@\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n  isAuthenticated = false;\r\n+ authChecked = false;\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService, \r\n     private router: Router) { }\r\n \r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n   }\r\n-private checkAuthAndLoadEmails(): void {\r\n+    private checkAuthAndLoadEmails(): void {\r\n     this.googleAuthService.googleAccessToken$.subscribe(token => {\r\n       this.isAuthenticated = !!token;\r\n       \r\n       if (this.isAuthenticated) {\r\n"
                },
                {
                    "date": 1748631905859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     private googleAuthService: GoogleAuthService, \r\n     private router: Router) { }\r\n \r\n   ngOnInit(): void {\r\n-    this.checkAuthAndLoadEmails();\r\n+  this.checkAuth();\r\n   }\r\n     private checkAuthAndLoadEmails(): void {\r\n     this.googleAuthService.googleAccessToken$.subscribe(token => {\r\n       this.isAuthenticated = !!token;\r\n"
                },
                {
                    "date": 1748631927705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,20 +32,24 @@\n \r\n   ngOnInit(): void {\r\n   this.checkAuth();\r\n   }\r\n-    private checkAuthAndLoadEmails(): void {\r\n-    this.googleAuthService.googleAccessToken$.subscribe(token => {\r\n-      this.isAuthenticated = !!token;\r\n-      \r\n-      if (this.isAuthenticated) {\r\n-        this.loadEmails();\r\n-      } else {\r\n-        // Si non authentifié, sauvegarder l'URL actuelle avant redirection\r\n-        this.googleAuthService.initGoogleAuth(this.router.url);\r\n-      }\r\n-    });\r\n+  \r\n+  private checkAuth(): void {\r\n+    const token = this.googleAuthService.getGoogleAccessToken();\r\n+    \r\n+    if (token) {\r\n+      this.isAuthenticated = true;\r\n+      this.loadEmails();\r\n+    } else {\r\n+      // Stocker l'URL actuelle avant la redirection\r\n+      const currentUrl = this.router.url;\r\n+      this.googleAuthService.initGoogleAuth(currentUrl);\r\n+    }\r\n+    \r\n+    this.authChecked = true;\r\n   }\r\n+\r\n      private loadEmails(): void {\r\n     this.isLoading = true;\r\n     // Ici vous devrez implémenter la vraie logique de chargement\r\n     // depuis votre backend en utilisant le token\r\n"
                },
                {
                    "date": 1748637893754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   this.checkAuth();\r\n   }\r\n   \r\n   private checkAuth(): void {\r\n-    const token = this.googleAuthService.getGoogleAccessToken();\r\n+    const token = this.googleAuthService.getAccessToken();\r\n     \r\n     if (token) {\r\n       this.isAuthenticated = true;\r\n       this.loadEmails();\r\n"
                },
                {
                    "date": 1748651331376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,9 @@\n import { Component, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-interface Email {\r\n-  id: number;\r\n-  from?: string;\r\n-  to?: string;\r\n-  subject: string;\r\n-  bodySnippet: string;\r\n-  date: Date;\r\n-  read?: boolean; // Pour les emails reçus\r\n-}\r\n+\r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n"
                },
                {
                    "date": 1748651343559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent implements OnInit { // Nom de classe mis à jour\r\n-  receivedEmails: Email[] = [];\r\n-  sentEmails: Email[] = [];\r\n+  receivedEmails: any[] = [];\r\n+  sentEmails: any[] = [];\r\n   draftEmails: Email[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n"
                },
                {
                    "date": 1748651353757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     console.log('Onglet changé vers:', this.activeTab);\r\n     // Vous pouvez charger des données spécifiques à l'onglet ici si nécessaire\r\n   }\r\n \r\n-  selectEmail(email: Email, tabName: ActiveEmailTab): void {\r\n+  selectEmail(email: any, tabName: ActiveEmailTab): void {\r\n     console.log(`Email sélectionné depuis l'onglet ${tabName}:`, email);\r\n     // Ici, vous pourriez implémenter la logique pour afficher l'email complet,\r\n     // par exemple dans un modal ou une vue de détail.\r\n     if (tabName === 'received' && email.read === false) {\r\n"
                },
                {
                    "date": 1748651389817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,12 @@\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n-export class EmailsComponent implements OnInit { // Nom de classe mis à jour\r\n+export class EmailsComponent implements OnInit, OnDestroy {\r\n   receivedEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n-  draftEmails: Email[] = [];\r\n+  draftEmails: any[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n  isAuthenticated = false;\r\n"
                },
                {
                    "date": 1748651420914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, OnInit } from '@angular/core';\r\n+import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n \r\n@@ -15,10 +15,15 @@\n   draftEmails: any[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n- isAuthenticated = false;\r\n- authChecked = false;\r\n+  isAuthenticated = false;\r\n+  authChecked = false;\r\n+  selectedEmailDetail: Email | null = null; // For displaying full email content\r\n+\r\n+  private readonly GMAIL_USER_ID = 'me'; // Standard Gmail API user ID for the authenticated user\r\n+  private authSubscription: Subscription | undefined;\r\n+\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService, \r\n     private router: Router) { }\r\n \r\n"
                },
                {
                    "date": 1748651428675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n+import { Subscription } from 'rxjs';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n   selector: 'app-emails',\r\n@@ -17,9 +18,9 @@\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n   isAuthenticated = false;\r\n   authChecked = false;\r\n-  selectedEmailDetail: Email | null = null; // For displaying full email content\r\n+  selectedEmailDetail: any | null = null; // For displaying full email content\r\n \r\n   private readonly GMAIL_USER_ID = 'me'; // Standard Gmail API user ID for the authenticated user\r\n   private authSubscription: Subscription | undefined;\r\n \r\n"
                },
                {
                    "date": 1748651443088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,12 @@\n   private readonly GMAIL_USER_ID = 'me'; // Standard Gmail API user ID for the authenticated user\r\n   private authSubscription: Subscription | undefined;\r\n \r\n   constructor(\r\n-    private googleAuthService: GoogleAuthService, \r\n-    private router: Router) { }\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private router: Router,\r\n+    private gmailService: GmailService // Inject GmailService\r\n+  ) { }\r\n \r\n   ngOnInit(): void {\r\n   this.checkAuth();\r\n   }\r\n"
                },
                {
                    "date": 1748651466180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n import { Subscription } from 'rxjs';\r\n+import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n   selector: 'app-emails',\r\n@@ -30,9 +31,26 @@\n     private gmailService: GmailService // Inject GmailService\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n-  this.checkAuth();\r\n+ this.authSubscription = this.googleAuthService.accessToken$.subscribe(token => {\r\n+      this.authChecked = true;\r\n+      if (token) {\r\n+        this.isAuthenticated = true;\r\n+        // Load emails only if not already loaded and not currently loading to prevent re-fetches on minor state changes\r\n+        if (this.receivedEmails.length === 0 && this.sentEmails.length === 0 && this.draftEmails.length === 0 && !this.isLoading) {\r\n+          this.loadInitialEmails(token);\r\n+        }\r\n+      } else {\r\n+        this.isAuthenticated = false;\r\n+        // If not authenticated and on the emails page, initiate Google Auth\r\n+        // This might be handled by a route guard as well, but good for robustness here.\r\n+        if (this.router.url.includes('/emails')) {\r\n+          const currentUrl = this.router.url;\r\n+          this.googleAuthService.initGoogleAuth(currentUrl);\r\n+        }\r\n+      }\r\n+    });\r\n   }\r\n   \r\n   private checkAuth(): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n"
                },
                {
                    "date": 1748652000899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n-export class EmailsComponent implements OnInit, OnDestroy {\r\n+export class EmailsComponent {\r\n   receivedEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n   draftEmails: any[] = [];\r\n \r\n"
                },
                {
                    "date": 1748652012025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,11 @@\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent {\r\n-  receivedEmails: any[] = [];\r\n+  inboxEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n-  draftEmails: any[] = [];\r\n+  drafts: any[] = [];\r\n \r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n   isAuthenticated = false;\r\n"
                },
                {
                    "date": 1748652057830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n-export class EmailsComponent {\r\n+export class EmailsComponent implements OnInit  {\r\n   inboxEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n   drafts: any[] = [];\r\n \r\n"
                },
                {
                    "date": 1748652075627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,11 @@\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent implements OnInit  {\r\n-  inboxEmails: any[] = [];\r\n-  sentEmails: any[] = [];\r\n-  drafts: any[] = [];\r\n-\r\n+ inboxEmails: Email[] = [];\r\n+  sentEmails: Email[] = [];\r\n+  drafts: Email[] = [];\r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n   isAuthenticated = false;\r\n   authChecked = false;\r\n"
                },
                {
                    "date": 1748652082737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,11 @@\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent implements OnInit  {\r\n- inboxEmails: Email[] = [];\r\n+ inboxEmails: any[] = [];\r\n   sentEmails: Email[] = [];\r\n-  drafts: Email[] = [];\r\n+  drafts: any[] = [];\r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n   isAuthenticated = false;\r\n   authChecked = false;\r\n"
                },
                {
                    "date": 1748652102070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,16 +12,17 @@\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent implements OnInit  {\r\n  inboxEmails: any[] = [];\r\n-  sentEmails: Email[] = [];\r\n+  sentEmails: any[] = [];\r\n   drafts: any[] = [];\r\n   activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n  isLoading = false;\r\n   isAuthenticated = false;\r\n   authChecked = false;\r\n   selectedEmailDetail: any | null = null; // For displaying full email content\r\n-\r\n+error: string | null = null;\r\n+  currentUserEmail: string = '';\r\n   private readonly GMAIL_USER_ID = 'me'; // Standard Gmail API user ID for the authenticated user\r\n   private authSubscription: Subscription | undefined;\r\n \r\n   constructor(\r\n"
                },
                {
                    "date": 1748652109632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,11 +21,10 @@\n   authChecked = false;\r\n   selectedEmailDetail: any | null = null; // For displaying full email content\r\n error: string | null = null;\r\n   currentUserEmail: string = '';\r\n-  private readonly GMAIL_USER_ID = 'me'; // Standard Gmail API user ID for the authenticated user\r\n-  private authSubscription: Subscription | undefined;\r\n \r\n+\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router,\r\n     private gmailService: GmailService // Inject GmailService\r\n"
                },
                {
                    "date": 1748652123431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,26 +30,9 @@\n     private gmailService: GmailService // Inject GmailService\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n- this.authSubscription = this.googleAuthService.accessToken$.subscribe(token => {\r\n-      this.authChecked = true;\r\n-      if (token) {\r\n-        this.isAuthenticated = true;\r\n-        // Load emails only if not already loaded and not currently loading to prevent re-fetches on minor state changes\r\n-        if (this.receivedEmails.length === 0 && this.sentEmails.length === 0 && this.draftEmails.length === 0 && !this.isLoading) {\r\n-          this.loadInitialEmails(token);\r\n-        }\r\n-      } else {\r\n-        this.isAuthenticated = false;\r\n-        // If not authenticated and on the emails page, initiate Google Auth\r\n-        // This might be handled by a route guard as well, but good for robustness here.\r\n-        if (this.router.url.includes('/emails')) {\r\n-          const currentUrl = this.router.url;\r\n-          this.googleAuthService.initGoogleAuth(currentUrl);\r\n-        }\r\n-      }\r\n-    });\r\n+this.checkAuthAndLoadEmails();\r\n   }\r\n   \r\n   private checkAuth(): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n"
                },
                {
                    "date": 1748652138653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,25 @@\n   ngOnInit(): void {\r\n this.checkAuthAndLoadEmails();\r\n   }\r\n   \r\n+private checkAuthAndLoadEmails(): void {\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+    this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n+\r\n+    if (!googleToken) {\r\n+      // Si pas de token Google, initier le flux d'authentification\r\n+      const currentUrl = this.router.url;\r\n+      this.googleAuthService.initGoogleAuth(currentUrl);\r\n+      return;\r\n+    }\r\n+\r\n+    this.loadAllEmails();\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n   private checkAuth(): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     \r\n     if (token) {\r\n"
                },
                {
                    "date": 1748652151904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n   }\r\n   \r\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n+    \r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n"
                },
                {
                    "date": 1748652157918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   }\r\n   \r\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n-    \r\n+    const \r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n"
                },
                {
                    "date": 1748652166479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   }\r\n   \r\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n-    const \r\n+    const user=localStorage.get\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n"
                },
                {
                    "date": 1748652174763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   }\r\n   \r\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n-    const user=localStorage.get\r\n+    const user=localStorage.getItem('user_profile');\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n"
                },
                {
                    "date": 1748652203431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,14 @@\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const user=localStorage.getItem('user_profile');\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n-\r\n+const userProfileString = localStorage.getItem(\"user_profile\");\r\n+  \r\n+  if (userProfileString) {\r\n+    const userProfile = JSON.parse(userProfileString);\r\n+    const username = userProfile?.preferred_username || null;\r\n+    console.log(\"le username\",username)\r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n"
                },
                {
                    "date": 1748652210121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,14 +37,9 @@\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const user=localStorage.getItem('user_profile');\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n-const userProfileString = localStorage.getItem(\"user_profile\");\r\n-  \r\n-  if (userProfileString) {\r\n-    const userProfile = JSON.parse(userProfileString);\r\n-    const username = userProfile?.preferred_username || null;\r\n-    console.log(\"le username\",username)\r\n+\r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n"
                },
                {
                    "date": 1748652228635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,13 @@\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const user=localStorage.getItem('user_profile');\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n \r\n+  \r\n+  if (userProfileString) {\r\n+    const userProfile = JSON.parse(userProfileString);\r\n+    const username = userProfile?.preferred_username || null;\r\n+    console.log(\"le username\",username)}\r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n"
                },
                {
                    "date": 1748652235744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   }\r\n   \r\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n-    const user=localStorage.getItem('user_profile');\r\n+   const user = localStorage.getItem(\"user_profile\");\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n \r\n   \r\n   if (userProfileString) {\r\n"
                },
                {
                    "date": 1748652243230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n    const user = localStorage.getItem(\"user_profile\");\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n-\r\n+if user\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n     const username = userProfile?.preferred_username || null;\r\n"
                },
                {
                    "date": 1748652250411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,11 @@\n private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n    const user = localStorage.getItem(\"user_profile\");\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n-if user\r\n+if (user){\r\n+\r\n+}\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n     const username = userProfile?.preferred_username || null;\r\n"
                },
                {
                    "date": 1748652262552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     const googleToken = this.googleAuthService.getAccessToken();\r\n    const user = localStorage.getItem(\"user_profile\");\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n if (user){\r\n-\r\n+const userProfile = JSON.parse(userProfileString);\r\n }\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n"
                },
                {
                    "date": 1748652274299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n     const googleToken = this.googleAuthService.getAccessToken();\r\n    const user = localStorage.getItem(\"user_profile\");\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n if (user){\r\n-const userProfile = JSON.parse(userProfileString);\r\n+const userProfile = JSON.parse(user);\r\n+const username = userProfile?.preferred_username || null;\r\n }\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n"
                },
                {
                    "date": 1748652281567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n    const user = localStorage.getItem(\"user_profile\");\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n if (user){\r\n const userProfile = JSON.parse(user);\r\n-const username = userProfile?.preferred_username || null;\r\n+this.currentUserEmail = userProfile?.preferred_username || null;\r\n }\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n"
                },
                {
                    "date": 1748652306713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n    const user = localStorage.getItem(\"user_profile\");\r\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n if (user){\r\n const userProfile = JSON.parse(user);\r\n-this.currentUserEmail = userProfile?.preferred_username || null;\r\n+this.currentUserEmail = userProfile?.email || null;\r\n }\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n"
                },
                {
                    "date": 1748652320585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n     const username = userProfile?.preferred_username || null;\r\n-    console.log(\"le username\",username)}\r\n+    \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n"
                },
                {
                    "date": 1748652327968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n if (user){\r\n const userProfile = JSON.parse(user);\r\n this.currentUserEmail = userProfile?.email || null;\r\n+console.log(\"le username\",this.currentUserEmail)}\r\n }\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n"
                },
                {
                    "date": 1748652339685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,14 +40,11 @@\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n if (user){\r\n const userProfile = JSON.parse(user);\r\n this.currentUserEmail = userProfile?.email || null;\r\n-console.log(\"le username\",this.currentUserEmail)}\r\n+console.log(\"l'email'\",this.currentUserEmail)}\r\n }\r\n   \r\n-  if (userProfileString) {\r\n-    const userProfile = JSON.parse(userProfileString);\r\n-    const username = userProfile?.preferred_username || null;\r\n     \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n"
                },
                {
                    "date": 1748652346375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,9 @@\n if (user){\r\n const userProfile = JSON.parse(user);\r\n this.currentUserEmail = userProfile?.email || null;\r\n console.log(\"l'email'\",this.currentUserEmail)}\r\n-}\r\n-  \r\n+\r\n     \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n"
                },
                {
                    "date": 1748652360068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,16 +41,14 @@\n if (user){\r\n const userProfile = JSON.parse(user);\r\n this.currentUserEmail = userProfile?.email || null;\r\n console.log(\"l'email'\",this.currentUserEmail)}\r\n-\r\n-    \r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n       return;\r\n-    }\r\n+    }}\r\n \r\n     this.loadAllEmails();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748652369047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n       return;\r\n-    }}\r\n+    }\r\n \r\n     this.loadAllEmails();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748652379980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,15 +40,15 @@\n     this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n if (user){\r\n const userProfile = JSON.parse(user);\r\n this.currentUserEmail = userProfile?.email || null;\r\n-console.log(\"l'email'\",this.currentUserEmail)}\r\n+console.log(\"l'email'\",this.currentUserEmail)\r\n     if (!googleToken) {\r\n       // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n       return;\r\n-    }\r\n+    }}\r\n \r\n     this.loadAllEmails();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748652420735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,58 +54,5 @@\n \r\n \r\n \r\n \r\n-  private checkAuth(): void {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    \r\n-    if (token) {\r\n-      this.isAuthenticated = true;\r\n-      this.loadEmails();\r\n-    } else {\r\n-      // Stocker l'URL actuelle avant la redirection\r\n-      const currentUrl = this.router.url;\r\n-      this.googleAuthService.initGoogleAuth(currentUrl);\r\n-    }\r\n-    \r\n-    this.authChecked = true;\r\n-  }\r\n-\r\n-     private loadEmails(): void {\r\n-    this.isLoading = true;\r\n-    // Ici vous devrez implémenter la vraie logique de chargement\r\n-    // depuis votre backend en utilisant le token\r\n-    this.loadMockEmails();\r\n-    this.isLoading = false;\r\n-  }\r\n-  loadMockEmails(): void {\r\n-    this.receivedEmails = [\r\n-      { id: 1, from: 'alice@example.com', subject: 'Invitation à la réunion de projet', bodySnippet: 'Bonjour, vous êtes cordialement invité à notre réunion...', date: new Date(Date.now() - 86400000), read: false },\r\n-      { id: 2, from: 'newsletter@info.com', subject: 'Votre résumé hebdomadaire ArchiManage', bodySnippet: 'Découvrez les dernières fonctionnalités et actualités...', date: new Date(Date.now() - 172800000), read: true },\r\n-      { id: 3, from: 'bob-construct@example.com', subject: 'Question concernant le plan B-102', bodySnippet: 'J\\'aurais une question sur les spécifications du plan...', date: new Date(Date.now() - 259200000), read: false },\r\n-    ];\r\n-\r\n-    this.sentEmails = [\r\n-      { id: 4, to: 'client.final@example.com', subject: 'RE: Validation des plans finaux', bodySnippet: 'Merci pour votre retour. Les modifications ont été apportées.', date: new Date(Date.now() - 345600000) },\r\n-      { id: 5, to: 'team@archimanage.com', subject: 'Compte rendu de la réunion client du 15/03', bodySnippet: 'Ci-joint le compte rendu de notre dernière réunion...', date: new Date(Date.now() - 432000000) },\r\n-    ];\r\n-\r\n-    this.draftEmails = [\r\n-      { id: 6, to: 'fournisseur-materiaux@example.com', subject: 'Demande de devis pour projet Alpha', bodySnippet: 'Bonjour, pourriez-vous nous fournir un devis pour les matériaux listés...', date: new Date() },\r\n-    ];\r\n-  }\r\n-\r\n-  setActiveTab(tab: ActiveEmailTab): void {\r\n-    this.activeTab = tab;\r\n-    console.log('Onglet changé vers:', this.activeTab);\r\n-    // Vous pouvez charger des données spécifiques à l'onglet ici si nécessaire\r\n-  }\r\n-\r\n-  selectEmail(email: any, tabName: ActiveEmailTab): void {\r\n-    console.log(`Email sélectionné depuis l'onglet ${tabName}:`, email);\r\n-    // Ici, vous pourriez implémenter la logique pour afficher l'email complet,\r\n-    // par exemple dans un modal ou une vue de détail.\r\n-    if (tabName === 'received' && email.read === false) {\r\n-      email.read = true; // Marquer comme lu\r\n-    }\r\n-  }\r\n }\r\n"
                },
                {
                    "date": 1748652454815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,6 +53,127 @@\n   }\r\n \r\n \r\n \r\n+private loadAllEmails(): void {\r\n+    this.isLoading = true;\r\n+    this.error = null;\r\n \r\n+    forkJoin([\r\n+      this.loadInboxEmails(),\r\n+      this.loadSentEmails(),\r\n+      this.loadDrafts()\r\n+    ]).subscribe({\r\n+      next: () => {\r\n+        this.isLoading = false;\r\n+      },\r\n+      error: (err) => {\r\n+        this.isLoading = false;\r\n+        this.error = err.message || 'Erreur lors du chargement des emails';\r\n+        console.error('Erreur:', err);\r\n+        \r\n+        // Si erreur 401, rafraîchir le token ou relancer l'authentification\r\n+        if (err.status === 401) {\r\n+          this.handleTokenExpired();\r\n+        }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private loadInboxEmails(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n+      tap(emails => {\r\n+        this.inboxEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+      }),\r\n+      map(() => void 0)\r\n+    );\r\n+  }\r\n+\r\n+  private loadSentEmails(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n+      tap(emails => {\r\n+        this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+      }),\r\n+      map(() => void 0)\r\n+    );\r\n+  }\r\n+\r\n+  private loadDrafts(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n+      tap(drafts => {\r\n+        this.drafts = drafts.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+      }),\r\n+      map(() => void 0)\r\n+    );\r\n+  }\r\n+\r\n+  private mapToEmailModel(email: any): any {\r\n+    return {\r\n+      id: email.id,\r\n+      subject: email.headers?.['subject'] || 'Sans objet',\r\n+      from: email.headers?.['from'],\r\n+      to: email.headers?.['to'],\r\n+      snippet: email.snippet,\r\n+      date: new Date(parseInt(email.internalDate)),\r\n+      isRead: !email.labelIds?.includes('UNREAD')\r\n+    };\r\n+  }\r\n+\r\n+  private handleTokenExpired(): void {\r\n+    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+    \r\n+    if (refreshToken) {\r\n+      this.googleAuthService.refreshToken()\r\n+        .then(() => this.loadAllEmails())\r\n+        .catch(() => this.router.navigate(['/login']));\r\n+    } else {\r\n+      this.googleAuthService.initGoogleAuth(this.router.url);\r\n+    }\r\n+  }\r\n+\r\n+  onTabChange(tab: 'inbox' | 'sent' | 'drafts'): void {\r\n+    this.activeTab = tab;\r\n+  }\r\n+\r\n+  onSelectEmail(email: Email): void {\r\n+    if (this.activeTab === 'inbox' && !email.isRead) {\r\n+      this.markAsRead(email.id);\r\n+    }\r\n+    // Implémenter la navigation vers le détail de l'email\r\n+    console.log('Email sélectionné:', email);\r\n+  }\r\n+\r\n+  private markAsRead(emailId: string): void {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n+      next: () => {\r\n+        const email = this.inboxEmails.find(e => e.id === emailId);\r\n+        if (email) {\r\n+          email.isRead = true;\r\n+        }\r\n+      },\r\n+      error: (err) => console.error('Erreur marquage comme lu:', err)\r\n+    });\r\n+  }\r\n+\r\n+  onDeleteEmail(emailId: string): void {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n+      next: () => {\r\n+        if (this.activeTab === 'inbox') {\r\n+          this.inboxEmails = this.inboxEmails.filter(e => e.id !== emailId);\r\n+        } else if (this.activeTab === 'sent') {\r\n+          this.sentEmails = this.sentEmails.filter(e => e.id !== emailId);\r\n+        }\r\n+      },\r\n+      error: (err) => console.error('Erreur suppression:', err)\r\n+    });\r\n+  }\r\n+\r\n+  onSendNewEmail(): void {\r\n+    // Implémenter la logique d'envoi d'un nouvel email\r\n+    console.log('Nouvel email à envoyer');\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1748652462317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { Subscription } from 'rxjs';\r\n+import { map, Subscription, tap } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n"
                },
                {
                    "date": 1748652478145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { map, Subscription, tap } from 'rxjs';\r\n+import { map, Observable, Subscription, tap } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n@@ -90,8 +90,9 @@\n   }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    if\r\n     return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n       }),\r\n"
                },
                {
                    "date": 1748652484701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n   }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n-    if\r\n+    if(token){}\r\n     return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n       }),\r\n"
                },
                {
                    "date": 1748652490792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n       }),\r\n       map(() => void 0)\r\n     );\r\n-  }\r\n+  }}\r\n \r\n   private loadDrafts(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n"
                },
                {
                    "date": 1748652498895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,16 +90,16 @@\n   }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n-    if(token){}\r\n+    if(token){\r\n     return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n       }),\r\n       map(() => void 0)\r\n-    );\r\n-  }}\r\n+    );}\r\n+  }\r\n \r\n   private loadDrafts(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n"
                },
                {
                    "date": 1748652509382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,10 @@\n       tap(emails => {\r\n         this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n       }),\r\n       map(() => void 0)\r\n-    );}\r\n-  }\r\n+    );\r\n+  }}\r\n \r\n   private loadDrafts(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n"
                },
                {
                    "date": 1748652531723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { map, Observable, Subscription, tap } from 'rxjs';\r\n+import { forkJoin, map, Observable, Subscription, tap } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n"
                },
                {
                    "date": 1748652540285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n   }\r\n \r\n   private loadInboxEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    \r\n     return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.inboxEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n       }),\r\n"
                },
                {
                    "date": 1748652545896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n   }\r\n \r\n   private loadInboxEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n-    \r\n+    if(token){\r\n     return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.inboxEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n       }),\r\n"
                },
                {
                    "date": 1748652558364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,181 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\r\n+import { AuthService } from '../services/auth.service';\r\n+import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n+import { Router } from '@angular/router';\r\n+import { forkJoin, map, Observable, Subscription, tap } from 'rxjs';\r\n+import { GmailService } from '../services/gmailService';\r\n+\r\n+type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n+@Component({\r\n+  selector: 'app-emails',\r\n+  templateUrl: './emails.component.html',\r\n+  styleUrl: './emails.component.scss'\r\n+})\r\n+export class EmailsComponent implements OnInit  {\r\n+ inboxEmails: any[] = [];\r\n+  sentEmails: any[] = [];\r\n+  drafts: any[] = [];\r\n+  activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n+ isLoading = false;\r\n+  isAuthenticated = false;\r\n+  authChecked = false;\r\n+  selectedEmailDetail: any | null = null; // For displaying full email content\r\n+error: string | null = null;\r\n+  currentUserEmail: string = '';\r\n+\r\n+\r\n+  constructor(\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private router: Router,\r\n+    private gmailService: GmailService // Inject GmailService\r\n+  ) { }\r\n+\r\n+  ngOnInit(): void {\r\n+this.checkAuthAndLoadEmails();\r\n+  }\r\n+  \r\n+private checkAuthAndLoadEmails(): void {\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+   const user = localStorage.getItem(\"user_profile\");\r\n+    this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n+if (user){\r\n+const userProfile = JSON.parse(user);\r\n+this.currentUserEmail = userProfile?.email || null;\r\n+console.log(\"l'email'\",this.currentUserEmail)\r\n+    if (!googleToken) {\r\n+      // Si pas de token Google, initier le flux d'authentification\r\n+      const currentUrl = this.router.url;\r\n+      this.googleAuthService.initGoogleAuth(currentUrl);\r\n+      return;\r\n+    }}\r\n+\r\n+    this.loadAllEmails();\r\n+  }\r\n+\r\n+\r\n+\r\n+private loadAllEmails(): void {\r\n+    this.isLoading = true;\r\n+    this.error = null;\r\n+\r\n+    forkJoin([\r\n+      this.loadInboxEmails(),\r\n+      this.loadSentEmails(),\r\n+      this.loadDrafts()\r\n+    ]).subscribe({\r\n+      next: () => {\r\n+        this.isLoading = false;\r\n+      },\r\n+      error: (err) => {\r\n+        this.isLoading = false;\r\n+        this.error = err.message || 'Erreur lors du chargement des emails';\r\n+        console.error('Erreur:', err);\r\n+        \r\n+        // Si erreur 401, rafraîchir le token ou relancer l'authentification\r\n+        if (err.status === 401) {\r\n+          this.handleTokenExpired();\r\n+        }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private loadInboxEmails(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    if(token){\r\n+    return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n+      tap(emails => {\r\n+        this.inboxEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+      }),\r\n+      map(() => void 0)\r\n+    );\r\n+  }}\r\n+\r\n+  private loadSentEmails(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    if(token){\r\n+    return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n+      tap(emails => {\r\n+        this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+      }),\r\n+      map(() => void 0)\r\n+    );\r\n+  }}\r\n+\r\n+  private loadDrafts(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n+      tap(drafts => {\r\n+        this.drafts = drafts.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+      }),\r\n+      map(() => void 0)\r\n+    );\r\n+  }\r\n+\r\n+  private mapToEmailModel(email: any): any {\r\n+    return {\r\n+      id: email.id,\r\n+      subject: email.headers?.['subject'] || 'Sans objet',\r\n+      from: email.headers?.['from'],\r\n+      to: email.headers?.['to'],\r\n+      snippet: email.snippet,\r\n+      date: new Date(parseInt(email.internalDate)),\r\n+      isRead: !email.labelIds?.includes('UNREAD')\r\n+    };\r\n+  }\r\n+\r\n+  private handleTokenExpired(): void {\r\n+    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+    \r\n+    if (refreshToken) {\r\n+      this.googleAuthService.refreshToken()\r\n+        .then(() => this.loadAllEmails())\r\n+        .catch(() => this.router.navigate(['/login']));\r\n+    } else {\r\n+      this.googleAuthService.initGoogleAuth(this.router.url);\r\n+    }\r\n+  }\r\n+\r\n+  onTabChange(tab: 'inbox' | 'sent' | 'drafts'): void {\r\n+    this.activeTab = tab;\r\n+  }\r\n+\r\n+  onSelectEmail(email: any): void {\r\n+    if (this.activeTab === 'inbox' && !email.isRead) {\r\n+      this.markAsRead(email.id);\r\n+    }\r\n+    // Implémenter la navigation vers le détail de l'email\r\n+    console.log('Email sélectionné:', email);\r\n+  }\r\n+\r\n+  private markAsRead(emailId: string): void {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n+      next: () => {\r\n+        const email = this.inboxEmails.find(e => e.id === emailId);\r\n+        if (email) {\r\n+          email.isRead = true;\r\n+        }\r\n+      },\r\n+      error: (err) => console.error('Erreur marquage comme lu:', err)\r\n+    });\r\n+  }\r\n+\r\n+  onDeleteEmail(emailId: string): void {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n+      next: () => {\r\n+        if (this.activeTab === 'inbox') {\r\n+          this.inboxEmails = this.inboxEmails.filter(e => e.id !== emailId);\r\n+        } else if (this.activeTab === 'sent') {\r\n+          this.sentEmails = this.sentEmails.filter(e => e.id !== emailId);\r\n+        }\r\n+      },\r\n+      error: (err) => console.error('Erreur suppression:', err)\r\n+    });\r\n+  }\r\n+\r\n+  onSendNewEmail(): void {\r\n+    // Implémenter la logique d'envoi d'un nouvel email\r\n+    console.log('Nouvel email à envoyer');\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1748652696337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,298 +11,123 @@\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent implements OnInit  {\r\n- inboxEmails: any[] = [];\r\n-  sentEmails: any[] = [];\r\n-  drafts: any[] = [];\r\n-  activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n- isLoading = false;\r\n-  isAuthenticated = false;\r\n-  authChecked = false;\r\n-  selectedEmailDetail: any | null = null; // For displaying full email content\r\n-error: string | null = null;\r\n+ receivedEmails: Email[] = [];\r\n+  sentEmails: Email[] = [];\r\n+  draftEmails: Email[] = [];\r\n+  activeTab: ActiveEmailTab = 'received';\r\n+  isLoading = false;\r\n+  error: string | null = null;\r\n   currentUserEmail: string = '';\r\n \r\n-\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router,\r\n-    private gmailService: GmailService // Inject GmailService\r\n-  ) { }\r\n+    private gmailService: GmailService,\r\n+    private authService: AuthService\r\n+  ) {}\r\n \r\n   ngOnInit(): void {\r\n-this.checkAuthAndLoadEmails();\r\n+    this.checkAuthAndLoadEmails();\r\n   }\r\n-  \r\n-private checkAuthAndLoadEmails(): void {\r\n+\r\n+  private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n-   const user = localStorage.getItem(\"user_profile\");\r\n-    this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n-if (user){\r\n-const userProfile = JSON.parse(user);\r\n-this.currentUserEmail = userProfile?.email || null;\r\n-console.log(\"l'email'\",this.currentUserEmail)\r\n-    if (!googleToken) {\r\n-      // Si pas de token Google, initier le flux d'authentification\r\n-      const currentUrl = this.router.url;\r\n-      this.googleAuthService.initGoogleAuth(currentUrl);\r\n-      return;\r\n-    }}\r\n-\r\n-    this.loadAllEmails();\r\n-  }\r\n-\r\n-\r\n-\r\n-private loadAllEmails(): void {\r\n-    this.isLoading = true;\r\n-    this.error = null;\r\n-\r\n-    forkJoin([\r\n-      this.loadInboxEmails(),\r\n-      this.loadSentEmails(),\r\n-      this.loadDrafts()\r\n-    ]).subscribe({\r\n-      next: () => {\r\n-        this.isLoading = false;\r\n-      },\r\n-      error: (err) => {\r\n-        this.isLoading = false;\r\n-        this.error = err.message || 'Erreur lors du chargement des emails';\r\n-        console.error('Erreur:', err);\r\n-        \r\n-        // Si erreur 401, rafraîchir le token ou relancer l'authentification\r\n-        if (err.status === 401) {\r\n-          this.handleTokenExpired();\r\n-        }\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  private loadInboxEmails(): Observable<void> {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    if(token){\r\n-    return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n-      tap(emails => {\r\n-        this.inboxEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n-      }),\r\n-      map(() => void 0)\r\n-    );\r\n-  }}\r\n-\r\n-  private loadSentEmails(): Observable<void> {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    if(token){\r\n-    return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n-      tap(emails => {\r\n-        this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n-      }),\r\n-      map(() => void 0)\r\n-    );\r\n-  }}\r\n-\r\n-  private loadDrafts(): Observable<void> {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n-      tap(drafts => {\r\n-        this.drafts = drafts.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n-      }),\r\n-      map(() => void 0)\r\n-    );\r\n-  }\r\n-\r\n-  private mapToEmailModel(email: any): any {\r\n-    return {\r\n-      id: email.id,\r\n-      subject: email.headers?.['subject'] || 'Sans objet',\r\n-      from: email.headers?.['from'],\r\n-      to: email.headers?.['to'],\r\n-      snippet: email.snippet,\r\n-      date: new Date(parseInt(email.internalDate)),\r\n-      isRead: !email.labelIds?.includes('UNREAD')\r\n-    };\r\n-  }\r\n-\r\n-  private handleTokenExpired(): void {\r\n-    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+    const userProfile = this.authService.getDecodedToken();\r\n     \r\n-    if (refreshToken) {\r\n-      this.googleAuthService.refreshToken()\r\n-        .then(() => this.loadAllEmails())\r\n-        .catch(() => this.router.navigate(['/login']));\r\n-    } else {\r\n-      this.googleAuthService.initGoogleAuth(this.router.url);\r\n-    }\r\n-  }\r\n+    this.currentUserEmail = userProfile?.email || '';\r\n+    console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n-  onTabChange(tab: 'inbox' | 'sent' | 'drafts'): void {\r\n-    this.activeTab = tab;\r\n-  }\r\n-\r\n-  onSelectEmail(email: any): void {\r\n-    if (this.activeTab === 'inbox' && !email.isRead) {\r\n-      this.markAsRead(email.id);\r\n-    }\r\n-    // Implémenter la navigation vers le détail de l'email\r\n-    console.log('Email sélectionné:', email);\r\n-  }\r\n-\r\n-  private markAsRead(emailId: string): void {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n-      next: () => {\r\n-        const email = this.inboxEmails.find(e => e.id === emailId);\r\n-        if (email) {\r\n-          email.isRead = true;\r\n-        }\r\n-      },\r\n-      error: (err) => console.error('Erreur marquage comme lu:', err)\r\n-    });\r\n-  }\r\n-\r\n-  onDeleteEmail(emailId: string): void {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n-      next: () => {\r\n-        if (this.activeTab === 'inbox') {\r\n-          this.inboxEmails = this.inboxEmails.filter(e => e.id !== emailId);\r\n-        } else if (this.activeTab === 'sent') {\r\n-          this.sentEmails = this.sentEmails.filter(e => e.id !== emailId);\r\n-        }\r\n-      },\r\n-      error: (err) => console.error('Erreur suppression:', err)\r\n-    });\r\n-  }\r\n-\r\n-  onSendNewEmail(): void {\r\n-    // Implémenter la logique d'envoi d'un nouvel email\r\n-    console.log('Nouvel email à envoyer');\r\n-  }\r\n-}\r\n-import { Component, OnDestroy, OnInit } from '@angular/core';\r\n-import { AuthService } from '../services/auth.service';\r\n-import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n-import { Router } from '@angular/router';\r\n-import { forkJoin, map, Observable, Subscription, tap } from 'rxjs';\r\n-import { GmailService } from '../services/gmailService';\r\n-\r\n-type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n-@Component({\r\n-  selector: 'app-emails',\r\n-  templateUrl: './emails.component.html',\r\n-  styleUrl: './emails.component.scss'\r\n-})\r\n-export class EmailsComponent implements OnInit  {\r\n- inboxEmails: any[] = [];\r\n-  sentEmails: any[] = [];\r\n-  drafts: any[] = [];\r\n-  activeTab: ActiveEmailTab = 'received'; // Onglet actif par défaut\r\n- isLoading = false;\r\n-  isAuthenticated = false;\r\n-  authChecked = false;\r\n-  selectedEmailDetail: any | null = null; // For displaying full email content\r\n-error: string | null = null;\r\n-  currentUserEmail: string = '';\r\n-\r\n-\r\n-  constructor(\r\n-    private googleAuthService: GoogleAuthService,\r\n-    private router: Router,\r\n-    private gmailService: GmailService // Inject GmailService\r\n-  ) { }\r\n-\r\n-  ngOnInit(): void {\r\n-this.checkAuthAndLoadEmails();\r\n-  }\r\n-  \r\n-private checkAuthAndLoadEmails(): void {\r\n-    const googleToken = this.googleAuthService.getAccessToken();\r\n-   const user = localStorage.getItem(\"user_profile\");\r\n-    this.currentUserEmail = 'user@example.com'; // À remplacer par l'email réel\r\n-if (user){\r\n-const userProfile = JSON.parse(user);\r\n-this.currentUserEmail = userProfile?.email || null;\r\n-console.log(\"l'email'\",this.currentUserEmail)\r\n     if (!googleToken) {\r\n-      // Si pas de token Google, initier le flux d'authentification\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n       return;\r\n-    }}\r\n+    }\r\n \r\n     this.loadAllEmails();\r\n   }\r\n \r\n-\r\n-\r\n-private loadAllEmails(): void {\r\n+  private loadAllEmails(): void {\r\n     this.isLoading = true;\r\n     this.error = null;\r\n \r\n     forkJoin([\r\n-      this.loadInboxEmails(),\r\n+      this.loadReceivedEmails(),\r\n       this.loadSentEmails(),\r\n       this.loadDrafts()\r\n-    ]).subscribe({\r\n-      next: () => {\r\n-        this.isLoading = false;\r\n-      },\r\n+    ]).pipe(\r\n+      finalize(() => this.isLoading = false)\r\n+    ).subscribe({\r\n       error: (err) => {\r\n-        this.isLoading = false;\r\n         this.error = err.message || 'Erreur lors du chargement des emails';\r\n         console.error('Erreur:', err);\r\n-        \r\n-        // Si erreur 401, rafraîchir le token ou relancer l'authentification\r\n         if (err.status === 401) {\r\n           this.handleTokenExpired();\r\n         }\r\n       }\r\n     });\r\n   }\r\n \r\n-  private loadInboxEmails(): Observable<void> {\r\n+  private loadReceivedEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n-    if(token){\r\n+    if (!token) return of(void 0);\r\n+\r\n     return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n-        this.inboxEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+        this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n-      map(() => void 0)\r\n+      map(() => void 0),\r\n+      catchError(err => {\r\n+        console.error('Erreur chargement emails reçus:', err);\r\n+        return of(void 0);\r\n+      })\r\n     );\r\n   }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n-    if(token){\r\n+    if (!token) return of(void 0);\r\n+\r\n     return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n-        this.sentEmails = emails.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+        this.sentEmails = this.mapEmails(emails);\r\n       }),\r\n-      map(() => void 0)\r\n+      map(() => void 0),\r\n+      catchError(err => {\r\n+        console.error('Erreur chargement emails envoyés:', err);\r\n+        return of(void 0);\r\n+      })\r\n     );\r\n-  }}\r\n+  }\r\n \r\n   private loadDrafts(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    if (!token) return of(void 0);\r\n+\r\n     return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n       tap(drafts => {\r\n-        this.drafts = drafts.map(this.mapToEmailModel).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+        this.draftEmails = this.mapEmails(drafts);\r\n       }),\r\n-      map(() => void 0)\r\n+      map(() => void 0),\r\n+      catchError(err => {\r\n+        console.error('Erreur chargement brouillons:', err);\r\n+        return of(void 0);\r\n+      })\r\n     );\r\n   }\r\n \r\n-  private mapToEmailModel(email: any): any {\r\n-    return {\r\n+  private mapEmails(emails: any[]): Email[] {\r\n+    return emails.map(email => ({\r\n       id: email.id,\r\n       subject: email.headers?.['subject'] || 'Sans objet',\r\n       from: email.headers?.['from'],\r\n       to: email.headers?.['to'],\r\n       snippet: email.snippet,\r\n+      bodySnippet: email.snippet,\r\n       date: new Date(parseInt(email.internalDate)),\r\n       isRead: !email.labelIds?.includes('UNREAD')\r\n-    };\r\n+    })).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n   }\r\n \r\n   private handleTokenExpired(): void {\r\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n@@ -315,48 +140,49 @@\n       this.googleAuthService.initGoogleAuth(this.router.url);\r\n     }\r\n   }\r\n \r\n-  onTabChange(tab: 'inbox' | 'sent' | 'drafts'): void {\r\n+  setActiveTab(tab: ActiveEmailTab): void {\r\n     this.activeTab = tab;\r\n   }\r\n \r\n-  onSelectEmail(email: Email): void {\r\n-    if (this.activeTab === 'inbox' && !email.isRead) {\r\n+  selectEmail(email: Email, tab: ActiveEmailTab): void {\r\n+    if (tab === 'received' && !email.isRead) {\r\n       this.markAsRead(email.id);\r\n     }\r\n-    // Implémenter la navigation vers le détail de l'email\r\n+    // Implémenter la vue détaillée ici\r\n     console.log('Email sélectionné:', email);\r\n   }\r\n \r\n   private markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    if (!token) return;\r\n+\r\n     this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n       next: () => {\r\n-        const email = this.inboxEmails.find(e => e.id === emailId);\r\n+        const email = this.receivedEmails.find(e => e.id === emailId);\r\n         if (email) {\r\n           email.isRead = true;\r\n         }\r\n       },\r\n       error: (err) => console.error('Erreur marquage comme lu:', err)\r\n     });\r\n   }\r\n \r\n-  onDeleteEmail(emailId: string): void {\r\n+  onDeleteEmail(emailId: string, tab: ActiveEmailTab): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    if (!token) return;\r\n+\r\n     this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n       next: () => {\r\n-        if (this.activeTab === 'inbox') {\r\n-          this.inboxEmails = this.inboxEmails.filter(e => e.id !== emailId);\r\n-        } else if (this.activeTab === 'sent') {\r\n+        if (tab === 'received') {\r\n+          this.receivedEmails = this.receivedEmails.filter(e => e.id !== emailId);\r\n+        } else if (tab === 'sent') {\r\n           this.sentEmails = this.sentEmails.filter(e => e.id !== emailId);\r\n+        } else if (tab === 'draft') {\r\n+          this.draftEmails = this.draftEmails.filter(e => e.id !== emailId);\r\n         }\r\n       },\r\n       error: (err) => console.error('Erreur suppression:', err)\r\n     });\r\n   }\r\n-\r\n-  onSendNewEmail(): void {\r\n-    // Implémenter la logique d'envoi d'un nouvel email\r\n-    console.log('Nouvel email à envoyer');\r\n-  }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748652703736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent implements OnInit  {\r\n- receivedEmails: Email[] = [];\r\n+ receivedEmails: any[] = [];\r\n   sentEmails: Email[] = [];\r\n   draftEmails: Email[] = [];\r\n   activeTab: ActiveEmailTab = 'received';\r\n   isLoading = false;\r\n"
                },
                {
                    "date": 1748652714157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { forkJoin, map, Observable, Subscription, tap } from 'rxjs';\r\n+import { finalize, forkJoin, map, Observable, Subscription, tap } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n@@ -12,10 +12,10 @@\n   styleUrl: './emails.component.scss'\r\n })\r\n export class EmailsComponent implements OnInit  {\r\n  receivedEmails: any[] = [];\r\n-  sentEmails: Email[] = [];\r\n-  draftEmails: Email[] = [];\r\n+  sentEmails: any[] = [];\r\n+  draftEmails: any[] = [];\r\n   activeTab: ActiveEmailTab = 'received';\r\n   isLoading = false;\r\n   error: string | null = null;\r\n   currentUserEmail: string = '';\r\n"
                },
                {
                    "date": 1748652721390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { finalize, forkJoin, map, Observable, Subscription, tap } from 'rxjs';\r\n+import { catchError, finalize, forkJoin, map, Observable, of, Subscription, tap } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n"
                },
                {
                    "date": 1748652730750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n       })\r\n     );\r\n   }\r\n \r\n-  private mapEmails(emails: any[]): Email[] {\r\n+  private mapEmails(emails: any[]): any[] {\r\n     return emails.map(email => ({\r\n       id: email.id,\r\n       subject: email.headers?.['subject'] || 'Sans objet',\r\n       from: email.headers?.['from'],\r\n"
                },
                {
                    "date": 1748652801352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \r\n     this.loadAllEmails();\r\n   }\r\n \r\n-  private loadAllEmails(): void {\r\n+   loadAllEmails(): void {\r\n     this.isLoading = true;\r\n     this.error = null;\r\n \r\n     forkJoin([\r\n@@ -144,9 +144,9 @@\n   setActiveTab(tab: ActiveEmailTab): void {\r\n     this.activeTab = tab;\r\n   }\r\n \r\n-  selectEmail(email: Email, tab: ActiveEmailTab): void {\r\n+  selectEmail(email: any, tab: ActiveEmailTab): void {\r\n     if (tab === 'received' && !email.isRead) {\r\n       this.markAsRead(email.id);\r\n     }\r\n     // Implémenter la vue détaillée ici\r\n"
                },
                {
                    "date": 1748686843876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n   private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const userProfile = this.authService.getDecodedToken();\r\n-    \r\n+    console\r\n     this.currentUserEmail = userProfile?.email || '';\r\n     console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n     if (!googleToken) {\r\n"
                },
                {
                    "date": 1748686851528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n   private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const userProfile = this.authService.getDecodedToken();\r\n-    console\r\n+    console.log(\"Profil utilisateur:\", userProfile\")\r\n     this.currentUserEmail = userProfile?.email || '';\r\n     console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n     if (!googleToken) {\r\n"
                },
                {
                    "date": 1748686857461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n   private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const userProfile = this.authService.getDecodedToken();\r\n-    console.log(\"Profil utilisateur:\", userProfile\")\r\n+    console.log(\"Profil utilisateur:\", userProfile);\r\n     this.currentUserEmail = userProfile?.email || '';\r\n     console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n     if (!googleToken) {\r\n"
                },
                {
                    "date": 1748686862766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,10 @@\n   private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const userProfile = this.authService.getDecodedToken();\r\n     console.log(\"Profil utilisateur:\", userProfile);\r\n+    console.log(\"Token Google:\", googleToken);\r\n+\r\n     this.currentUserEmail = userProfile?.email || '';\r\n     console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n     if (!googleToken) {\r\n"
                },
                {
                    "date": 1748686892437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n   }\r\n \r\n   private loadReceivedEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    \r\n     if (!token) return of(void 0);\r\n \r\n     return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n"
                },
                {
                    "date": 1748686902076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,8 @@\n   }\r\n \r\n   private loadReceivedEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n-    \r\n     if (!token) return of(void 0);\r\n \r\n     return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n"
                },
                {
                    "date": 1748687037801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,11 +71,12 @@\n   }\r\n \r\n   private loadReceivedEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    console.log(\"Token:\", token);\r\n     if (!token) return of(void 0);\r\n \r\n-    return this.gmailService.getInboxEmails(token, this.currentUserEmail).pipe(\r\n+    return this.gmailService.getInboxEmails(token,100 this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n       map(() => void 0),\r\n"
                },
                {
                    "date": 1748692757939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,13 +70,13 @@\n     });\r\n   }\r\n \r\n   private loadReceivedEmails(): Observable<void> {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n+    const googleToken  = this.googleAuthService.getAccessToken();\r\n     console.log(\"Token:\", token);\r\n     if (!token) return of(void 0);\r\n \r\n-    return this.gmailService.getInboxEmails(token,100 this.currentUserEmail).pipe(\r\n+    return this.gmailService.getInboxEmails(token,100, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n       map(() => void 0),\r\n"
                },
                {
                    "date": 1748692774951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,12 +71,15 @@\n   }\r\n \r\n   private loadReceivedEmails(): Observable<void> {\r\n     const googleToken  = this.googleAuthService.getAccessToken();\r\n-    console.log(\"Token:\", token);\r\n-    if (!token) return of(void 0);\r\n+    console.log(\"Token:\", googleToken );\r\n+    if (!googleToken) {\r\n+      console.warn('Aucun token Google disponible');\r\n+      return of(void 0);\r\n+    }\r\n \r\n-    return this.gmailService.getInboxEmails(token,100, this.currentUserEmail).pipe(\r\n+    return this.gmailService.getInboxEmails(googleToken ,100, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n       map(() => void 0),\r\n"
                },
                {
                    "date": 1748692789750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n     if (!googleToken) {\r\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n-\r\n+    \r\n     return this.gmailService.getInboxEmails(googleToken ,100, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n"
                },
                {
                    "date": 1748692908199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,12 @@\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n     \r\n+    if (!this.currentUserEmail) {\r\n+      console.warn('Aucun email utilisateur défini');\r\n+      return of(void 0);\r\n+    }\r\n     return this.gmailService.getInboxEmails(googleToken ,100, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n         this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n"
                },
                {
                    "date": 1748692915886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n     if (!googleToken) {\r\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n-    \r\n+    const user\r\n     if (!this.currentUserEmail) {\r\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n"
                },
                {
                    "date": 1748692924052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,10 @@\n     if (!googleToken) {\r\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n-    const user\r\n+    const user=localStorage.getItem('user');\r\n+\r\n     if (!this.currentUserEmail) {\r\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n"
                },
                {
                    "date": 1748692931400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,10 @@\n     if (!googleToken) {\r\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n-    const user=localStorage.getItem('user');\r\n-\r\n+    const user=localStorage.getItem('user_profile');\r\n+    \r\n     if (!this.currentUserEmail) {\r\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n"
                },
                {
                    "date": 1748692947392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,14 @@\n     if (!googleToken) {\r\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n-    const user=localStorage.getItem('user_profile');\r\n-    \r\n+    const userProfileString = localStorage.getItem(\"user_profile\");\r\n+  \r\n+  if (userProfileString) {\r\n+    const userProfile = JSON.parse(userProfileString);\r\n+    const username = userProfile?.preferred_username || null;\r\n+    console.log(\"le username\",username)\r\n     if (!this.currentUserEmail) {\r\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n"
                },
                {
                    "date": 1748692978254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,10 @@\n     const userProfileString = localStorage.getItem(\"user_profile\");\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n-    const username = userProfile?.preferred_username || null;\r\n-    console.log(\"le username\",username)\r\n+    this.currentUserEmail = userProfile?.preferred_username || null;\r\n+    console.log(\"le username\",username) \r\n     if (!this.currentUserEmail) {\r\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n"
                },
                {
                    "date": 1748692985860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,10 @@\n     const userProfileString = localStorage.getItem(\"user_profile\");\r\n   \r\n   if (userProfileString) {\r\n     const userProfile = JSON.parse(userProfileString);\r\n-    this.currentUserEmail = userProfile?.preferred_username || null;\r\n-    console.log(\"le username\",username) \r\n+    this.currentUserEmail = userProfile?.email || null;\r\n+    \r\n     if (!this.currentUserEmail) {\r\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n"
                },
                {
                    "date": 1748693007266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n         console.error('Erreur chargement emails reçus:', err);\r\n         return of(void 0);\r\n       })\r\n     );\r\n-  }\r\n+  }}\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n"
                },
                {
                    "date": 1748693045912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n     return this.gmailService.getInboxEmails(googleToken ,100, this.currentUserEmail).pipe(\r\n-      tap(emails => {\r\n+      tap(emails:any[] => {\r\n         this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n"
                },
                {
                    "date": 1748693051544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n       console.warn('Aucun email utilisateur défini');\r\n       return of(void 0);\r\n     }\r\n     return this.gmailService.getInboxEmails(googleToken ,100, this.currentUserEmail).pipe(\r\n-      tap(emails:any[] => {\r\n+      tap((emails:any[]) => {\r\n         this.receivedEmails = this.mapEmails(emails);\r\n       }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n"
                },
                {
                    "date": 1748693103683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,36 +69,57 @@\n       }\r\n     });\r\n   }\r\n \r\n-  private loadReceivedEmails(): Observable<void> {\r\n-    const googleToken  = this.googleAuthService.getAccessToken();\r\n-    console.log(\"Token:\", googleToken );\r\n+ private loadReceivedEmails(): Observable<void> {\r\n+    // 1. Récupération du token Google\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+    \r\n     if (!googleToken) {\r\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n-    const userProfileString = localStorage.getItem(\"user_profile\");\r\n-  \r\n-  if (userProfileString) {\r\n-    const userProfile = JSON.parse(userProfileString);\r\n-    this.currentUserEmail = userProfile?.email || null;\r\n-    \r\n-    if (!this.currentUserEmail) {\r\n-      console.warn('Aucun email utilisateur défini');\r\n+\r\n+    // 2. Récupération du profil utilisateur avec sécurité\r\n+    try {\r\n+      const userProfileString = localStorage.getItem(\"user_profile\");\r\n+      \r\n+      if (!userProfileString) {\r\n+        console.warn('Aucun profil utilisateur trouvé dans le localStorage');\r\n+        return of(void 0);\r\n+      }\r\n+\r\n+      const userProfile = JSON.parse(userProfileString);\r\n+      this.currentUserEmail = userProfile?.email;\r\n+\r\n+      if (!this.currentUserEmail) {\r\n+        console.warn('Aucun email utilisateur dans le profil');\r\n+        return of(void 0);\r\n+      }\r\n+\r\n+      // 3. Appel du service avec gestion d'erreur complète\r\n+      return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n+        tap((emails: any[]) => {\r\n+          if (emails?.length > 0) {\r\n+            this.receivedEmails = this.mapEmails(emails);\r\n+            console.log(`Succès: ${emails.length} emails chargés`);\r\n+          } else {\r\n+            console.log('Aucun email trouvé');\r\n+            this.receivedEmails = [];\r\n+          }\r\n+        }),\r\n+        map(() => void 0),\r\n+        catchError(err => {\r\n+          console.error('Erreur lors du chargement des emails:', err);\r\n+          this.receivedEmails = []; // Réinitialisation en cas d'erreur\r\n+          return of(void 0);\r\n+        })\r\n+      );\r\n+    } catch (error) {\r\n+      console.error('Erreur lors de la lecture du profil utilisateur:', error);\r\n       return of(void 0);\r\n     }\r\n-    return this.gmailService.getInboxEmails(googleToken ,100, this.currentUserEmail).pipe(\r\n-      tap((emails:any[]) => {\r\n-        this.receivedEmails = this.mapEmails(emails);\r\n-      }),\r\n-      map(() => void 0),\r\n-      catchError(err => {\r\n-        console.error('Erreur chargement emails reçus:', err);\r\n-        return of(void 0);\r\n-      })\r\n-    );\r\n-  }}\r\n+  }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n"
                },
                {
                    "date": 1748695748764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n       }\r\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n       return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n-        tap((emails: any[]) => {\r\n+        tap((emails) => {\r\n           if (emails?.length > 0) {\r\n             this.receivedEmails = this.mapEmails(emails);\r\n             console.log(`Succès: ${emails.length} emails chargés`);\r\n           } else {\r\n"
                },
                {
                    "date": 1748695756584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n       return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n         tap((emails) => {\r\n-          if (emails?.length > 0) {\r\n+          if (emails) {\r\n             this.receivedEmails = this.mapEmails(emails);\r\n             console.log(`Succès: ${emails.length} emails chargés`);\r\n           } else {\r\n             console.log('Aucun email trouvé');\r\n"
                },
                {
                    "date": 1748696777081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,30 +96,34 @@\n         return of(void 0);\r\n       }\r\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n-      return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n-        tap((emails) => {\r\n-          if (emails) {\r\n-            this.receivedEmails = this.mapEmails(emails);\r\n-            console.log(`Succès: ${emails.length} emails chargés`);\r\n-          } else {\r\n-            console.log('Aucun email trouvé');\r\n-            this.receivedEmails = [];\r\n-          }\r\n-        }),\r\n-        map(() => void 0),\r\n-        catchError(err => {\r\n-          console.error('Erreur lors du chargement des emails:', err);\r\n-          this.receivedEmails = []; // Réinitialisation en cas d'erreur\r\n-          return of(void 0);\r\n-        })\r\n-      );\r\n-    } catch (error) {\r\n-      console.error('Erreur lors de la lecture du profil utilisateur:', error);\r\n-      return of(void 0);\r\n-    }\r\n+    return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n+      tap((response: any) => {\r\n+        if (response && Array.isArray(response)) {\r\n+          this.receivedEmails = this.mapEmails(response);\r\n+          console.log(`${this.receivedEmails.length} emails chargés`);\r\n+        } else if (response) {\r\n+          // Si la réponse est un seul email, le mettre dans un tableau\r\n+          this.receivedEmails = this.mapEmails([response]);\r\n+          console.log('1 email chargé');\r\n+        } else {\r\n+          console.log('Aucun email trouvé');\r\n+          this.receivedEmails = [];\r\n+        }\r\n+      }),\r\n+      map(() => void 0),\r\n+      catchError(err => {\r\n+        console.error('Erreur lors du chargement des emails:', err);\r\n+        this.receivedEmails = [];\r\n+        return of(void 0);\r\n+      })\r\n+    );\r\n+  } catch (error) {\r\n+    console.error('Erreur lors de la lecture du profil:', error);\r\n+    return of(void 0);\r\n   }\r\n+  }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n"
                },
                {
                    "date": 1748696800062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,20 +156,32 @@\n     );\r\n   }\r\n \r\n   private mapEmails(emails: any[]): any[] {\r\n-    return emails.map(email => ({\r\n-      id: email.id,\r\n-      subject: email.headers?.['subject'] || 'Sans objet',\r\n-      from: email.headers?.['from'],\r\n-      to: email.headers?.['to'],\r\n-      snippet: email.snippet,\r\n-      bodySnippet: email.snippet,\r\n-      date: new Date(parseInt(email.internalDate)),\r\n-      isRead: !email.labelIds?.includes('UNREAD')\r\n-    })).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+  if (!Array.isArray(emails)) {\r\n+    return [];\r\n   }\r\n \r\n+  return emails.map(email => ({\r\n+    id: email.id,\r\n+    subject: email.headers?.['subject'] || email.headers?.subject || 'Sans objet',\r\n+    from: this.extractEmailAddress(email.headers?.['from'] || email.headers?.from),\r\n+    to: this.extractEmailAddress(email.headers?.['to'] || email.headers?.to),\r\n+    snippet: email.snippet,\r\n+    bodySnippet: email.snippet,\r\n+    date: new Date(email.internalDate),\r\n+    isRead: !email.labelIds?.includes('UNREAD'),\r\n+    hasAttachments: email.attachments?.length > 0\r\n+  })).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n+}\r\n+\r\n+private extractEmailAddress(field: string): string {\r\n+  if (!field) return '';\r\n+  // Gère les formats comme \"Nom <email@domain.com>\"\r\n+  const match = field.match(/<([^>]+)>/);\r\n+  return match ? match[1] : field;\r\n+}\r\n+\r\n   private handleTokenExpired(): void {\r\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n     \r\n     if (refreshToken) {\r\n"
                },
                {
                    "date": 1748696931003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,8 +156,9 @@\n     );\r\n   }\r\n \r\n   private mapEmails(emails: any[]): any[] {\r\n+    console.log\r\n   if (!Array.isArray(emails)) {\r\n     return [];\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748696936793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n     );\r\n   }\r\n \r\n   private mapEmails(emails: any[]): any[] {\r\n-    console.log\r\n+    console.log(emails)\r\n   if (!Array.isArray(emails)) {\r\n     return [];\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748696944439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n     );\r\n   }\r\n \r\n   private mapEmails(emails: any[]): any[] {\r\n-    console.log(emails)\r\n+    console.log(\"les emails\",emails)\r\n   if (!Array.isArray(emails)) {\r\n     return [];\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748698793562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n       tap((response: any) => {\r\n-        if (response && Array.isArray(response)) {\r\n+        \r\n           this.receivedEmails = this.mapEmails(response);\r\n           console.log(`${this.receivedEmails.length} emails chargés`);\r\n         } else if (response) {\r\n           // Si la réponse est un seul email, le mettre dans un tableau\r\n"
                },
                {
                    "date": 1748698802607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,16 +101,9 @@\n       tap((response: any) => {\r\n         \r\n           this.receivedEmails = this.mapEmails(response);\r\n           console.log(`${this.receivedEmails.length} emails chargés`);\r\n-        } else if (response) {\r\n-          // Si la réponse est un seul email, le mettre dans un tableau\r\n-          this.receivedEmails = this.mapEmails([response]);\r\n-          console.log('1 email chargé');\r\n-        } else {\r\n-          console.log('Aucun email trouvé');\r\n-          this.receivedEmails = [];\r\n-        }\r\n+        \r\n       }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n         console.error('Erreur lors du chargement des emails:', err);\r\n"
                },
                {
                    "date": 1748698808993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n       tap((response: any) => {\r\n         \r\n-          this.receivedEmails = this.mapEmails(response);\r\n+          this.receivedEmails = response);\r\n           console.log(`${this.receivedEmails.length} emails chargés`);\r\n         \r\n       }),\r\n       map(() => void 0),\r\n"
                },
                {
                    "date": 1748698944520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,14 +97,14 @@\n       }\r\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n-      tap((response: any) => {\r\n-        \r\n-          this.receivedEmails = response);\r\n-          console.log(`${this.receivedEmails.length} emails chargés`);\r\n-        \r\n-      }),\r\n+       tap((response: any) => {\r\n+    // Toujours convertir la réponse en tableau\r\n+    const emailsArray = Array.isArray(response) ? response : [response];\r\n+    this.receivedEmails = this.mapEmails(emailsArray);\r\n+    console.log('Emails chargés:', this.receivedEmails);\r\n+  }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n         console.error('Erreur lors du chargement des emails:', err);\r\n         this.receivedEmails = [];\r\n"
                },
                {
                    "date": 1748699142728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n        tap((response: any) => {\r\n-    // Toujours convertir la réponse en tableau\r\n+    console.log()\r\n     const emailsArray = Array.isArray(response) ? response : [response];\r\n     this.receivedEmails = this.mapEmails(emailsArray);\r\n     console.log('Emails chargés:', this.receivedEmails);\r\n   }),\r\n"
                },
                {
                    "date": 1748699147978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n        tap((response: any) => {\r\n-    console.log()\r\n+    console.log(\"\")\r\n     const emailsArray = Array.isArray(response) ? response : [response];\r\n     this.receivedEmails = this.mapEmails(emailsArray);\r\n     console.log('Emails chargés:', this.receivedEmails);\r\n   }),\r\n"
                },
                {
                    "date": 1748699158199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n        tap((response: any) => {\r\n-    console.log(\"\")\r\n+    console.log(\"les emails recus\")\r\n     const emailsArray = Array.isArray(response) ? response : [response];\r\n     this.receivedEmails = this.mapEmails(emailsArray);\r\n     console.log('Emails chargés:', this.receivedEmails);\r\n   }),\r\n"
                },
                {
                    "date": 1748699193194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,10 +98,10 @@\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n        tap((response: any) => {\r\n-    console.log(\"les emails recus\")\r\n-    const emailsArray = Array.isArray(response) ? response : [response];\r\n+    console.log(\"les emails recus\",response)\r\n+    ;\r\n     this.receivedEmails = this.mapEmails(emailsArray);\r\n     console.log('Emails chargés:', this.receivedEmails);\r\n   }),\r\n       map(() => void 0),\r\n"
                },
                {
                    "date": 1748699201128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,10 +99,9 @@\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n        tap((response: any) => {\r\n     console.log(\"les emails recus\",response)\r\n-    ;\r\n-    this.receivedEmails = this.mapEmails(emailsArray);\r\n+    this.receivedEmails = response;\r\n     console.log('Emails chargés:', this.receivedEmails);\r\n   }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n"
                },
                {
                    "date": 1748700903366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,12 +98,17 @@\n \r\n       // 3. Appel du service avec gestion d'erreur complète\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n        tap((response: any) => {\r\n-    console.log(\"les emails recus\",response)\r\n-    this.receivedEmails = response;\r\n-    console.log('Emails chargés:', this.receivedEmails);\r\n-  }),\r\n+    console.log(\"Réponse complète:\", response);\r\n+    if (response && response.success && Array.isArray(response.data)) {\r\n+          this.receivedEmails = response.data;\r\n+          console.log('Emails chargés:', this.receivedEmails.length, this.receivedEmails);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue:', response);\r\n+          this.receivedEmails = [];\r\n+        }\r\n+      }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n         console.error('Erreur lors du chargement des emails:', err);\r\n         this.receivedEmails = [];\r\n"
                },
                {
                    "date": 1748701371983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n     if (!token) return of(void 0);\r\n \r\n     return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n       tap(emails => {\r\n+        console.log(\"emails dans sent\",emails)\r\n         this.sentEmails = this.mapEmails(emails);\r\n       }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n"
                },
                {
                    "date": 1748701644145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,11 +125,17 @@\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n \r\n     return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n-      tap(emails => {\r\n-        console.log(\"emails dans sent\",emails)\r\n-        this.sentEmails = this.mapEmails(emails);\r\n+      tap(response => {\r\n+        console.log(\"emails dans sent\",response)\r\n+        if (response && response.success && Array.isArray(response.data)) {\r\n+          this.sentEmails = response.data;\r\n+          console.log('Emails chargés:', this.sentEmails.length, this.sentEmails);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue:', response);\r\n+          this.sentEmails = [];\r\n+        }\r\n       }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n         console.error('Erreur chargement emails envoyés:', err);\r\n@@ -142,10 +148,18 @@\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n \r\n     return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n-      tap(drafts => {\r\n-        this.draftEmails = this.mapEmails(drafts);\r\n+      tap(response => {\r\n+       \r\n+        console.log(\"la reponse\",response)\r\n+        if (response && response.success && Array.isArray(response.data)) {\r\n+          this.draftEmails = response.data;\r\n+          console.log('Brouillons chargés:', this.draftEmails.length, this.draftEmails);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue:', response);\r\n+          this.draftEmails = [];\r\n+        }\r\n       }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n         console.error('Erreur chargement brouillons:', err);\r\n@@ -153,33 +167,11 @@\n       })\r\n     );\r\n   }\r\n \r\n-  private mapEmails(emails: any[]): any[] {\r\n-    console.log(\"les emails\",emails)\r\n-  if (!Array.isArray(emails)) {\r\n-    return [];\r\n-  }\r\n+  \r\n \r\n-  return emails.map(email => ({\r\n-    id: email.id,\r\n-    subject: email.headers?.['subject'] || email.headers?.subject || 'Sans objet',\r\n-    from: this.extractEmailAddress(email.headers?.['from'] || email.headers?.from),\r\n-    to: this.extractEmailAddress(email.headers?.['to'] || email.headers?.to),\r\n-    snippet: email.snippet,\r\n-    bodySnippet: email.snippet,\r\n-    date: new Date(email.internalDate),\r\n-    isRead: !email.labelIds?.includes('UNREAD'),\r\n-    hasAttachments: email.attachments?.length > 0\r\n-  })).sort((a, b) => b.date.getTime() - a.date.getTime());\r\n-}\r\n \r\n-private extractEmailAddress(field: string): string {\r\n-  if (!field) return '';\r\n-  // Gère les formats comme \"Nom <email@domain.com>\"\r\n-  const match = field.match(/<([^>]+)>/);\r\n-  return match ? match[1] : field;\r\n-}\r\n \r\n   private handleTokenExpired(): void {\r\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n     \r\n"
                },
                {
                    "date": 1748702066735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,11 +168,19 @@\n     );\r\n   }\r\n \r\n   \r\n+extractEmailAddress(fullString: string): string {\r\n+  if (!fullString) return '';\r\n+  \r\n+  // Cherche le pattern <email@domain.com>\r\n+  const matches = fullString.match(/<([^>]+)>/);\r\n+  \r\n+  // Si trouvé, retourne l'email, sinon retourne la string complète\r\n+  return matches ? matches[1] : fullString;\r\n+}\r\n \r\n \r\n-\r\n   private handleTokenExpired(): void {\r\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n     \r\n     if (refreshToken) {\r\n"
                },
                {
                    "date": 1748702385693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,8 +220,23 @@\n   }\r\n \r\n   onDeleteEmail(emailId: string, tab: ActiveEmailTab): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n+    const userProfileString = localStorage.getItem(\"user_profile\");\r\n+      \r\n+      if (!userProfileString) {\r\n+        console.warn('Aucun profil utilisateur trouvé dans le localStorage');\r\n+        return ;\r\n+      }\r\n+\r\n+      const userProfile = JSON.parse(userProfileString);\r\n+      this.currentUserEmail = userProfile?.email;\r\n+\r\n+      if (!this.currentUserEmail) {\r\n+        console.warn('Aucun email utilisateur dans le profil');\r\n+        return ;\r\n+      }\r\n+\r\n     if (!token) return;\r\n \r\n     this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n       next: () => {\r\n"
                },
                {
                    "date": 1748707345415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { catchError, finalize, forkJoin, map, Observable, of, Subscription, tap } from 'rxjs';\r\n+import { catchError, finalize, forkJoin, map, Observable, of, Subscription, tap, throwError } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n"
                },
                {
                    "date": 1748707364454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n-export class EmailsComponent implements OnInit  {\r\n+export class EmailsComponent implements OnInit ,OnDestroy   {\r\n  receivedEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n   draftEmails: any[] = [];\r\n   activeTab: ActiveEmailTab = 'received';\r\n"
                },
                {
                    "date": 1748707382324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     private router: Router,\r\n     private gmailService: GmailService,\r\n     private authService: AuthService\r\n   ) {}\r\n-\r\n+private subscriptions = new Subscription();\r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748707470792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n-export class EmailsComponent implements OnInit ,OnDestroy   {\r\n+export class EmailsComponent implements OnInit   {\r\n  receivedEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n   draftEmails: any[] = [];\r\n   activeTab: ActiveEmailTab = 'received';\r\n"
                },
                {
                    "date": 1748709788329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   activeTab: ActiveEmailTab = 'received';\r\n   isLoading = false;\r\n   error: string | null = null;\r\n   currentUserEmail: string = '';\r\n-\r\n+private destroy$ = new Subject<void>();\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router,\r\n     private gmailService: GmailService,\r\n"
                },
                {
                    "date": 1748709796216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,18 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { catchError, finalize, forkJoin, map, Observable, of, Subscription, tap, throwError } from 'rxjs';\r\n+import { catchError, finalize, forkJoin, map, Observable, of, Subject, Subscription, tap, throwError } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n })\r\n-export class EmailsComponent implements OnInit   {\r\n+export class EmailsComponent implements OnInit,OnDestroy    {\r\n  receivedEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n   draftEmails: any[] = [];\r\n   activeTab: ActiveEmailTab = 'received';\r\n"
                },
                {
                    "date": 1748709808861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,15 @@\n     private router: Router,\r\n     private gmailService: GmailService,\r\n     private authService: AuthService\r\n   ) {}\r\n-private subscriptions = new Subscription();\r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n   }\r\n-\r\n+ngOnDestroy(): void {\r\n+    this.destroy$.next();\r\n+    this.destroy$.complete();\r\n+  }\r\n   private checkAuthAndLoadEmails(): void {\r\n     const googleToken = this.googleAuthService.getAccessToken();\r\n     const userProfile = this.authService.getDecodedToken();\r\n     console.log(\"Profil utilisateur:\", userProfile);\r\n"
                },
                {
                    "date": 1748709843533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,10 @@\n     this.currentUserEmail = userProfile?.email || '';\r\n     console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n     if (!googleToken) {\r\n+            this.currentUserEmail = userProfile?.email || ''; // Set it here as well\r\n+\r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n       return;\r\n     }\r\n"
                },
                {
                    "date": 1748709853904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     this.currentUserEmail = userProfile?.email || '';\r\n     console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n     if (!googleToken) {\r\n-            this.currentUserEmail = userProfile?.email || ''; // Set it here as well\r\n+       this.currentUserEmail = userProfile?.email || ''; // Set it here as well\r\n \r\n       const currentUrl = this.router.url;\r\n       this.googleAuthService.initGoogleAuth(currentUrl);\r\n       return;\r\n"
                },
                {
                    "date": 1748709861207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,8 @@\n     const userProfile = this.authService.getDecodedToken();\r\n     console.log(\"Profil utilisateur:\", userProfile);\r\n     console.log(\"Token Google:\", googleToken);\r\n \r\n-    this.currentUserEmail = userProfile?.email || '';\r\n-    console.log(\"Email utilisateur:\", this.currentUserEmail);\r\n \r\n     if (!googleToken) {\r\n        this.currentUserEmail = userProfile?.email || ''; // Set it here as well\r\n \r\n"
                },
                {
                    "date": 1748709896866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,14 @@\n     }\r\n \r\n     this.loadAllEmails();\r\n   }\r\n-\r\n+private setCurrentUserEmail(): boolean {\r\n+    const userProfile = this.authService.getDecodedToken();\r\n+    this.currentUserEmail = userProfile?.email || '';\r\n+    console.log(\"Email utilisateur actuel:\", this.currentUserEmail);\r\n+    return !!this.currentUserEmail;\r\n+  }\r\n    loadAllEmails(): void {\r\n     this.isLoading = true;\r\n     this.error = null;\r\n \r\n"
                },
                {
                    "date": 1748709916698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,9 @@\n       this.loadReceivedEmails(),\r\n       this.loadSentEmails(),\r\n       this.loadDrafts()\r\n     ]).pipe(\r\n+      takeUntil(this.destroy$),\r\n       finalize(() => this.isLoading = false)\r\n     ).subscribe({\r\n       error: (err) => {\r\n         this.error = err.message || 'Erreur lors du chargement des emails';\r\n"
                },
                {
                    "date": 1748709952923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { AuthService } from '../services/auth.service';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n-import { catchError, finalize, forkJoin, map, Observable, of, Subject, Subscription, tap, throwError } from 'rxjs';\r\n+import { catchError, finalize, forkJoin, map, Observable, of, Subject, Subscription, takeUntil, tap, throwError } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n \r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n@@ -86,26 +86,13 @@\n       console.warn('Aucun token Google disponible');\r\n       return of(void 0);\r\n     }\r\n \r\n-    // 2. Récupération du profil utilisateur avec sécurité\r\n-    try {\r\n-      const userProfileString = localStorage.getItem(\"user_profile\");\r\n-      \r\n-      if (!userProfileString) {\r\n-        console.warn('Aucun profil utilisateur trouvé dans le localStorage');\r\n-        return of(void 0);\r\n-      }\r\n-\r\n-      const userProfile = JSON.parse(userProfileString);\r\n-      this.currentUserEmail = userProfile?.email;\r\n-\r\n-      if (!this.currentUserEmail) {\r\n-        console.warn('Aucun email utilisateur dans le profil');\r\n-        return of(void 0);\r\n-      }\r\n-\r\n-      // 3. Appel du service avec gestion d'erreur complète\r\n+    if (!this.currentUserEmail && !this.setCurrentUserEmail()) {\r\n+      console.warn('Email utilisateur non disponible pour charger les emails reçus.');\r\n+      this.error = 'Impossible de récupérer les informations utilisateur pour charger les emails.';\r\n+      return of(void 0);\r\n+    }\r\n     return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n        tap((response: any) => {\r\n     console.log(\"Réponse complète:\", response);\r\n     if (response && response.success && Array.isArray(response.data)) {\r\n"
                },
                {
                    "date": 1748709963491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n   } catch (error) {\r\n     console.error('Erreur lors de la lecture du profil:', error);\r\n     return of(void 0);\r\n   }\r\n-  }\r\n+  \r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n"
                },
                {
                    "date": 1748709974216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n   } catch (error) {\r\n     console.error('Erreur lors de la lecture du profil:', error);\r\n     return of(void 0);\r\n   }\r\n-  \r\n+  }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n"
                },
                {
                    "date": 1748710012132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\r\n+import { AuthService } from '../services/auth.service';\r\n+import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n+import { Router } from '@angular/router';\r\n+import { catchError, finalize, forkJoin, map, Observable, of, Subject, Subscription, takeUntil, tap, throwError } from 'rxjs';\r\n+import { GmailService } from '../services/gmailService';\r\n+\r\n+type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n+@Component({\r\n+  selector: 'app-emails',\r\n+  templateUrl: './emails.component.html',\r\n+  styleUrl: './emails.component.scss'\r\n+})\r\n+export class EmailsComponent implements OnInit,OnDestroy    {\r\n+ receivedEmails: any[] = [];\r\n+  sentEmails: any[] = [];\r\n+  draftEmails: any[] = [];\r\n+  activeTab: ActiveEmailTab = 'received';\r\n+  isLoading = false;\r\n+  error: string | null = null;\r\n+  currentUserEmail: string = '';\r\n+private destroy$ = new Subject<void>();\r\n+  constructor(\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private router: Router,\r\n+    private gmailService: GmailService,\r\n+    private authService: AuthService\r\n+  ) {}\r\n+  ngOnInit(): void {\r\n+    this.checkAuthAndLoadEmails();\r\n+  }\r\n+ngOnDestroy(): void {\r\n+    this.destroy$.next();\r\n+    this.destroy$.complete();\r\n+  }\r\n+  private checkAuthAndLoadEmails(): void {\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+    const userProfile = this.authService.getDecodedToken();\r\n+    console.log(\"Profil utilisateur:\", userProfile);\r\n+    console.log(\"Token Google:\", googleToken);\r\n+\r\n+\r\n+    if (!googleToken) {\r\n+       this.currentUserEmail = userProfile?.email || ''; // Set it here as well\r\n+\r\n+      const currentUrl = this.router.url;\r\n+      this.googleAuthService.initGoogleAuth(currentUrl);\r\n+      return;\r\n+    }\r\n+\r\n+    this.loadAllEmails();\r\n+  }\r\n+private setCurrentUserEmail(): boolean {\r\n+    const userProfile = this.authService.getDecodedToken();\r\n+    this.currentUserEmail = userProfile?.email || '';\r\n+    console.log(\"Email utilisateur actuel:\", this.currentUserEmail);\r\n+    return !!this.currentUserEmail;\r\n+  }\r\n+   loadAllEmails(): void {\r\n+    this.isLoading = true;\r\n+    this.error = null;\r\n+\r\n+    forkJoin([\r\n+      this.loadReceivedEmails(),\r\n+      this.loadSentEmails(),\r\n+      this.loadDrafts()\r\n+    ]).pipe(\r\n+      takeUntil(this.destroy$),\r\n+      finalize(() => this.isLoading = false)\r\n+    ).subscribe({\r\n+      error: (err) => {\r\n+        this.error = err.message || 'Erreur lors du chargement des emails';\r\n+        console.error('Erreur:', err);\r\n+        if (err.status === 401) {\r\n+          this.handleTokenExpired();\r\n+        }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+ private loadReceivedEmails(): Observable<void> {\r\n+    // 1. Récupération du token Google\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+    \r\n+    if (!googleToken) {\r\n+      console.warn('Aucun token Google disponible');\r\n+      return of(void 0);\r\n+    }\r\n+\r\n+    if (!this.currentUserEmail && !this.setCurrentUserEmail()) {\r\n+      console.warn('Email utilisateur non disponible pour charger les emails reçus.');\r\n+      this.error = 'Impossible de récupérer les informations utilisateur pour charger les emails.';\r\n+      return of(void 0);\r\n+    }\r\n+    return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n+       tap((response: any) => {\r\n+    console.log(\"Réponse complète:\", response);\r\n+    if (response && response.success && Array.isArray(response.data)) {\r\n+          this.receivedEmails = response.data;\r\n+          console.log('Emails chargés:', this.receivedEmails.length, this.receivedEmails);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue:', response);\r\n+          this.receivedEmails = [];\r\n+                    this.error = 'Format de données incorrect pour les emails reçus.';\r\n+\r\n+        }\r\n+      }),\r\n+      map(() => void 0),\r\n+      catchError(err => {\r\n+        console.error('Erreur lors du chargement des emails:', err);\r\n+        this.receivedEmails = [];\r\n+        return of(void 0);\r\n+      })\r\n+    );\r\n+  } catch (error) {\r\n+    console.error('Erreur lors de la lecture du profil:', error);\r\n+    return of(void 0);\r\n+  }\r\n+  }\r\n+\r\n+  private loadSentEmails(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    if (!token) return of(void 0);\r\n+\r\n+    return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n+      tap(response => {\r\n+        console.log(\"emails dans sent\",response)\r\n+        if (response && response.success && Array.isArray(response.data)) {\r\n+          this.sentEmails = response.data;\r\n+          console.log('Emails chargés:', this.sentEmails.length, this.sentEmails);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue:', response);\r\n+          this.sentEmails = [];\r\n+        }\r\n+      }),\r\n+      map(() => void 0),\r\n+      catchError(err => {\r\n+        console.error('Erreur chargement emails envoyés:', err);\r\n+        return of(void 0);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  private loadDrafts(): Observable<void> {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    if (!token) return of(void 0);\r\n+\r\n+    return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n+      tap(response => {\r\n+       \r\n+        console.log(\"la reponse\",response)\r\n+        if (response && response.success && Array.isArray(response.data)) {\r\n+          this.draftEmails = response.data;\r\n+          console.log('Brouillons chargés:', this.draftEmails.length, this.draftEmails);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue:', response);\r\n+          this.draftEmails = [];\r\n+        }\r\n+      }),\r\n+      map(() => void 0),\r\n+      catchError(err => {\r\n+        console.error('Erreur chargement brouillons:', err);\r\n+        return of(void 0);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  \r\n+extractEmailAddress(fullString: string): string {\r\n+  if (!fullString) return '';\r\n+  \r\n+  // Cherche le pattern <email@domain.com>\r\n+  const matches = fullString.match(/<([^>]+)>/);\r\n+  \r\n+  // Si trouvé, retourne l'email, sinon retourne la string complète\r\n+  return matches ? matches[1] : fullString;\r\n+}\r\n+\r\n+\r\n+  private handleTokenExpired(): void {\r\n+    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+    \r\n+    if (refreshToken) {\r\n+      this.googleAuthService.refreshToken()\r\n+        .then(() => this.loadAllEmails())\r\n+        .catch(() => this.router.navigate(['/login']));\r\n+    } else {\r\n+      this.googleAuthService.initGoogleAuth(this.router.url);\r\n+    }\r\n+  }\r\n+\r\n+  setActiveTab(tab: ActiveEmailTab): void {\r\n+    this.activeTab = tab;\r\n+  }\r\n+\r\n+  selectEmail(email: any, tab: ActiveEmailTab): void {\r\n+    if (tab === 'received' && !email.isRead) {\r\n+      this.markAsRead(email.id);\r\n+    }\r\n+    // Implémenter la vue détaillée ici\r\n+    console.log('Email sélectionné:', email);\r\n+  }\r\n+\r\n+  private markAsRead(emailId: string): void {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    if (!token) return;\r\n+\r\n+    this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n+      next: () => {\r\n+        const email = this.receivedEmails.find(e => e.id === emailId);\r\n+        if (email) {\r\n+          email.isRead = true;\r\n+        }\r\n+      },\r\n+      error: (err) => console.error('Erreur marquage comme lu:', err)\r\n+    });\r\n+  }\r\n+\r\n+  onDeleteEmail(emailId: string, tab: ActiveEmailTab): void {\r\n+    const token = this.googleAuthService.getAccessToken();\r\n+    const userProfileString = localStorage.getItem(\"user_profile\");\r\n+      \r\n+      if (!userProfileString) {\r\n+        console.warn('Aucun profil utilisateur trouvé dans le localStorage');\r\n+        return ;\r\n+      }\r\n+\r\n+      const userProfile = JSON.parse(userProfileString);\r\n+      this.currentUserEmail = userProfile?.email;\r\n+\r\n+      if (!this.currentUserEmail) {\r\n+        console.warn('Aucun email utilisateur dans le profil');\r\n+        return ;\r\n+      }\r\n+\r\n+    if (!token) return;\r\n+\r\n+    this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n+      next: () => {\r\n+        if (tab === 'received') {\r\n+          this.receivedEmails = this.receivedEmails.filter(e => e.id !== emailId);\r\n+        } else if (tab === 'sent') {\r\n+          this.sentEmails = this.sentEmails.filter(e => e.id !== emailId);\r\n+        } else if (tab === 'draft') {\r\n+          this.draftEmails = this.draftEmails.filter(e => e.id !== emailId);\r\n+        }\r\n+      },\r\n+      error: (err) => console.error('Erreur suppression:', err)\r\n+    });\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748710024744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n           console.log('Emails chargés:', this.receivedEmails.length, this.receivedEmails);\r\n         } else {\r\n           console.warn('Structure de réponse inattendue:', response);\r\n           this.receivedEmails = [];\r\n-                    this.error = 'Format de données incorrect pour les emails reçus.';\r\n+          this.error = 'Format de données incorrect pour les emails reçus.';\r\n \r\n         }\r\n       }),\r\n       map(() => void 0),\r\n@@ -111,13 +111,10 @@\n         this.receivedEmails = [];\r\n         return of(void 0);\r\n       })\r\n     );\r\n-  } catch (error) {\r\n-    console.error('Erreur lors de la lecture du profil:', error);\r\n-    return of(void 0);\r\n+ \r\n   }\r\n-  }\r\n \r\n   private loadSentEmails(): Observable<void> {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n@@ -247,254 +244,5 @@\n       },\r\n       error: (err) => console.error('Erreur suppression:', err)\r\n     });\r\n   }\r\n-}\n-import { Component, OnDestroy, OnInit } from '@angular/core';\r\n-import { AuthService } from '../services/auth.service';\r\n-import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n-import { Router } from '@angular/router';\r\n-import { catchError, finalize, forkJoin, map, Observable, of, Subject, Subscription, takeUntil, tap, throwError } from 'rxjs';\r\n-import { GmailService } from '../services/gmailService';\r\n-\r\n-type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n-@Component({\r\n-  selector: 'app-emails',\r\n-  templateUrl: './emails.component.html',\r\n-  styleUrl: './emails.component.scss'\r\n-})\r\n-export class EmailsComponent implements OnInit,OnDestroy    {\r\n- receivedEmails: any[] = [];\r\n-  sentEmails: any[] = [];\r\n-  draftEmails: any[] = [];\r\n-  activeTab: ActiveEmailTab = 'received';\r\n-  isLoading = false;\r\n-  error: string | null = null;\r\n-  currentUserEmail: string = '';\r\n-private destroy$ = new Subject<void>();\r\n-  constructor(\r\n-    private googleAuthService: GoogleAuthService,\r\n-    private router: Router,\r\n-    private gmailService: GmailService,\r\n-    private authService: AuthService\r\n-  ) {}\r\n-  ngOnInit(): void {\r\n-    this.checkAuthAndLoadEmails();\r\n-  }\r\n-ngOnDestroy(): void {\r\n-    this.destroy$.next();\r\n-    this.destroy$.complete();\r\n-  }\r\n-  private checkAuthAndLoadEmails(): void {\r\n-    const googleToken = this.googleAuthService.getAccessToken();\r\n-    const userProfile = this.authService.getDecodedToken();\r\n-    console.log(\"Profil utilisateur:\", userProfile);\r\n-    console.log(\"Token Google:\", googleToken);\r\n-\r\n-\r\n-    if (!googleToken) {\r\n-       this.currentUserEmail = userProfile?.email || ''; // Set it here as well\r\n-\r\n-      const currentUrl = this.router.url;\r\n-      this.googleAuthService.initGoogleAuth(currentUrl);\r\n-      return;\r\n-    }\r\n-\r\n-    this.loadAllEmails();\r\n-  }\r\n-private setCurrentUserEmail(): boolean {\r\n-    const userProfile = this.authService.getDecodedToken();\r\n-    this.currentUserEmail = userProfile?.email || '';\r\n-    console.log(\"Email utilisateur actuel:\", this.currentUserEmail);\r\n-    return !!this.currentUserEmail;\r\n-  }\r\n-   loadAllEmails(): void {\r\n-    this.isLoading = true;\r\n-    this.error = null;\r\n-\r\n-    forkJoin([\r\n-      this.loadReceivedEmails(),\r\n-      this.loadSentEmails(),\r\n-      this.loadDrafts()\r\n-    ]).pipe(\r\n-      takeUntil(this.destroy$),\r\n-      finalize(() => this.isLoading = false)\r\n-    ).subscribe({\r\n-      error: (err) => {\r\n-        this.error = err.message || 'Erreur lors du chargement des emails';\r\n-        console.error('Erreur:', err);\r\n-        if (err.status === 401) {\r\n-          this.handleTokenExpired();\r\n-        }\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n- private loadReceivedEmails(): Observable<void> {\r\n-    // 1. Récupération du token Google\r\n-    const googleToken = this.googleAuthService.getAccessToken();\r\n-    \r\n-    if (!googleToken) {\r\n-      console.warn('Aucun token Google disponible');\r\n-      return of(void 0);\r\n-    }\r\n-\r\n-    if (!this.currentUserEmail && !this.setCurrentUserEmail()) {\r\n-      console.warn('Email utilisateur non disponible pour charger les emails reçus.');\r\n-      this.error = 'Impossible de récupérer les informations utilisateur pour charger les emails.';\r\n-      return of(void 0);\r\n-    }\r\n-    return this.gmailService.getInboxEmails(googleToken, 100, this.currentUserEmail).pipe(\r\n-       tap((response: any) => {\r\n-    console.log(\"Réponse complète:\", response);\r\n-    if (response && response.success && Array.isArray(response.data)) {\r\n-          this.receivedEmails = response.data;\r\n-          console.log('Emails chargés:', this.receivedEmails.length, this.receivedEmails);\r\n-        } else {\r\n-          console.warn('Structure de réponse inattendue:', response);\r\n-          this.receivedEmails = [];\r\n-        }\r\n-      }),\r\n-      map(() => void 0),\r\n-      catchError(err => {\r\n-        console.error('Erreur lors du chargement des emails:', err);\r\n-        this.receivedEmails = [];\r\n-        return of(void 0);\r\n-      })\r\n-    );\r\n-  } catch (error) {\r\n-    console.error('Erreur lors de la lecture du profil:', error);\r\n-    return of(void 0);\r\n-  }\r\n-  }\r\n-\r\n-  private loadSentEmails(): Observable<void> {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    if (!token) return of(void 0);\r\n-\r\n-    return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n-      tap(response => {\r\n-        console.log(\"emails dans sent\",response)\r\n-        if (response && response.success && Array.isArray(response.data)) {\r\n-          this.sentEmails = response.data;\r\n-          console.log('Emails chargés:', this.sentEmails.length, this.sentEmails);\r\n-        } else {\r\n-          console.warn('Structure de réponse inattendue:', response);\r\n-          this.sentEmails = [];\r\n-        }\r\n-      }),\r\n-      map(() => void 0),\r\n-      catchError(err => {\r\n-        console.error('Erreur chargement emails envoyés:', err);\r\n-        return of(void 0);\r\n-      })\r\n-    );\r\n-  }\r\n-\r\n-  private loadDrafts(): Observable<void> {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    if (!token) return of(void 0);\r\n-\r\n-    return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n-      tap(response => {\r\n-       \r\n-        console.log(\"la reponse\",response)\r\n-        if (response && response.success && Array.isArray(response.data)) {\r\n-          this.draftEmails = response.data;\r\n-          console.log('Brouillons chargés:', this.draftEmails.length, this.draftEmails);\r\n-        } else {\r\n-          console.warn('Structure de réponse inattendue:', response);\r\n-          this.draftEmails = [];\r\n-        }\r\n-      }),\r\n-      map(() => void 0),\r\n-      catchError(err => {\r\n-        console.error('Erreur chargement brouillons:', err);\r\n-        return of(void 0);\r\n-      })\r\n-    );\r\n-  }\r\n-\r\n-  \r\n-extractEmailAddress(fullString: string): string {\r\n-  if (!fullString) return '';\r\n-  \r\n-  // Cherche le pattern <email@domain.com>\r\n-  const matches = fullString.match(/<([^>]+)>/);\r\n-  \r\n-  // Si trouvé, retourne l'email, sinon retourne la string complète\r\n-  return matches ? matches[1] : fullString;\r\n-}\r\n-\r\n-\r\n-  private handleTokenExpired(): void {\r\n-    const refreshToken = this.googleAuthService.getRefreshToken();\r\n-    \r\n-    if (refreshToken) {\r\n-      this.googleAuthService.refreshToken()\r\n-        .then(() => this.loadAllEmails())\r\n-        .catch(() => this.router.navigate(['/login']));\r\n-    } else {\r\n-      this.googleAuthService.initGoogleAuth(this.router.url);\r\n-    }\r\n-  }\r\n-\r\n-  setActiveTab(tab: ActiveEmailTab): void {\r\n-    this.activeTab = tab;\r\n-  }\r\n-\r\n-  selectEmail(email: any, tab: ActiveEmailTab): void {\r\n-    if (tab === 'received' && !email.isRead) {\r\n-      this.markAsRead(email.id);\r\n-    }\r\n-    // Implémenter la vue détaillée ici\r\n-    console.log('Email sélectionné:', email);\r\n-  }\r\n-\r\n-  private markAsRead(emailId: string): void {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    if (!token) return;\r\n-\r\n-    this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n-      next: () => {\r\n-        const email = this.receivedEmails.find(e => e.id === emailId);\r\n-        if (email) {\r\n-          email.isRead = true;\r\n-        }\r\n-      },\r\n-      error: (err) => console.error('Erreur marquage comme lu:', err)\r\n-    });\r\n-  }\r\n-\r\n-  onDeleteEmail(emailId: string, tab: ActiveEmailTab): void {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    const userProfileString = localStorage.getItem(\"user_profile\");\r\n-      \r\n-      if (!userProfileString) {\r\n-        console.warn('Aucun profil utilisateur trouvé dans le localStorage');\r\n-        return ;\r\n-      }\r\n-\r\n-      const userProfile = JSON.parse(userProfileString);\r\n-      this.currentUserEmail = userProfile?.email;\r\n-\r\n-      if (!this.currentUserEmail) {\r\n-        console.warn('Aucun email utilisateur dans le profil');\r\n-        return ;\r\n-      }\r\n-\r\n-    if (!token) return;\r\n-\r\n-    this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n-      next: () => {\r\n-        if (tab === 'received') {\r\n-          this.receivedEmails = this.receivedEmails.filter(e => e.id !== emailId);\r\n-        } else if (tab === 'sent') {\r\n-          this.sentEmails = this.sentEmails.filter(e => e.id !== emailId);\r\n-        } else if (tab === 'draft') {\r\n-          this.draftEmails = this.draftEmails.filter(e => e.id !== emailId);\r\n-        }\r\n-      },\r\n-      error: (err) => console.error('Erreur suppression:', err)\r\n-    });\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748710041028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n \r\n     return this.gmailService.getSentEmails(token, this.currentUserEmail).pipe(\r\n+      takeUntil(this.destroy$),\r\n       tap(response => {\r\n         console.log(\"emails dans sent\",response)\r\n         if (response && response.success && Array.isArray(response.data)) {\r\n           this.sentEmails = response.data;\r\n"
                },
                {
                    "date": 1748710052485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,10 @@\n           this.sentEmails = response.data;\r\n           console.log('Emails chargés:', this.sentEmails.length, this.sentEmails);\r\n         } else {\r\n           console.warn('Structure de réponse inattendue:', response);\r\n+                    this.error = 'Format de données incorrect pour les emails envoyés.';\r\n+\r\n           this.sentEmails = [];\r\n         }\r\n       }),\r\n       map(() => void 0),\r\n"
                },
                {
                    "date": 1748710071415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,17 +127,21 @@\n           this.sentEmails = response.data;\r\n           console.log('Emails chargés:', this.sentEmails.length, this.sentEmails);\r\n         } else {\r\n           console.warn('Structure de réponse inattendue:', response);\r\n-                    this.error = 'Format de données incorrect pour les emails envoyés.';\r\n+          this.error = 'Format de données incorrect pour les emails envoyés.';\r\n \r\n           this.sentEmails = [];\r\n         }\r\n       }),\r\n       map(() => void 0),\r\n       catchError(err => {\r\n         console.error('Erreur chargement emails envoyés:', err);\r\n         return of(void 0);\r\n+        this.error = `Erreur lors du chargement des emails envoyés: ${err.message || 'Erreur inconnue'}`;\r\n+        if (err.status === 401) {\r\n+          this.handleTokenExpired();\r\n+        }\r\n       })\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748710081963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,12 +136,9 @@\n       map(() => void 0),\r\n       catchError(err => {\r\n         console.error('Erreur chargement emails envoyés:', err);\r\n         return of(void 0);\r\n-        this.error = `Erreur lors du chargement des emails envoyés: ${err.message || 'Erreur inconnue'}`;\r\n-        if (err.status === 401) {\r\n-          this.handleTokenExpired();\r\n-        }\r\n+        \r\n       })\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1748710093288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,8 +146,9 @@\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return of(void 0);\r\n \r\n     return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n+      takeUntil(this.destroy$),\r\n       tap(response => {\r\n        \r\n         console.log(\"la reponse\",response)\r\n         if (response && response.success && Array.isArray(response.data)) {\r\n"
                },
                {
                    "date": 1748710112208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,8 +183,9 @@\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n     \r\n     if (refreshToken) {\r\n       this.googleAuthService.refreshToken()\r\n+      .pipe(takeUntil(this.destroy$))\r\n         .then(() => this.loadAllEmails())\r\n         .catch(() => this.router.navigate(['/login']));\r\n     } else {\r\n       this.googleAuthService.initGoogleAuth(this.router.url);\r\n"
                },
                {
                    "date": 1748710118026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,19 @@\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n     \r\n     if (refreshToken) {\r\n       this.googleAuthService.refreshToken()\r\n-      .pipe(takeUntil(this.destroy$))\r\n+      .import { Pipe, PipeTransform } from '@angular/core';\r\n+      \r\n+      @Pipe({\r\n+        name: 'selector-name'\r\n+      })\r\n+      \r\n+      export class NamePipe implements PipeTransform {\r\n+        transform(value: any, ...args: any[]): any {\r\n+          \r\n+        }\r\n+      }(takeUntil(this.destroy$))\r\n         .then(() => this.loadAllEmails())\r\n         .catch(() => this.router.navigate(['/login']));\r\n     } else {\r\n       this.googleAuthService.initGoogleAuth(this.router.url);\r\n"
                },
                {
                    "date": 1748710126154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,19 +183,9 @@\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n     \r\n     if (refreshToken) {\r\n       this.googleAuthService.refreshToken()\r\n-      .import { Pipe, PipeTransform } from '@angular/core';\r\n-      \r\n-      @Pipe({\r\n-        name: 'selector-name'\r\n-      })\r\n-      \r\n-      export class NamePipe implements PipeTransform {\r\n-        transform(value: any, ...args: any[]): any {\r\n-          \r\n-        }\r\n-      }(takeUntil(this.destroy$))\r\n+      .(takeUntil(this.destroy$))\r\n         .then(() => this.loadAllEmails())\r\n         .catch(() => this.router.navigate(['/login']));\r\n     } else {\r\n       this.googleAuthService.initGoogleAuth(this.router.url);\r\n"
                },
                {
                    "date": 1748710136698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n     const refreshToken = this.googleAuthService.getRefreshToken();\r\n     \r\n     if (refreshToken) {\r\n       this.googleAuthService.refreshToken()\r\n-      .(takeUntil(this.destroy$))\r\n+      \r\n         .then(() => this.loadAllEmails())\r\n         .catch(() => this.router.navigate(['/login']));\r\n     } else {\r\n       this.googleAuthService.initGoogleAuth(this.router.url);\r\n"
                },
                {
                    "date": 1748710156968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,12 @@\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return;\r\n \r\n     this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n+          this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n+    .pipe(takeUntil(this.destroy$))\r\n+    .subscribe({\r\n+\r\n       next: () => {\r\n         const email = this.receivedEmails.find(e => e.id === emailId);\r\n         if (email) {\r\n           email.isRead = true;\r\n"
                },
                {
                    "date": 1748710169378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n   private markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return;\r\n \r\n-    this.gmailService.markAsRead(token, emailId, this.currentUserEmail).subscribe({\r\n+   \r\n           this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n     .pipe(takeUntil(this.destroy$))\r\n     .subscribe({\r\n \r\n"
                },
                {
                    "date": 1748710214047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,26 +223,24 @@\n   }\r\n \r\n   onDeleteEmail(emailId: string, tab: ActiveEmailTab): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n-    const userProfileString = localStorage.getItem(\"user_profile\");\r\n-      \r\n-      if (!userProfileString) {\r\n-        console.warn('Aucun profil utilisateur trouvé dans le localStorage');\r\n-        return ;\r\n-      }\r\n+    if (!token) {\r\n+      console.warn('Aucun token Google disponible pour supprimer l\\'email.');\r\n+      this.error = 'Session Google expirée. Veuillez rafraîchir ou vous reconnecter.';\r\n+      // this.handleTokenExpired(); // Optionally trigger re-auth\r\n+      return;\r\n+    }\r\n \r\n-      const userProfile = JSON.parse(userProfileString);\r\n-      this.currentUserEmail = userProfile?.email;\r\n+    if (!this.currentUserEmail && !this.setCurrentUserEmail()) {\r\n+      console.warn('Email utilisateur non disponible pour la suppression.');\r\n+      this.error = 'Impossible de vérifier l\\'utilisateur pour cette action.';\r\n+      return;\r\n+    }\r\n \r\n-      if (!this.currentUserEmail) {\r\n-        console.warn('Aucun email utilisateur dans le profil');\r\n-        return ;\r\n-      }\r\n-\r\n-    if (!token) return;\r\n-\r\n-    this.gmailService.deleteEmail(token, emailId, this.currentUserEmail).subscribe({\r\n+    this.gmailService.deleteEmail(token, emailId, this.currentUserEmail)\r\n+    .pipe(takeUntil(this.destroy$))\r\n+    .subscribe({\r\n       next: () => {\r\n         if (tab === 'received') {\r\n           this.receivedEmails = this.receivedEmails.filter(e => e.id !== emailId);\r\n         } else if (tab === 'sent') {\r\n"
                },
                {
                    "date": 1748710229237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,10 +207,9 @@\n   private markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return;\r\n \r\n-   \r\n-          this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n+   this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n     .pipe(takeUntil(this.destroy$))\r\n     .subscribe({\r\n \r\n       next: () => {\r\n@@ -249,8 +248,14 @@\n         } else if (tab === 'draft') {\r\n           this.draftEmails = this.draftEmails.filter(e => e.id !== emailId);\r\n         }\r\n       },\r\n-      error: (err) => console.error('Erreur suppression:', err)\r\n+     error: (err) => {\r\n+        console.error('Erreur suppression:', err);\r\n+        this.error = `Erreur lors de la suppression: ${err.message || 'Veuillez réessayer.'}`;\r\n+        if (err.status === 401) {\r\n+          this.handleTokenExpired();\r\n++        }\r\n++      }\r\n     });\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748710246518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,7 +255,7 @@\n         if (err.status === 401) {\r\n           this.handleTokenExpired();\r\n +        }\r\n +      }\r\n-    });\r\n+    );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748710253811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n         console.error('Erreur suppression:', err);\r\n         this.error = `Erreur lors de la suppression: ${err.message || 'Veuillez réessayer.'}`;\r\n         if (err.status === 401) {\r\n           this.handleTokenExpired();\r\n-+        }\r\n++        }}}\r\n +      }\r\n-    );\r\n+    });\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748710259115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n         console.error('Erreur suppression:', err);\r\n         this.error = `Erreur lors de la suppression: ${err.message || 'Veuillez réessayer.'}`;\r\n         if (err.status === 401) {\r\n           this.handleTokenExpired();\r\n-+        }}}\r\n-+      }\r\n+        }\r\n+      }\r\n     });\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748712185921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,10 @@\n   activeTab: ActiveEmailTab = 'received';\r\n   isLoading = false;\r\n   error: string | null = null;\r\n   currentUserEmail: string = '';\r\n+    selectedEmailId: string | null = null; // Pour suivre l'email sélectionné\r\n+\r\n private destroy$ = new Subject<void>();\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router,\r\n"
                },
                {
                    "date": 1748712199981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,8 +199,9 @@\n   }\r\n \r\n   selectEmail(email: any, tab: ActiveEmailTab): void {\r\n     if (tab === 'received' && !email.isRead) {\r\n+       this.selectedEmailId = email.id;\r\n       this.markAsRead(email.id);\r\n     }\r\n     // Implémenter la vue détaillée ici\r\n     console.log('Email sélectionné:', email);\r\n"
                },
                {
                    "date": 1748712223213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,14 +198,16 @@\n     this.activeTab = tab;\r\n   }\r\n \r\n   selectEmail(email: any, tab: ActiveEmailTab): void {\r\n+     this.selectedEmailId = email.id;\r\n     if (tab === 'received' && !email.isRead) {\r\n-       this.selectedEmailId = email.id;\r\n+      \r\n       this.markAsRead(email.id);\r\n     }\r\n-    // Implémenter la vue détaillée ici\r\n-    console.log('Email sélectionné:', email);\r\n+   this.router.navigate(['/emails/view', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n+    console.log('Navigation vers le détail de l\\'email:', email.id);\r\n+\r\n   }\r\n \r\n   private markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n"
                },
                {
                    "date": 1748712342389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     if (tab === 'received' && !email.isRead) {\r\n       \r\n       this.markAsRead(email.id);\r\n     }\r\n-   this.router.navigate(['/emails/view', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n+   this.router.navigate(['/emails/details', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n     console.log('Navigation vers le détail de l\\'email:', email.id);\r\n \r\n   }\r\n \r\n"
                },
                {
                    "date": 1748712349847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     if (tab === 'received' && !email.isRead) {\r\n       \r\n       this.markAsRead(email.id);\r\n     }\r\n-   this.router.navigate(['/emails/details', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n+   this.router.navigate(['/emails/', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n     console.log('Navigation vers le détail de l\\'email:', email.id);\r\n \r\n   }\r\n \r\n"
                },
                {
                    "date": 1748712358411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     if (tab === 'received' && !email.isRead) {\r\n       \r\n       this.markAsRead(email.id);\r\n     }\r\n-   this.router.navigate(['/emails/', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n+   this.router.navigate(['/emails/:id', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n     console.log('Navigation vers le détail de l\\'email:', email.id);\r\n \r\n   }\r\n \r\n"
                },
                {
                    "date": 1749637792473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n import { catchError, finalize, forkJoin, map, Observable, of, Subject, Subscription, takeUntil, tap, throwError } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n-\r\n+import { MatDialog } from '@angular/material/dialog';\r\n+import { EmailDetailComponent } from '../email-detail/email-detail.component';\r\n+import { EmailFormComponent } from '../email-form/email-form.component';\r\n type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n @Component({\r\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n@@ -19,15 +21,18 @@\n   isLoading = false;\r\n   error: string | null = null;\r\n   currentUserEmail: string = '';\r\n     selectedEmailId: string | null = null; // Pour suivre l'email sélectionné\r\n-\r\n+isFormOpen = false;\r\n+  selectedEmail: any = null;\r\n+  \r\n private destroy$ = new Subject<void>();\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router,\r\n     private gmailService: GmailService,\r\n-    private authService: AuthService\r\n+    private authService: AuthService,\r\n+        public dialog: MatDialog\r\n   ) {}\r\n   ngOnInit(): void {\r\n     this.checkAuthAndLoadEmails();\r\n   }\r\n@@ -203,13 +208,44 @@\n     if (tab === 'received' && !email.isRead) {\r\n       \r\n       this.markAsRead(email.id);\r\n     }\r\n-   this.router.navigate(['/emails/:id', email.id], { state: { emailData: email, userEmail: this.currentUserEmail, activeTabContext: tab } });\r\n-    console.log('Navigation vers le détail de l\\'email:', email.id);\r\n+    if (tab === 'draft') {\r\n+      this.selectedEmail = email; // Set the full draft object for the form\r\n+      this.isFormOpen = true;    // Open the email form to edit this draft\r\n+    } \r\n+    else {\r\n+      // For 'received' or 'sent' tabs, navigate to the detail view\r\n+      this.isFormOpen = false;       // Ensure the email form is closed if it was open\r\n+      this.selectedEmail = null;   // Clear any draft that might have been selected for editing\r\n+      \r\n+      // Navigate to EmailDetailComponent\r\n+      this.router.navigate(['/emails', email.id], { // Ensure '/emails/:id' is your route for email detail\r\n+        state: {\r\n+          emailData: email,\r\n+          userEmail: this.currentUserEmail, // Make sure currentUserEmail is populated\r\n+          activeTabContext: tab\r\n+        }\r\n+      });\r\n+    }\r\n+  }\r\n+ openEmailForm(): void {\r\n+    this.selectedEmail = null; // Préparer les données pour le formulaire\r\n+    this.isFormOpen = true;\r\n+  }\r\n \r\n+  closeEmailForm(): void {\r\n+    this.isFormOpen = false;\r\n+    this.selectedEmail = null;\r\n   }\r\n+  onEmailSent(email: any): void {\r\n+    console.log(\"Email sent:\", email);\r\n+    // Mettre à jour la liste des emails envoyés si nécessaire\r\n+    this.loadSentEmails();\r\n+    this.closeEmailForm();\r\n+  }\r\n \r\n+\r\n   private markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return;\r\n \r\n"
                },
                {
                    "date": 1749637798139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,12 +208,9 @@\n     if (tab === 'received' && !email.isRead) {\r\n       \r\n       this.markAsRead(email.id);\r\n     }\r\n-    if (tab === 'draft') {\r\n-      this.selectedEmail = email; // Set the full draft object for the form\r\n-      this.isFormOpen = true;    // Open the email form to edit this draft\r\n-    } \r\n+    \r\n     else {\r\n       // For 'received' or 'sent' tabs, navigate to the detail view\r\n       this.isFormOpen = false;       // Ensure the email form is closed if it was open\r\n       this.selectedEmail = null;   // Clear any draft that might have been selected for editing\r\n"
                },
                {
                    "date": 1749637807019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n     \r\n     else {\r\n       // For 'received' or 'sent' tabs, navigate to the detail view\r\n       this.isFormOpen = false;       // Ensure the email form is closed if it was open\r\n-      this.selectedEmail = null;   // Clear any draft that might have been selected for editing\r\n+      this.selectedEmail = null;   \r\n       \r\n       // Navigate to EmailDetailComponent\r\n       this.router.navigate(['/emails', email.id], { // Ensure '/emails/:id' is your route for email detail\r\n         state: {\r\n"
                },
                {
                    "date": 1749637813989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,11 +282,9 @@\n         if (tab === 'received') {\r\n           this.receivedEmails = this.receivedEmails.filter(e => e.id !== emailId);\r\n         } else if (tab === 'sent') {\r\n           this.sentEmails = this.sentEmails.filter(e => e.id !== emailId);\r\n-        } else if (tab === 'draft') {\r\n-          this.draftEmails = this.draftEmails.filter(e => e.id !== emailId);\r\n-        }\r\n+        } \r\n       },\r\n      error: (err) => {\r\n         console.error('Erreur suppression:', err);\r\n         this.error = `Erreur lors de la suppression: ${err.message || 'Veuillez réessayer.'}`;\r\n"
                },
                {
                    "date": 1749637819828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { GmailService } from '../services/gmailService';\r\n import { MatDialog } from '@angular/material/dialog';\r\n import { EmailDetailComponent } from '../email-detail/email-detail.component';\r\n import { EmailFormComponent } from '../email-form/email-form.component';\r\n-type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n+type ActiveEmailTab = 'received' | 'sent' ;\r\n @Component({\r\n   selector: 'app-emails',\r\n   templateUrl: './emails.component.html',\r\n   styleUrl: './emails.component.scss'\r\n"
                },
                {
                    "date": 1749637827097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n })\r\n export class EmailsComponent implements OnInit,OnDestroy    {\r\n  receivedEmails: any[] = [];\r\n   sentEmails: any[] = [];\r\n-  draftEmails: any[] = [];\r\n   activeTab: ActiveEmailTab = 'received';\r\n   isLoading = false;\r\n   error: string | null = null;\r\n   currentUserEmail: string = '';\r\n"
                },
                {
                    "date": 1749637832983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,8 @@\n \r\n     forkJoin([\r\n       this.loadReceivedEmails(),\r\n       this.loadSentEmails(),\r\n-      this.loadDrafts()\r\n     ]).pipe(\r\n       takeUntil(this.destroy$),\r\n       finalize(() => this.isLoading = false)\r\n     ).subscribe({\r\n"
                },
                {
                    "date": 1749637839061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,32 +146,9 @@\n       })\r\n     );\r\n   }\r\n \r\n-  private loadDrafts(): Observable<void> {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    if (!token) return of(void 0);\r\n \r\n-    return this.gmailService.getDrafts(token, this.currentUserEmail).pipe(\r\n-      takeUntil(this.destroy$),\r\n-      tap(response => {\r\n-       \r\n-        console.log(\"la reponse\",response)\r\n-        if (response && response.success && Array.isArray(response.data)) {\r\n-          this.draftEmails = response.data;\r\n-          console.log('Brouillons chargés:', this.draftEmails.length, this.draftEmails);\r\n-        } else {\r\n-          console.warn('Structure de réponse inattendue:', response);\r\n-          this.draftEmails = [];\r\n-        }\r\n-      }),\r\n-      map(() => void 0),\r\n-      catchError(err => {\r\n-        console.error('Erreur chargement brouillons:', err);\r\n-        return of(void 0);\r\n-      })\r\n-    );\r\n-  }\r\n \r\n   \r\n extractEmailAddress(fullString: string): string {\r\n   if (!fullString) return '';\r\n"
                },
                {
                    "date": 1749638053173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,12 +210,33 @@\n     this.selectedEmail = null;\r\n   }\r\n   onEmailSent(email: any): void {\r\n     console.log(\"Email sent:\", email);\r\n-    // Mettre à jour la liste des emails envoyés si nécessaire\r\n-    this.loadSentEmails();\r\n-    this.closeEmailForm();\r\n+    if (event?.shouldReload) {\r\n+    // Recharger à la fois les emails reçus et envoyés\r\n+    this.isLoading = true;\r\n+    \r\n+    forkJoin([\r\n+      this.loadReceivedEmails(),\r\n+      this.loadSentEmails()\r\n+    ]).pipe(\r\n+      takeUntil(this.destroy$),\r\n+      finalize(() => this.isLoading = false)\r\n+    ).subscribe({\r\n+      next: () => {\r\n+        console.log(\"Emails rechargés avec succès après envoi\");\r\n+        // Vous pourriez aussi basculer vers l'onglet \"Envoyés\"\r\n+        this.activeTab = 'sent';\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Erreur lors du rechargement des emails:', err);\r\n+        this.error = err.message || 'Erreur lors du rechargement des emails';\r\n+      }\r\n+    });\r\n   }\r\n+  \r\n+  this.closeEmailForm();\r\n+  }\r\n \r\n \r\n   private markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n"
                },
                {
                    "date": 1749638208477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,10 +210,8 @@\n     this.selectedEmail = null;\r\n   }\r\n   onEmailSent(email: any): void {\r\n     console.log(\"Email sent:\", email);\r\n-    if (event?.shouldReload) {\r\n-    // Recharger à la fois les emails reçus et envoyés\r\n     this.isLoading = true;\r\n     \r\n     forkJoin([\r\n       this.loadReceivedEmails(),\r\n@@ -223,19 +221,18 @@\n       finalize(() => this.isLoading = false)\r\n     ).subscribe({\r\n       next: () => {\r\n         console.log(\"Emails rechargés avec succès après envoi\");\r\n-        // Vous pourriez aussi basculer vers l'onglet \"Envoyés\"\r\n+        // Basculer vers l'onglet \"Envoyés\"\r\n         this.activeTab = 'sent';\r\n       },\r\n       error: (err) => {\r\n         console.error('Erreur lors du rechargement des emails:', err);\r\n         this.error = err.message || 'Erreur lors du rechargement des emails';\r\n       }\r\n     });\r\n-  }\r\n   \r\n-  this.closeEmailForm();\r\n+    this.closeEmailForm();\r\n   }\r\n \r\n \r\n   private markAsRead(emailId: string): void {\r\n"
                },
                {
                    "date": 1749638429400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n     this.closeEmailForm();\r\n   }\r\n \r\n \r\n-  private markAsRead(emailId: string): void {\r\n+   markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return;\r\n \r\n    this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n"
                },
                {
                    "date": 1749638668133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,29 +178,19 @@\n     this.activeTab = tab;\r\n   }\r\n \r\n   selectEmail(email: any, tab: ActiveEmailTab): void {\r\n-     this.selectedEmailId = email.id;\r\n-    if (tab === 'received' && !email.isRead) {\r\n-      \r\n-      this.markAsRead(email.id);\r\n-    }\r\n-    \r\n-    else {\r\n-      // For 'received' or 'sent' tabs, navigate to the detail view\r\n-      this.isFormOpen = false;       // Ensure the email form is closed if it was open\r\n-      this.selectedEmail = null;   \r\n-      \r\n-      // Navigate to EmailDetailComponent\r\n-      this.router.navigate(['/emails', email.id], { // Ensure '/emails/:id' is your route for email detail\r\n-        state: {\r\n-          emailData: email,\r\n-          userEmail: this.currentUserEmail, // Make sure currentUserEmail is populated\r\n-          activeTabContext: tab\r\n-        }\r\n-      });\r\n-    }\r\n+  this.selectedEmailId = email.id;\r\n+  \r\n+  if (tab === 'received' && !email.isRead) {\r\n+    this.markAsRead(email.id, () => {\r\n+      // Callback après que l'email est marqué comme lu\r\n+      this.navigateToEmailDetail(email, tab);\r\n+    });\r\n+  } else {\r\n+    this.navigateToEmailDetail(email, tab);\r\n   }\r\n+}\r\n  openEmailForm(): void {\r\n     this.selectedEmail = null; // Préparer les données pour le formulaire\r\n     this.isFormOpen = true;\r\n   }\r\n@@ -234,9 +224,9 @@\n     this.closeEmailForm();\r\n   }\r\n \r\n \r\n-   markAsRead(emailId: string): void {\r\n+  markAsRead(emailId: string): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) return;\r\n \r\n    this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n"
                },
                {
                    "date": 1749638680349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,8 +189,20 @@\n   } else {\r\n     this.navigateToEmailDetail(email, tab);\r\n   }\r\n }\r\n+private navigateToEmailDetail(email: any, tab: ActiveEmailTab): void {\r\n+  this.isFormOpen = false;\r\n+  this.selectedEmail = null;\r\n+  \r\n+  this.router.navigate(['/emails', email.id], {\r\n+    state: {\r\n+      emailData: email,\r\n+      userEmail: this.currentUserEmail,\r\n+      activeTabContext: tab\r\n+    }\r\n+  });\r\n+}\r\n  openEmailForm(): void {\r\n     this.selectedEmail = null; // Préparer les données pour le formulaire\r\n     this.isFormOpen = true;\r\n   }\r\n"
                },
                {
                    "date": 1749638685705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,11 +181,9 @@\n   selectEmail(email: any, tab: ActiveEmailTab): void {\r\n   this.selectedEmailId = email.id;\r\n   \r\n   if (tab === 'received' && !email.isRead) {\r\n-    this.markAsRead(email.id, () => {\r\n-      // Callback après que l'email est marqué comme lu\r\n-      this.navigateToEmailDetail(email, tab);\r\n+    this.markAsRead(email.id, () => {      this.navigateToEmailDetail(email, tab);\r\n     });\r\n   } else {\r\n     this.navigateToEmailDetail(email, tab);\r\n   }\r\n"
                },
                {
                    "date": 1749638713134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,10 @@\n   selectEmail(email: any, tab: ActiveEmailTab): void {\r\n   this.selectedEmailId = email.id;\r\n   \r\n   if (tab === 'received' && !email.isRead) {\r\n-    this.markAsRead(email.id, () => {      this.navigateToEmailDetail(email, tab);\r\n+    this.markAsRead(email.id, () => {\r\n+      this.navigateToEmailDetail(email, tab);\r\n     });\r\n   } else {\r\n     this.navigateToEmailDetail(email, tab);\r\n   }\r\n@@ -234,25 +235,27 @@\n     this.closeEmailForm();\r\n   }\r\n \r\n \r\n-  markAsRead(emailId: string): void {\r\n-    const token = this.googleAuthService.getAccessToken();\r\n-    if (!token) return;\r\n+ private markAsRead(emailId: string, callback?: () => void): void {\r\n+  const token = this.googleAuthService.getAccessToken();\r\n+  if (!token) return;\r\n \r\n-   this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n+  this.gmailService.markAsRead(token, emailId, this.currentUserEmail)\r\n     .pipe(takeUntil(this.destroy$))\r\n     .subscribe({\r\n-\r\n       next: () => {\r\n         const email = this.receivedEmails.find(e => e.id === emailId);\r\n         if (email) {\r\n           email.isRead = true;\r\n         }\r\n+        if (callback) {\r\n+          callback();\r\n+        }\r\n       },\r\n       error: (err) => console.error('Erreur marquage comme lu:', err)\r\n     });\r\n-  }\r\n+}\r\n \r\n   onDeleteEmail(emailId: string, tab: ActiveEmailTab): void {\r\n     const token = this.googleAuthService.getAccessToken();\r\n     if (!token) {\r\n"
                }
            ],
            "date": 1748563144880,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\ninterface Email {\r\n  id: number;\r\n  from?: string;\r\n  to?: string;\r\n  subject: string;\r\n  bodySnippet: string;\r\n  date: Date;\r\n  read?: boolean; // Pour les emails reçus\r\n}\r\n\r\n@Component({\r\n  selector: 'app-emails',\r\n  templateUrl: './emails.component.html',\r\n  styleUrl: './emails.component.scss'\r\n})\r\nexport class EmailsComponent {\r\n\r\n}\r\n"
        }
    ]
}