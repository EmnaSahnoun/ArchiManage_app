{
    "sourceFile": "src/app/core/interceptors/auth.interceptor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1745058518520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745058528563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import { HttpInterceptorFn } from '@angular/common/http';\r\n+import { Injectable } from '@angular/core';\r\n \r\n export const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n   return next(req);\r\n };\r\n \r\n \r\n \r\n @Injectable()\r\n-export class AuthInterceptor implements HttpInterceptor {\r\n+export class authInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n     console.log('Interceptor - URL:', req.url);\r\n"
                },
                {
                    "date": 1745058535011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { HttpInterceptorFn } from '@angular/common/http';\r\n+import { HttpInterceptor, HttpInterceptorFn } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n \r\n export const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n   return next(req);\r\n@@ -7,9 +7,9 @@\n \r\n \r\n \r\n @Injectable()\r\n-export class authInterceptor implements HttpInterceptor {\r\n+export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n     console.log('Interceptor - URL:', req.url);\r\n"
                },
                {
                    "date": 1745058540423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { HttpInterceptor, HttpInterceptorFn } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n+import { OAuthService } from 'angular-oauth2-oidc';\r\n \r\n export const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n   return next(req);\r\n };\r\n"
                },
                {
                    "date": 1745058546377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { HttpInterceptor, HttpInterceptorFn } from '@angular/common/http';\r\n+import { HttpHandler, HttpInterceptor, HttpInterceptorFn, HttpRequest } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n \r\n export const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n@@ -11,9 +11,9 @@\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n-  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+  intercept(req: HttpRequest<any>, next: HttpHandlerr): Observable<HttpEvent<any>> {\r\n     console.log('Interceptor - URL:', req.url);\r\n     console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n     \r\n     return next.handle(req);\r\n"
                },
                {
                    "date": 1745058551936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { HttpHandler, HttpInterceptor, HttpInterceptorFn, HttpRequest } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n+import { Observable } from 'rxjs';\r\n \r\n export const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n   return next(req);\r\n };\r\n@@ -11,9 +12,9 @@\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n-  intercept(req: HttpRequest<any>, next: HttpHandlerr): Observable<HttpEvent<any>> {\r\n+  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n     console.log('Interceptor - URL:', req.url);\r\n     console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n     \r\n     return next.handle(req);\r\n"
                },
                {
                    "date": 1745058560315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,10 @@\n-import { HttpHandler, HttpInterceptor, HttpInterceptorFn, HttpRequest } from '@angular/common/http';\r\n+import { HttpEvent, HttpHandler, HttpInterceptor, HttpInterceptorFn, HttpRequest } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n import { Observable } from 'rxjs';\r\n \r\n-export const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n-  return next(req);\r\n-};\r\n \r\n-\r\n-\r\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n"
                },
                {
                    "date": 1745058568883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n-import { HttpEvent, HttpHandler, HttpInterceptor, HttpInterceptorFn, HttpRequest } from '@angular/common/http';\r\n+import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n import { Observable } from 'rxjs';\r\n \r\n-\r\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n"
                },
                {
                    "date": 1745151280028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,23 @@\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    console.log('Interceptor - URL:', req.url);\r\n-    console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n+    // Ne pas intercepter les requêtes vers Keycloak\r\n+    if (req.url.includes('/realms/')) {\r\n+      return next.handle(req);\r\n+    }\r\n+\r\n+    const token = this.oauthService.getAccessToken();\r\n     \r\n+    if (token) {\r\n+      const authReq = req.clone({\r\n+        setHeaders: {\r\n+          Authorization: `Bearer ${token}`\r\n+        }\r\n+      });\r\n+      return next.handle(authReq);\r\n+    }\r\n+\r\n     return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745153134089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,22 @@\n     if (req.url.includes('/realms/')) {\r\n       return next.handle(req);\r\n     }\r\n \r\n+    // Récupérer le token directement du service OAuth\r\n     const token = this.oauthService.getAccessToken();\r\n     \r\n     if (token) {\r\n       const authReq = req.clone({\r\n         setHeaders: {\r\n-          Authorization: `Bearer ${token}`\r\n+          Authorization: `Bearer ${token}`,\r\n+          Accept: 'application/json'\r\n         }\r\n       });\r\n+      console.log('Requête interceptée avec token:', authReq);\r\n       return next.handle(authReq);\r\n     }\r\n \r\n+    console.warn('Aucun token disponible pour la requête:', req.url);\r\n     return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745153964582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,26 +7,19 @@\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    // Ne pas intercepter les requêtes vers Keycloak\r\n-    if (req.url.includes('/realms/')) {\r\n-      return next.handle(req);\r\n-    }\r\n-\r\n-    // Récupérer le token directement du service OAuth\r\n-    const token = this.oauthService.getAccessToken();\r\n-    \r\n-    if (token) {\r\n+    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+      // Clonez la requête pour ajouter les headers\r\n       const authReq = req.clone({\r\n         setHeaders: {\r\n-          Authorization: `Bearer ${token}`,\r\n-          Accept: 'application/json'\r\n+          Authorization: `Bearer ${this.oauthService.getAccessToken()}`,\r\n+          'X-Requested-With': 'XMLHttpRequest' // Important pour certaines configs Spring\r\n         }\r\n       });\r\n-      console.log('Requête interceptée avec token:', authReq);\r\n+  \r\n+      console.log('Requête interceptée:', authReq);\r\n       return next.handle(authReq);\r\n-    }\r\n \r\n     console.warn('Aucun token disponible pour la requête:', req.url);\r\n     return next.handle(req);\r\n   }\r\n"
                },
                {
                    "date": 1745153973624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,9 @@\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n-  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n       // Clonez la requête pour ajouter les headers\r\n       const authReq = req.clone({\r\n         setHeaders: {\r\n           Authorization: `Bearer ${this.oauthService.getAccessToken()}`,\r\n"
                },
                {
                    "date": 1745153990826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,7 @@\n       });\r\n   \r\n       console.log('Requête interceptée:', authReq);\r\n       return next.handle(authReq);\r\n-\r\n-    console.warn('Aucun token disponible pour la requête:', req.url);\r\n     return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745153998311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,7 +17,7 @@\n       });\r\n   \r\n       console.log('Requête interceptée:', authReq);\r\n       return next.handle(authReq);\r\n-    return next.handle(req);\r\n+    \r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745155440419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,28 @@\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n-   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-      // Clonez la requête pour ajouter les headers\r\n+  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+    // Ne pas intercepter les requêtes vers Keycloak\r\n+    if (req.url.includes('/realms/')) {\r\n+      return next.handle(req);\r\n+    }\r\n+\r\n+    // Récupérer le token directement du service OAuth\r\n+    const token = this.oauthService.getAccessToken();\r\n+    \r\n+    if (token) {\r\n       const authReq = req.clone({\r\n         setHeaders: {\r\n-          Authorization: `Bearer ${this.oauthService.getAccessToken()}`,\r\n-          'X-Requested-With': 'XMLHttpRequest' // Important pour certaines configs Spring\r\n+          Authorization: `Bearer ${token}`,\r\n+          Accept: 'application/json'\r\n         }\r\n       });\r\n-  \r\n-      console.log('Requête interceptée:', authReq);\r\n+      console.log('Requête interceptée avec token:', authReq);\r\n       return next.handle(authReq);\r\n-    \r\n+    }\r\n+\r\n+    console.warn('Aucun token disponible pour la requête:', req.url);\r\n+    return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745155448491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,27 +7,10 @@\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    // Ne pas intercepter les requêtes vers Keycloak\r\n-    if (req.url.includes('/realms/')) {\r\n-      return next.handle(req);\r\n-    }\r\n-\r\n-    // Récupérer le token directement du service OAuth\r\n-    const token = this.oauthService.getAccessToken();\r\n+    console.log('Interceptor - URL:', req.url);\r\n+    console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n     \r\n-    if (token) {\r\n-      const authReq = req.clone({\r\n-        setHeaders: {\r\n-          Authorization: `Bearer ${token}`,\r\n-          Accept: 'application/json'\r\n-        }\r\n-      });\r\n-      console.log('Requête interceptée avec token:', authReq);\r\n-      return next.handle(authReq);\r\n-    }\r\n-\r\n-    console.warn('Aucun token disponible pour la requête:', req.url);\r\n     return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745155659346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,18 @@\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n-  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    console.log('Interceptor - URL:', req.url);\r\n-    console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n+   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+      // Clonez la requête pour ajouter les headers\r\n+      const authReq = req.clone({\r\n+        setHeaders: {\r\n+          Authorization: `Bearer ${this.oauthService.getAccessToken()}`,\r\n+          'X-Requested-With': 'XMLHttpRequest' // Important pour certaines configs Spring\r\n+        }\r\n+      });\r\n+  \r\n+      console.log('Requête interceptée:', authReq);\r\n+      return next.handle(authReq);\r\n     \r\n-    return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745155706027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,11 @@\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n-   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-      // Clonez la requête pour ajouter les headers\r\n-      const authReq = req.clone({\r\n-        setHeaders: {\r\n-          Authorization: `Bearer ${this.oauthService.getAccessToken()}`,\r\n-          'X-Requested-With': 'XMLHttpRequest' // Important pour certaines configs Spring\r\n-        }\r\n-      });\r\n-  \r\n-      console.log('Requête interceptée:', authReq);\r\n-      return next.handle(authReq);\r\n+  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+    console.log('Interceptor - URL:', req.url);\r\n+    console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n     \r\n+    return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746118077406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    console.log('Interceptor - URL:', req.url);\r\n+    //console.log('Interceptor - URL:', req.url);\r\n     console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n     \r\n     return next.handle(req);\r\n   }\r\n"
                },
                {
                    "date": 1748641178137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,38 @@\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    //console.log('Interceptor - URL:', req.url);\r\n-    console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n-    \r\n-    return next.handle(req);\r\n+    // Pour les API Google\r\n+    if (req.url.includes('googleapis.com')) {\r\n+      const googleToken = this.authService.getGoogleAccessToken();\r\n+      if (googleToken) {\r\n+        req = req.clone({\r\n+          setHeaders: { Authorization: `Bearer ${googleToken}` }\r\n+        });\r\n+      }\r\n+    } \r\n+    // Pour les autres API (Keycloak)\r\n+    else {\r\n+      const keycloakToken = this.authService.getAccessToken();\r\n+      if (keycloakToken) {\r\n+        req = req.clone({\r\n+          setHeaders: { Authorization: `Bearer ${keycloakToken}` }\r\n+        });\r\n+      }\r\n+    }\r\n+\r\n+    return next.handle(req).pipe(\r\n+      catchError(err => {\r\n+        if (err.status === 401) {\r\n+          // Gérer les erreurs d'authentification\r\n+          if (req.url.includes('googleapis.com')) {\r\n+            this.authService.initGoogleAuth(this.router.url);\r\n+          } else {\r\n+            this.authService.login();\r\n+          }\r\n+        }\r\n+        return throwError(err);\r\n+      })\r\n+    );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748641188120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Observable } from 'rxjs';\r\n \r\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n-  constructor(private oauthService: OAuthService) {}\r\n+  constructor(private authService: AuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n     // Pour les API Google\r\n     if (req.url.includes('googleapis.com')) {\r\n"
                },
                {
                    "date": 1748641196069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n-import { Observable } from 'rxjs';\r\n+import { catchError, Observable } from 'rxjs';\r\n+import { AuthService } from '../../services/auth.service';\r\n \r\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n   constructor(private authService: AuthService) {}\r\n"
                },
                {
                    "date": 1748641203164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n-import { catchError, Observable } from 'rxjs';\r\n+import { catchError, Observable, throwError } from 'rxjs';\r\n import { AuthService } from '../../services/auth.service';\r\n \r\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n"
                },
                {
                    "date": 1748641210044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { AuthService } from '../../services/auth.service';\r\n \r\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n-  constructor(private authService: AuthService) {}\r\n+  constructor(private authService: AuthService, private router: Router) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n     // Pour les API Google\r\n     if (req.url.includes('googleapis.com')) {\r\n"
                },
                {
                    "date": 1748641306915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,16 @@\n import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n-import { catchError, Observable, throwError } from 'rxjs';\r\n-import { AuthService } from '../../services/auth.service';\r\n+import { Observable } from 'rxjs';\r\n \r\n @Injectable()\r\n export class AuthInterceptor implements HttpInterceptor {\r\n-  constructor(private authService: AuthService, private router: Router) {}\r\n+  constructor(private oauthService: OAuthService) {}\r\n \r\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    // Pour les API Google\r\n-    if (req.url.includes('googleapis.com')) {\r\n-      const googleToken = this.authService.getGoogleAccessToken();\r\n-      if (googleToken) {\r\n-        req = req.clone({\r\n-          setHeaders: { Authorization: `Bearer ${googleToken}` }\r\n-        });\r\n-      }\r\n-    } \r\n-    // Pour les autres API (Keycloak)\r\n-    else {\r\n-      const keycloakToken = this.authService.getAccessToken();\r\n-      if (keycloakToken) {\r\n-        req = req.clone({\r\n-          setHeaders: { Authorization: `Bearer ${keycloakToken}` }\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    return next.handle(req).pipe(\r\n-      catchError(err => {\r\n-        if (err.status === 401) {\r\n-          // Gérer les erreurs d'authentification\r\n-          if (req.url.includes('googleapis.com')) {\r\n-            this.authService.initGoogleAuth(this.router.url);\r\n-          } else {\r\n-            this.authService.login();\r\n-          }\r\n-        }\r\n-        return throwError(err);\r\n-      })\r\n-    );\r\n+    //console.log('Interceptor - URL:', req.url);\r\n+   // console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n+    \r\n+    return next.handle(req);\r\n   }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1745058518520,
            "name": "Commit-0",
            "content": "import { HttpInterceptorFn } from '@angular/common/http';\r\n\r\nexport const authInterceptor: HttpInterceptorFn = (req, next) => {\r\n  return next(req);\r\n};\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private oauthService: OAuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    console.log('Interceptor - URL:', req.url);\r\n    console.log('Interceptor - Token valide:', this.oauthService.hasValidAccessToken());\r\n    \r\n    return next.handle(req);\r\n  }\r\n}"
        }
    ]
}