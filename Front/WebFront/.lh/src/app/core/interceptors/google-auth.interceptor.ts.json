{
    "sourceFile": "src/app/core/interceptors/google-auth.interceptor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1748598593416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748598599552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   HttpEvent,\r\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n-import { AuthService } from '../services/auth.service';\r\n+import { AuthService } \r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n   constructor(private authService: AuthService) {}\r\n"
                },
                {
                    "date": 1748599164118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,13 @@\n   HttpEvent,\r\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n-import { AuthService } \r\n+import { AuthService } from '../../services/auth.service'; \r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(private authService: AuthService) {}\r\n+  constructor(private googleA: AuthService) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n     // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n     if (!request.url.includes('e8.systeo.tn/emails') && \r\n"
                },
                {
                    "date": 1748599171154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,13 @@\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n import { AuthService } from '../../services/auth.service'; \r\n+import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(private googleA: AuthService) {}\r\n+  constructor(private googleAuthService: GoogleAuthService) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n     // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n     if (!request.url.includes('e8.systeo.tn/emails') && \r\n"
                },
                {
                    "date": 1748599176671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n   HttpEvent,\r\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n-import { AuthService } from '../../services/auth.service'; \r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n@@ -19,9 +18,9 @@\n         !request.url.includes('e8.systeo.tn/drafts')) {\r\n       return next.handle(request);\r\n     }\r\n \r\n-    const googleToken = this.authService.getGoogleAccessToken();\r\n+    const googleToken = this.googleAuthService.getGoogleAccessToken();\r\n     if (googleToken) {\r\n       const authReq = request.clone({\r\n         setHeaders: {\r\n           Authorization: `Bearer ${googleToken}`\r\n"
                },
                {
                    "date": 1748605284968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   constructor(private googleAuthService: GoogleAuthService) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n     // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n-    if (!request.url.includes('e8.systeo.tn/emails') && \r\n+    if (!request.url.includes('//emails') && \r\n         !request.url.includes('e8.systeo.tn/drafts')) {\r\n       return next.handle(request);\r\n     }\r\n \r\n"
                },
                {
                    "date": 1748605292517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n   constructor(private googleAuthService: GoogleAuthService) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n     // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n-    if (!request.url.includes('//emails') && \r\n-        !request.url.includes('e8.systeo.tn/drafts')) {\r\n+    if (!request.url.includes('/email/emails') && \r\n+        !request.url.includes('/email/drafts')) {\r\n       return next.handle(request);\r\n     }\r\n \r\n     const googleToken = this.googleAuthService.getGoogleAccessToken();\r\n"
                },
                {
                    "date": 1748606619755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n \r\n-@Injectable()\r\n+@Injectable({ providedIn: 'root' })\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n   constructor(private googleAuthService: GoogleAuthService) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n"
                },
                {
                    "date": 1748606630575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n \r\n @Injectable({ providedIn: 'root' })\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(private googleAuthService: GoogleAuthService) {}\r\n+  constructor(private googleAuthService: GoogleAuthService, \r\n+    private router: Router) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n     // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n     if (!request.url.includes('/email/emails') && \r\n"
                },
                {
                    "date": 1748606652312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,30 +6,27 @@\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n+import { Router } from '@angular/router';\r\n \r\n @Injectable({ providedIn: 'root' })\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(private googleAuthService: GoogleAuthService, \r\n+  constructor(\r\n+    private googleAuthService: GoogleAuthService, \r\n     private router: Router) {}\r\n \r\n-  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n-    // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n-    if (!request.url.includes('/email/emails') && \r\n-        !request.url.includes('/email/drafts')) {\r\n-      return next.handle(request);\r\n+canActivate(\r\n+    route: ActivatedRouteSnapshot,\r\n+    state: RouterStateSnapshot\r\n+  ): boolean | Observable<boolean> | Promise<boolean> {\r\n+    const token = this.googleAuthService.getGoogleAccessToken();\r\n+    \r\n+    if (token) {\r\n+      return true;\r\n+    } else {\r\n+      // Sauvegarder l'URL actuelle avant redirection\r\n+      this.googleAuthService.initGoogleAuth(state.url);\r\n+      return false;\r\n     }\r\n-\r\n-    const googleToken = this.googleAuthService.getGoogleAccessToken();\r\n-    if (googleToken) {\r\n-      const authReq = request.clone({\r\n-        setHeaders: {\r\n-          Authorization: `Bearer ${googleToken}`\r\n-        }\r\n-      });\r\n-      return next.handle(authReq);\r\n-    }\r\n-\r\n-    return next.handle(request);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748606673352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,27 +6,29 @@\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n-import { Router } from '@angular/router';\r\n \r\n @Injectable({ providedIn: 'root' })\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(\r\n-    private googleAuthService: GoogleAuthService, \r\n-    private router: Router) {}\r\n+  constructor(private googleAuthService: GoogleAuthService) {}\r\n \r\n-canActivate(\r\n-    route: ActivatedRouteSnapshot,\r\n-    state: RouterStateSnapshot\r\n-  ): boolean | Observable<boolean> | Promise<boolean> {\r\n-    const token = this.googleAuthService.getGoogleAccessToken();\r\n-    \r\n-    if (token) {\r\n-      return true;\r\n-    } else {\r\n-      // Sauvegarder l'URL actuelle avant redirection\r\n-      this.googleAuthService.initGoogleAuth(state.url);\r\n-      return false;\r\n+  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n+    // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n+    if (!request.url.includes('/email/emails') && \r\n+        !request.url.includes('/email/drafts')) {\r\n+      return next.handle(request);\r\n     }\r\n+\r\n+    const googleToken = this.googleAuthService.getGoogleAccessToken();\r\n+    if (googleToken) {\r\n+      const authReq = request.clone({\r\n+        setHeaders: {\r\n+          Authorization: `Bearer ${googleToken}`\r\n+        }\r\n+      });\r\n+      return next.handle(authReq);\r\n+    }\r\n+\r\n+    return next.handle(request);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748612057728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,28 +7,56 @@\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n \r\n-@Injectable({ providedIn: 'root' })\r\n+@Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(private googleAuthService: GoogleAuthService) {}\r\n+  constructor(\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private router: Router\r\n+  ) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n-    // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n-    if (!request.url.includes('/email/emails') && \r\n-        !request.url.includes('/email/drafts')) {\r\n+    if (!request.url.includes('/email/')) {\r\n       return next.handle(request);\r\n     }\r\n \r\n-    const googleToken = this.googleAuthService.getGoogleAccessToken();\r\n-    if (googleToken) {\r\n-      const authReq = request.clone({\r\n-        setHeaders: {\r\n-          Authorization: `Bearer ${googleToken}`\r\n+    const accessToken = this.googleAuthService.getGoogleAccessToken();\r\n+    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+\r\n+    if (!accessToken || !refreshToken) {\r\n+      this.router.navigate(['/login']);\r\n+      return throwError(() => new Error('Non authentifié'));\r\n+    }\r\n+\r\n+    const authReq = request.clone({\r\n+      setHeaders: { Authorization: `Bearer ${accessToken}` }\r\n+    });\r\n+\r\n+    return next.handle(authReq).pipe(\r\n+      catchError(error => {\r\n+        if (error.status === 401) {\r\n+          return from(this.handle401Error(request, next, refreshToken));\r\n         }\r\n+        return throwError(() => error);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  private async handle401Error(\r\n+    request: HttpRequest<unknown>,\r\n+    next: HttpHandler,\r\n+    refreshToken: string\r\n+  ): Promise<HttpEvent<any>> {\r\n+    try {\r\n+      const newAccessToken = await this.googleAuthService.refreshGoogleToken(refreshToken);\r\n+      const newRequest = request.clone({\r\n+        setHeaders: { Authorization: `Bearer ${newAccessToken}` }\r\n       });\r\n-      return next.handle(authReq);\r\n+      return lastValueFrom(next.handle(newRequest));\r\n+    } catch (refreshError) {\r\n+      this.googleAuthService.clearTokens();\r\n+      this.router.navigate(['/login']);\r\n+      return throwError(() => refreshError) as any;\r\n     }\r\n-\r\n-    return next.handle(request);\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748612068691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n import { Observable } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n+import { Router } from '@angular/router';\r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n   constructor(\r\n"
                },
                {
                    "date": 1748612083661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   HttpHandler,\r\n   HttpEvent,\r\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n-import { Observable } from 'rxjs';\r\n+import { catchError, Observable } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n \r\n @Injectable()\r\n"
                },
                {
                    "date": 1748612093446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   HttpHandler,\r\n   HttpEvent,\r\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n-import { catchError, Observable } from 'rxjs';\r\n+import { catchError, from, lastValueFrom, Observable, throwError } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n \r\n @Injectable()\r\n"
                },
                {
                    "date": 1748628868283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,54 +10,21 @@\n import { Router } from '@angular/router';\r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(\r\n-    private googleAuthService: GoogleAuthService,\r\n-    private router: Router\r\n-  ) {}\r\n+  constructor(private googleAuth: GoogleAuthService) {}\r\n \r\n-  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n-    if (!request.url.includes('/email/')) {\r\n-      return next.handle(request);\r\n+  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+    const token = this.googleAuth.getGoogleAccessToken();\r\n+    if (token) {\r\n+      req = req.clone({ setHeaders: { Authorization: `Bearer ${token}` } });\r\n     }\r\n-\r\n-    const accessToken = this.googleAuthService.getGoogleAccessToken();\r\n-    const refreshToken = this.googleAuthService.getRefreshToken();\r\n-\r\n-    if (!accessToken || !refreshToken) {\r\n-      this.router.navigate(['/login']);\r\n-      return throwError(() => new Error('Non authentifié'));\r\n-    }\r\n-\r\n-    const authReq = request.clone({\r\n-      setHeaders: { Authorization: `Bearer ${accessToken}` }\r\n-    });\r\n-\r\n-    return next.handle(authReq).pipe(\r\n-      catchError(error => {\r\n+    return next.handle(req).pipe(\r\n+      catchError((error) => {\r\n         if (error.status === 401) {\r\n-          return from(this.handle401Error(request, next, refreshToken));\r\n+          this.googleAuth.initGoogleAuth();\r\n         }\r\n-        return throwError(() => error);\r\n+        return throwError(error);\r\n       })\r\n     );\r\n   }\r\n-\r\n-  private async handle401Error(\r\n-    request: HttpRequest<unknown>,\r\n-    next: HttpHandler,\r\n-    refreshToken: string\r\n-  ): Promise<HttpEvent<any>> {\r\n-    try {\r\n-      const newAccessToken = await this.googleAuthService.refreshGoogleToken(refreshToken);\r\n-      const newRequest = request.clone({\r\n-        setHeaders: { Authorization: `Bearer ${newAccessToken}` }\r\n-      });\r\n-      return lastValueFrom(next.handle(newRequest));\r\n-    } catch (refreshError) {\r\n-      this.googleAuthService.clearTokens();\r\n-      this.router.navigate(['/login']);\r\n-      return throwError(() => refreshError) as any;\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748628879519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,21 +10,54 @@\n import { Router } from '@angular/router';\r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(private googleAuth: GoogleAuthService) {}\r\n+  constructor(\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private router: Router\r\n+  ) {}\r\n \r\n-  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    const token = this.googleAuth.getGoogleAccessToken();\r\n-    if (token) {\r\n-      req = req.clone({ setHeaders: { Authorization: `Bearer ${token}` } });\r\n+  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n+    if (!request.url.includes('/email/')) {\r\n+      return next.handle(request);\r\n     }\r\n-    return next.handle(req).pipe(\r\n-      catchError((error) => {\r\n+\r\n+    const accessToken = this.googleAuthService.getGoogleAccessToken();\r\n+    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+\r\n+    if (!accessToken || !refreshToken) {\r\n+      this.router.navigate(['/login']);\r\n+      return throwError(() => new Error('Non authentifié'));\r\n+    }\r\n+\r\n+    const authReq = request.clone({\r\n+      setHeaders: { Authorization: `Bearer ${accessToken}` }\r\n+    });\r\n+\r\n+    return next.handle(authReq).pipe(\r\n+      catchError(error => {\r\n         if (error.status === 401) {\r\n-          this.googleAuth.initGoogleAuth();\r\n+          return from(this.handle401Error(request, next, refreshToken));\r\n         }\r\n-        return throwError(error);\r\n+        return throwError(() => error);\r\n       })\r\n     );\r\n   }\r\n+\r\n+  private async handle401Error(\r\n+    request: HttpRequest<unknown>,\r\n+    next: HttpHandler,\r\n+    refreshToken: string\r\n+  ): Promise<HttpEvent<any>> {\r\n+    try {\r\n+      const newAccessToken = await this.googleAuthService.refreshGoogleToken(refreshToken);\r\n+      const newRequest = request.clone({\r\n+        setHeaders: { Authorization: `Bearer ${newAccessToken}` }\r\n+      });\r\n+      return lastValueFrom(next.handle(newRequest));\r\n+    } catch (refreshError) {\r\n+      this.googleAuthService.clearTokens();\r\n+      this.router.navigate(['/login']);\r\n+      return throwError(() => refreshError) as any;\r\n+    }\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748630737516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     private router: Router\r\n   ) {}\r\n \r\n   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n-    if (!request.url.includes('/email/')) {\r\n+    if (!request.url.includes('/auth/google/callback')) {\r\n       return next.handle(request);\r\n     }\r\n \r\n     const accessToken = this.googleAuthService.getGoogleAccessToken();\r\n"
                },
                {
                    "date": 1748637561855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,53 +11,54 @@\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n   constructor(\r\n-    private googleAuthService: GoogleAuthService,\r\n+    private authService: GoogleAuthService,\r\n     private router: Router\r\n   ) {}\r\n \r\n-  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n-    if (!request.url.includes('/auth/google/callback')) {\r\n+  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+    // Ne pas ajouter le token pour les requêtes d'authentification\r\n+    if (request.url.includes('/auth/google')) {\r\n       return next.handle(request);\r\n     }\r\n \r\n-    const accessToken = this.googleAuthService.getGoogleAccessToken();\r\n-    const refreshToken = this.googleAuthService.getRefreshToken();\r\n-\r\n-    if (!accessToken || !refreshToken) {\r\n-      this.router.navigate(['/login']);\r\n-      return throwError(() => new Error('Non authentifié'));\r\n+    const token = this.authService.getAccessToken();\r\n+    if (token) {\r\n+      request = request.clone({\r\n+        setHeaders: {\r\n+          Authorization: `Bearer ${token}`\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    const authReq = request.clone({\r\n-      setHeaders: { Authorization: `Bearer ${accessToken}` }\r\n-    });\r\n-\r\n-    return next.handle(authReq).pipe(\r\n-      catchError(error => {\r\n-        if (error.status === 401) {\r\n-          return from(this.handle401Error(request, next, refreshToken));\r\n+    return next.handle(request).pipe(\r\n+      catchError((error: HttpErrorResponse) => {\r\n+        if (error.status === 401 && token) {\r\n+          return this.handle401Error(request, next);\r\n         }\r\n-        return throwError(() => error);\r\n+        return throwError(error);\r\n       })\r\n     );\r\n   }\r\n \r\n-  private async handle401Error(\r\n-    request: HttpRequest<unknown>,\r\n-    next: HttpHandler,\r\n-    refreshToken: string\r\n-  ): Promise<HttpEvent<any>> {\r\n-    try {\r\n-      const newAccessToken = await this.googleAuthService.refreshGoogleToken(refreshToken);\r\n-      const newRequest = request.clone({\r\n-        setHeaders: { Authorization: `Bearer ${newAccessToken}` }\r\n-      });\r\n-      return lastValueFrom(next.handle(newRequest));\r\n-    } catch (refreshError) {\r\n-      this.googleAuthService.clearTokens();\r\n-      this.router.navigate(['/login']);\r\n-      return throwError(() => refreshError) as any;\r\n-    }\r\n+  private handle401Error(\r\n+    request: HttpRequest<any>,\r\n+    next: HttpHandler\r\n+  ): Observable<HttpEvent<any>> {\r\n+    return this.authService.refreshToken().pipe(\r\n+      switchMap(newToken => {\r\n+        const newRequest = request.clone({\r\n+          setHeaders: {\r\n+            Authorization: `Bearer ${newToken}`\r\n+          }\r\n+        });\r\n+        return next.handle(newRequest);\r\n+      }),\r\n+      catchError(error => {\r\n+        this.authService.logout();\r\n+        this.router.navigate(['/login']);\r\n+        return throwError(error);\r\n+      })\r\n+    );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748637568423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   HttpHandler,\r\n   HttpEvent,\r\n   HttpInterceptor\r\n } from '@angular/common/http';\r\n-import { catchError, from, lastValueFrom, Observable, throwError } from 'rxjs';\r\n+import { catchError, from, lastValueFrom, Observable, switchMap, throwError } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n \r\n @Injectable()\r\n"
                },
                {
                    "date": 1748637582913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n import {\r\n   HttpRequest,\r\n   HttpHandler,\r\n   HttpEvent,\r\n-  HttpInterceptor\r\n+  HttpInterceptor,\r\n+  HttpErrorResponse\r\n } from '@angular/common/http';\r\n import { catchError, from, lastValueFrom, Observable, switchMap, throwError } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n@@ -44,9 +45,19 @@\n   private handle401Error(\r\n     request: HttpRequest<any>,\r\n     next: HttpHandler\r\n   ): Observable<HttpEvent<any>> {\r\n-    return this.authService.refreshToken().pipe(\r\n+    return this.authService.refreshToken().import { Pipe, PipeTransform } from '@angular/core';\r\n+    \r\n+    @Pipe({\r\n+      name: 'selector-name'\r\n+    })\r\n+    \r\n+    export class NamePipe implements PipeTransform {\r\n+      transform(value: any, ...args: any[]): any {\r\n+        \r\n+      }\r\n+    }(\r\n       switchMap(newToken => {\r\n         const newRequest = request.clone({\r\n           setHeaders: {\r\n             Authorization: `Bearer ${newToken}`\r\n"
                },
                {
                    "date": 1748637590944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n   HttpRequest,\r\n   HttpHandler,\r\n   HttpEvent,\r\n   HttpInterceptor,\r\n-  HttpErrorResponse\r\n+  HttpErrorResponse,\r\n+  pipe\r\n } from '@angular/common/http';\r\n import { catchError, from, lastValueFrom, Observable, switchMap, throwError } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n@@ -45,19 +46,9 @@\n   private handle401Error(\r\n     request: HttpRequest<any>,\r\n     next: HttpHandler\r\n   ): Observable<HttpEvent<any>> {\r\n-    return this.authService.refreshToken().import { Pipe, PipeTransform } from '@angular/core';\r\n-    \r\n-    @Pipe({\r\n-      name: 'selector-name'\r\n-    })\r\n-    \r\n-    export class NamePipe implements PipeTransform {\r\n-      transform(value: any, ...args: any[]): any {\r\n-        \r\n-      }\r\n-    }(\r\n+    return this.authService.refreshToken().pipe(\r\n       switchMap(newToken => {\r\n         const newRequest = request.clone({\r\n           setHeaders: {\r\n             Authorization: `Bearer ${newToken}`\r\n"
                },
                {
                    "date": 1748638124277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,9 @@\n   HttpRequest,\r\n   HttpHandler,\r\n   HttpEvent,\r\n   HttpInterceptor,\r\n-  HttpErrorResponse,\r\n-  pipe\r\n+  HttpErrorResponse\r\n } from '@angular/common/http';\r\n import { catchError, from, lastValueFrom, Observable, switchMap, throwError } from 'rxjs';\r\n import { GoogleAuthService } from '../../services/googleAuthSerivce';\r\n import { Router } from '@angular/router';\r\n@@ -46,9 +45,9 @@\n   private handle401Error(\r\n     request: HttpRequest<any>,\r\n     next: HttpHandler\r\n   ): Observable<HttpEvent<any>> {\r\n-    return this.authService.refreshToken().pipe(\r\n+    return from(this.authService.refreshToken()).pipe(\r\n       switchMap(newToken => {\r\n         const newRequest = request.clone({\r\n           setHeaders: {\r\n             Authorization: `Bearer ${newToken}`\r\n"
                },
                {
                    "date": 1748642234519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,55 +11,17 @@\n import { Router } from '@angular/router';\r\n \r\n @Injectable()\r\n export class GoogleAuthInterceptor implements HttpInterceptor {\r\n-  constructor(\r\n-    private authService: GoogleAuthService,\r\n-    private router: Router\r\n-  ) {}\r\n-\r\n-  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n-    // Ne pas ajouter le token pour les requêtes d'authentification\r\n-    if (request.url.includes('/auth/google')) {\r\n-      return next.handle(request);\r\n+  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n+    // Seulement pour les API Google\r\n+    if (req.url.includes('googleapis.com')) {\r\n+      const token = localStorage.getItem('google_token');\r\n+      if (token) {\r\n+        req = req.clone({\r\n+          setHeaders: { Authorization: `Bearer ${token}` }\r\n+        });\r\n+      }\r\n     }\r\n-\r\n-    const token = this.authService.getAccessToken();\r\n-    if (token) {\r\n-      request = request.clone({\r\n-        setHeaders: {\r\n-          Authorization: `Bearer ${token}`\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    return next.handle(request).pipe(\r\n-      catchError((error: HttpErrorResponse) => {\r\n-        if (error.status === 401 && token) {\r\n-          return this.handle401Error(request, next);\r\n-        }\r\n-        return throwError(error);\r\n-      })\r\n-    );\r\n+    return next.handle(req);\r\n   }\r\n-\r\n-  private handle401Error(\r\n-    request: HttpRequest<any>,\r\n-    next: HttpHandler\r\n-  ): Observable<HttpEvent<any>> {\r\n-    return from(this.authService.refreshToken()).pipe(\r\n-      switchMap(newToken => {\r\n-        const newRequest = request.clone({\r\n-          setHeaders: {\r\n-            Authorization: `Bearer ${newToken}`\r\n-          }\r\n-        });\r\n-        return next.handle(newRequest);\r\n-      }),\r\n-      catchError(error => {\r\n-        this.authService.logout();\r\n-        this.router.navigate(['/login']);\r\n-        return throwError(error);\r\n-      })\r\n-    );\r\n-  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748598593416,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class GoogleAuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    // Ne pas intercepter les requêtes qui ne sont pas pour votre backend Gmail\r\n    if (!request.url.includes('e8.systeo.tn/emails') && \r\n        !request.url.includes('e8.systeo.tn/drafts')) {\r\n      return next.handle(request);\r\n    }\r\n\r\n    const googleToken = this.authService.getGoogleAccessToken();\r\n    if (googleToken) {\r\n      const authReq = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${googleToken}`\r\n        }\r\n      });\r\n      return next.handle(authReq);\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}"
        }
    ]
}