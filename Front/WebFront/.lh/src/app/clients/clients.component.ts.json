{
    "sourceFile": "src/app/clients/clients.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 84,
            "patches": [
                {
                    "date": 1746446042482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747785771207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,207 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n+import { Router } from '@angular/router';\r\n+import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n+// import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n+// import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n+// Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n+export interface Client {\r\n+  id: string;\r\n+  name: string;\r\n+  address: string;\r\n+  email: string;\r\n+  phone: string;\r\n+  createdAt: number; // Ou Date, selon comment vous le gérez\r\n+  idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n+  companyName?: string; // Optionnel si non utilisé directement dans le template\r\n+}\r\n+\r\n @Component({\r\n   selector: 'app-clients',\r\n   templateUrl: './clients.component.html',\r\n-  styleUrl: './clients.component.scss',\r\n-  standalone: false\r\n+  styleUrls: ['./clients.component.scss']\r\n })\r\n-export class ClientsComponent {\r\n+export class ClientsComponent implements OnInit {\r\n \r\n+  clients: Client[] = [];\r\n+  filteredClients: Client[] = [];\r\n+  searchQuery: string = '';\r\n+  viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n+\r\n+  editingClientId: string | null = null;\r\n+  editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n+\r\n+  // Simulez votre AuthService et ClientService ici ou injectez-les\r\n+  // constructor(\r\n+  //   private clientService: ClientService,\r\n+  //   private authService: AuthService,\r\n+  //   private router: Router,\r\n+  //   private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n+  // ) { }\r\n+\r\n+  // Constructeur simplifié pour l'exemple\r\n+  constructor(\r\n+    private router: Router,\r\n+    // private authService: AuthService, // Décommentez si AuthService est utilisé pour getAccessToken\r\n+    private http: HttpClient // Exemple, idéalement via un service\r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    this.loadClients();\r\n+  }\r\n+\r\n+  // Méthode pour obtenir les en-têtes API (comme fournie)\r\n+  private getApiHeaders(): HttpHeaders {\r\n+    // const token = this.authService.getAccessToken(); // Décommentez si vous utilisez AuthService\r\n+    const token = 'VOTRE_TOKEN_ICI'; // Placeholder, remplacez par la vraie logique\r\n+    return new HttpHeaders({\r\n+      'Content-Type': 'application/json',\r\n+      'Authorization': `Bearer ${token}`\r\n+    });\r\n+  }\r\n+\r\n+  loadClients(): void {\r\n+    // Simulez la récupération des clients. Remplacez par un appel à votre ClientService.\r\n+    // Exemple avec HttpClient (adaptez l'URL)\r\n+    // const headers = this.getApiHeaders();\r\n+    // this.http.get<Client[]>('/api/clients', { headers }).subscribe({\r\n+    //   next: (data) => {\r\n+    //     this.clients = data;\r\n+    //     this.applyFilter(); // Appliquer le filtre initial (qui sera vide au début)\r\n+    //   },\r\n+    //   error: (err) => console.error('Erreur lors de la récupération des clients', err)\r\n+    // });\r\n+\r\n+    // Données de simulation pour l'exemple :\r\n+    this.clients = [\r\n+      {\r\n+        \"id\": \"50da8c53-f1bb-47cb-9d06-b31e55706ed8\",\r\n+        \"name\": \"Salma Bennani\",\r\n+        \"address\": \"123 Rue de la Paix, Tunis\",\r\n+        \"email\": \"salma@gmail.com\",\r\n+        \"phone\": \"216 XX XXX XXX\",\r\n+        \"createdAt\": 1747780390913,\r\n+        \"idCompany\": \"680657ad26cbca08d31f221c\",\r\n+        \"companyName\": \"Archi Concept Tunisie\"\r\n+      },\r\n+      {\r\n+        \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\r\n+        \"name\": \"Ahmed Cherif\",\r\n+        \"address\": \"45 Avenue Habib Bourguiba, Sfax\",\r\n+        \"email\": \"ahmed.c@example.com\",\r\n+        \"phone\": \"216 YY YYY YYY\",\r\n+        \"createdAt\": 1747700000000\r\n+      },\r\n+      {\r\n+        \"id\": \"f0e1d2c3-b4a5-6789-0123-456789abcdef\",\r\n+        \"name\": \"Fatma Gharbi\",\r\n+        \"address\": \"\", // Adresse vide\r\n+        \"email\": \"fatma.gharbi@mail.com\",\r\n+        \"phone\": \"\", // Téléphone vide\r\n+        \"createdAt\": 1747600000000\r\n+      }\r\n+    ];\r\n+    this.applyFilter();\r\n+  }\r\n+\r\n+  applyFilter(): void {\r\n+    const query = this.searchQuery.toLowerCase().trim();\r\n+    if (!query) {\r\n+      this.filteredClients = [...this.clients];\r\n+    } else {\r\n+      this.filteredClients = this.clients.filter(client =>\r\n+        client.name.toLowerCase().includes(query) ||\r\n+        client.email.toLowerCase().includes(query) ||\r\n+        (client.address && client.address.toLowerCase().includes(query)) ||\r\n+        (client.phone && client.phone.toLowerCase().includes(query))\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  toggleViewMode(mode: 'list' | 'card'): void {\r\n+    this.viewMode = mode;\r\n+  }\r\n+\r\n+  addClient(): void {\r\n+    console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n+    // Exemple: this.router.navigate(['/clients/nouveau']);\r\n+    // Ou ouvrir un dialogue modal\r\n+  }\r\n+\r\n+  goToClientDetails(client: Client): void {\r\n+    // Si l'édition est active sur cette ligne, ne pas naviguer\r\n+    if (this.editingClientId === client.id) {\r\n+      return;\r\n+    }\r\n+    console.log('Naviguer vers les détails du client:', client.id);\r\n+    // Exemple: this.router.navigate(['/clients', client.id]);\r\n+  }\r\n+\r\n+  // --- Fonctions pour l'édition en ligne (exemple basique) ---\r\n+  // Vous devrez probablement ajouter des boutons \"Modifier\", \"Sauvegarder\", \"Annuler\" dans le HTML\r\n+  // et appeler ces méthodes. Pour l'instant, le HTML active l'édition au clic sur la ligne.\r\n+\r\n+  // Cette méthode n'est plus directement appelée par le (click) sur <tr> si goToClientDetails est prioritaire.\r\n+  // Vous pourriez avoir un bouton \"Modifier\" séparé.\r\n+  // startEdit(client: Client, event: MouseEvent): void {\r\n+  //   event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n+  //   this.editingClientId = client.id;\r\n+  //   this.editedClientData = { ...client }; // Copie les données pour l'édition\r\n+  // }\r\n+\r\n+  // saveEdit(clientId: string, event: MouseEvent): void {\r\n+  //   event.stopPropagation();\r\n+  //   if (!this.editedClientData) return;\r\n+\r\n+  //   // Logique pour sauvegarder les modifications via votre service\r\n+  //   // this.clientService.updateClient(clientId, this.editedClientData).subscribe({\r\n+  //   //   next: (updatedClient) => {\r\n+  //   //     const index = this.clients.findIndex(c => c.id === clientId);\r\n+  //   //     if (index !== -1) {\r\n+  //   //       this.clients[index] = { ...this.clients[index], ...updatedClient }; // Mettre à jour avec les données du serveur\r\n+  //   //       this.applyFilter();\r\n+  //   //     }\r\n+  //   //     this.cancelEdit(event);\r\n+  //   //   },\r\n+  //   //   error: (err) => console.error('Erreur lors de la mise à jour du client', err)\r\n+  //   // });\r\n+  //   console.log('Sauvegarder les modifications pour le client:', clientId, this.editedClientData);\r\n+  //   const index = this.clients.findIndex(c => c.id === clientId);\r\n+  //   if (index !== -1) {\r\n+  //       this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n+  //       this.applyFilter();\r\n+  //   }\r\n+  //   this.editingClientId = null;\r\n+  //   this.editedClientData = {};\r\n+  // }\r\n+\r\n+  // cancelEdit(event?: MouseEvent): void {\r\n+  //   if(event) event.stopPropagation();\r\n+  //   this.editingClientId = null;\r\n+  //   this.editedClientData = {};\r\n+  // }\r\n+  // --- Fin des fonctions d'édition en ligne ---\r\n+\r\n+  deleteClient(clientId: string, event: MouseEvent): void {\r\n+    event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n+\r\n+    // Demander confirmation avant de supprimer\r\n+    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n+      // Logique pour supprimer le client via votre service\r\n+      // const headers = this.getApiHeaders();\r\n+      // this.http.delete(`/api/clients/${clientId}`, { headers }).subscribe({\r\n+      //   next: () => {\r\n+      //     this.clients = this.clients.filter(c => c.id !== clientId);\r\n+      //     this.applyFilter();\r\n+      //     console.log('Client supprimé:', clientId);\r\n+      //   },\r\n+      //   error: (err) => console.error('Erreur lors de la suppression du client', err)\r\n+      // });\r\n+\r\n+      // Simulation\r\n+      this.clients = this.clients.filter(c => c.id !== clientId);\r\n+      this.applyFilter();\r\n+      console.log('Client supprimé (simulation):', clientId);\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1747786234248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,20 +186,9 @@\n     event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n \r\n     // Demander confirmation avant de supprimer\r\n     if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n-      // Logique pour supprimer le client via votre service\r\n-      // const headers = this.getApiHeaders();\r\n-      // this.http.delete(`/api/clients/${clientId}`, { headers }).subscribe({\r\n-      //   next: () => {\r\n-      //     this.clients = this.clients.filter(c => c.id !== clientId);\r\n-      //     this.applyFilter();\r\n-      //     console.log('Client supprimé:', clientId);\r\n-      //   },\r\n-      //   error: (err) => console.error('Erreur lors de la suppression du client', err)\r\n-      // });\r\n-\r\n-      // Simulation\r\n+   \r\n       this.clients = this.clients.filter(c => c.id !== clientId);\r\n       this.applyFilter();\r\n       console.log('Client supprimé (simulation):', clientId);\r\n     }\r\n"
                },
                {
                    "date": 1747786245199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,57 +136,13 @@\n     console.log('Naviguer vers les détails du client:', client.id);\r\n     // Exemple: this.router.navigate(['/clients', client.id]);\r\n   }\r\n \r\n-  // --- Fonctions pour l'édition en ligne (exemple basique) ---\r\n-  // Vous devrez probablement ajouter des boutons \"Modifier\", \"Sauvegarder\", \"Annuler\" dans le HTML\r\n-  // et appeler ces méthodes. Pour l'instant, le HTML active l'édition au clic sur la ligne.\r\n \r\n-  // Cette méthode n'est plus directement appelée par le (click) sur <tr> si goToClientDetails est prioritaire.\r\n-  // Vous pourriez avoir un bouton \"Modifier\" séparé.\r\n-  // startEdit(client: Client, event: MouseEvent): void {\r\n-  //   event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n-  //   this.editingClientId = client.id;\r\n-  //   this.editedClientData = { ...client }; // Copie les données pour l'édition\r\n-  // }\r\n-\r\n-  // saveEdit(clientId: string, event: MouseEvent): void {\r\n-  //   event.stopPropagation();\r\n-  //   if (!this.editedClientData) return;\r\n-\r\n-  //   // Logique pour sauvegarder les modifications via votre service\r\n-  //   // this.clientService.updateClient(clientId, this.editedClientData).subscribe({\r\n-  //   //   next: (updatedClient) => {\r\n-  //   //     const index = this.clients.findIndex(c => c.id === clientId);\r\n-  //   //     if (index !== -1) {\r\n-  //   //       this.clients[index] = { ...this.clients[index], ...updatedClient }; // Mettre à jour avec les données du serveur\r\n-  //   //       this.applyFilter();\r\n-  //   //     }\r\n-  //   //     this.cancelEdit(event);\r\n-  //   //   },\r\n-  //   //   error: (err) => console.error('Erreur lors de la mise à jour du client', err)\r\n-  //   // });\r\n-  //   console.log('Sauvegarder les modifications pour le client:', clientId, this.editedClientData);\r\n-  //   const index = this.clients.findIndex(c => c.id === clientId);\r\n-  //   if (index !== -1) {\r\n-  //       this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n-  //       this.applyFilter();\r\n-  //   }\r\n-  //   this.editingClientId = null;\r\n-  //   this.editedClientData = {};\r\n-  // }\r\n-\r\n-  // cancelEdit(event?: MouseEvent): void {\r\n-  //   if(event) event.stopPropagation();\r\n-  //   this.editingClientId = null;\r\n-  //   this.editedClientData = {};\r\n-  // }\r\n-  // --- Fin des fonctions d'édition en ligne ---\r\n-\r\n   deleteClient(clientId: string, event: MouseEvent): void {\r\n     event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n \r\n-    // Demander confirmation avant de supprimer\r\n+  \r\n     if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n    \r\n       this.clients = this.clients.filter(c => c.id !== clientId);\r\n       this.applyFilter();\r\n"
                },
                {
                    "date": 1747786258630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,48 +60,9 @@\n     });\r\n   }\r\n \r\n   loadClients(): void {\r\n-    // Simulez la récupération des clients. Remplacez par un appel à votre ClientService.\r\n-    // Exemple avec HttpClient (adaptez l'URL)\r\n-    // const headers = this.getApiHeaders();\r\n-    // this.http.get<Client[]>('/api/clients', { headers }).subscribe({\r\n-    //   next: (data) => {\r\n-    //     this.clients = data;\r\n-    //     this.applyFilter(); // Appliquer le filtre initial (qui sera vide au début)\r\n-    //   },\r\n-    //   error: (err) => console.error('Erreur lors de la récupération des clients', err)\r\n-    // });\r\n-\r\n-    // Données de simulation pour l'exemple :\r\n-    this.clients = [\r\n-      {\r\n-        \"id\": \"50da8c53-f1bb-47cb-9d06-b31e55706ed8\",\r\n-        \"name\": \"Salma Bennani\",\r\n-        \"address\": \"123 Rue de la Paix, Tunis\",\r\n-        \"email\": \"salma@gmail.com\",\r\n-        \"phone\": \"216 XX XXX XXX\",\r\n-        \"createdAt\": 1747780390913,\r\n-        \"idCompany\": \"680657ad26cbca08d31f221c\",\r\n-        \"companyName\": \"Archi Concept Tunisie\"\r\n-      },\r\n-      {\r\n-        \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\r\n-        \"name\": \"Ahmed Cherif\",\r\n-        \"address\": \"45 Avenue Habib Bourguiba, Sfax\",\r\n-        \"email\": \"ahmed.c@example.com\",\r\n-        \"phone\": \"216 YY YYY YYY\",\r\n-        \"createdAt\": 1747700000000\r\n-      },\r\n-      {\r\n-        \"id\": \"f0e1d2c3-b4a5-6789-0123-456789abcdef\",\r\n-        \"name\": \"Fatma Gharbi\",\r\n-        \"address\": \"\", // Adresse vide\r\n-        \"email\": \"fatma.gharbi@mail.com\",\r\n-        \"phone\": \"\", // Téléphone vide\r\n-        \"createdAt\": 1747600000000\r\n-      }\r\n-    ];\r\n+    \r\n     this.applyFilter();\r\n   }\r\n \r\n   applyFilter(): void {\r\n"
                },
                {
                    "date": 1747786265283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,18 +49,10 @@\n   ngOnInit(): void {\r\n     this.loadClients();\r\n   }\r\n \r\n-  // Méthode pour obtenir les en-têtes API (comme fournie)\r\n-  private getApiHeaders(): HttpHeaders {\r\n-    // const token = this.authService.getAccessToken(); // Décommentez si vous utilisez AuthService\r\n-    const token = 'VOTRE_TOKEN_ICI'; // Placeholder, remplacez par la vraie logique\r\n-    return new HttpHeaders({\r\n-      'Content-Type': 'application/json',\r\n-      'Authorization': `Bearer ${token}`\r\n-    });\r\n-  }\r\n \r\n+\r\n   loadClients(): void {\r\n     \r\n     this.applyFilter();\r\n   }\r\n"
                },
                {
                    "date": 1747786293203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,20 @@\n \r\n \r\n \r\n   loadClients(): void {\r\n-    \r\n+    this.commercialService.getInvoices().subscribe({\r\n+      next: (data) => {\r\n+        console.log(\"les factures\",data)\r\n+        this.invoices = data;\r\n+        this.isLoading = false;\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Error fetching invoices:', err);\r\n+        this.errorMessage = 'Failed to load invoices. Please try again later.';\r\n+        this.isLoading = false;\r\n+      }\r\n+    });\r\n     this.applyFilter();\r\n   }\r\n \r\n   applyFilter(): void {\r\n"
                },
                {
                    "date": 1747786302674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   editingClientId: string | null = null;\r\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n-  // constructor(\r\n+  constructor(\r\n   //   private clientService: ClientService,\r\n   //   private authService: AuthService,\r\n   //   private router: Router,\r\n   //   private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n"
                },
                {
                    "date": 1747786309791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n-  //   private clientService: ClientService,\r\n-  //   private authService: AuthService,\r\n-  //   private router: Router,\r\n-  //   private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n+     private clientService: ClientService,\r\n+     private authService: AuthService,\r\n+     private router: Router,\r\n+     private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n   // ) { }\r\n \r\n   // Constructeur simplifié pour l'exemple\r\n   constructor(\r\n"
                },
                {
                    "date": 1747786316907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,13 @@\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n-     private clientService: ClientService,\r\n+     private clientService: Co,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n      private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n-  // ) { }\r\n+   ) { }\r\n \r\n   // Constructeur simplifié pour l'exemple\r\n   constructor(\r\n     private router: Router,\r\n"
                },
                {
                    "date": 1747786326106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Component, OnInit } from '@angular/core';\r\n import { Router } from '@angular/router';\r\n import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n+import { CommercialService } from '../services/commercial.service';\r\n // import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n // import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n // Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n@@ -32,9 +33,9 @@\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n-     private clientService: Co,\r\n+     private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n      private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n    ) { }\r\n"
                },
                {
                    "date": 1747786342506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Component, OnInit } from '@angular/core';\r\n import { Router } from '@angular/router';\r\n import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n import { CommercialService } from '../services/commercial.service';\r\n+import { AuthService } from '../services/auth.service';\r\n // import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n // import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n // Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n@@ -37,14 +38,9 @@\n      private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n      private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n-   ) { }\r\n-\r\n-  // Constructeur simplifié pour l'exemple\r\n-  constructor(\r\n-    private router: Router,\r\n-    // private authService: AuthService, // Décommentez si AuthService est utilisé pour getAccessToken\r\n+  \r\n     private http: HttpClient // Exemple, idéalement via un service\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n"
                },
                {
                    "date": 1747786348635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,9 @@\n   constructor(\r\n      private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n-     private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n-  \r\n-    private http: HttpClient // Exemple, idéalement via un service\r\n+     private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.loadClients();\r\n"
                },
                {
                    "date": 1747786358183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n   }\r\n \r\n \r\n \r\n-  loadClients(): void {\r\n-    this.commercialService.getInvoices().subscribe({\r\n+  loadClients(id): void {\r\n+    this.commercialService.get().subscribe({\r\n       next: (data) => {\r\n         console.log(\"les factures\",data)\r\n         this.invoices = data;\r\n         this.isLoading = false;\r\n"
                },
                {
                    "date": 1747786365676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   }\r\n \r\n \r\n \r\n-  loadClients(id): void {\r\n+  loadClients(idCompany:String): void {\r\n     this.commercialService.get().subscribe({\r\n       next: (data) => {\r\n         console.log(\"les factures\",data)\r\n         this.invoices = data;\r\n"
                },
                {
                    "date": 1747786374834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \r\n \r\n \r\n   loadClients(idCompany:String): void {\r\n-    this.commercialService.get().subscribe({\r\n+    this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les factures\",data)\r\n         this.invoices = data;\r\n         this.isLoading = false;\r\n"
                },
                {
                    "date": 1747786404537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \r\n   loadClients(idCompany:String): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n-        console.log(\"les factures\",data)\r\n+        console.log(\"les clients\",data)\r\n         this.invoices = data;\r\n         this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n"
                },
                {
                    "date": 1747786410035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,9 @@\n   loadClients(idCompany:String): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les clients\",data)\r\n-        this.invoices = data;\r\n-        this.isLoading = false;\r\n+        this.clients\r\n       },\r\n       error: (err) => {\r\n         console.error('Error fetching invoices:', err);\r\n         this.errorMessage = 'Failed to load invoices. Please try again later.';\r\n"
                },
                {
                    "date": 1747786417075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,14 +50,13 @@\n   loadClients(idCompany:String): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les clients\",data)\r\n-        this.clients\r\n+        this.clients=data;\r\n       },\r\n       error: (err) => {\r\n         console.error('Error fetching invoices:', err);\r\n-        this.errorMessage = 'Failed to load invoices. Please try again later.';\r\n-        this.isLoading = false;\r\n+        \r\n       }\r\n     });\r\n     this.applyFilter();\r\n   }\r\n"
                },
                {
                    "date": 1747786437985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   }\r\n \r\n \r\n \r\n-  loadClients(idCompany:String): void {\r\n+  loadClients(idCompany: string): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les clients\",data)\r\n         this.clients=data;\r\n"
                },
                {
                    "date": 1747786444169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n      private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n+    const \r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786450628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,9 @@\n      private router: Router,\r\n      private http: HttpClient \r\n   ) {}\r\n \r\n-  ngOnInit(): void {\r\n-    const \r\n+  ngOnInit()C\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786456536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,10 @@\n      private router: Router,\r\n      private http: HttpClient \r\n   ) {}\r\n \r\n-  ngOnInit()C\r\n+  ngOnInit(): void {\r\n+    const idCompany=lo\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786462835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n      private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    const idCompany=lo\r\n+    const idCompany=localStorage.getItem\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786468640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import { Component, OnInit } from '@angular/core';\r\n+import { Router } from '@angular/router';\r\n+import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n+import { CommercialService } from '../services/commercial.service';\r\n+import { AuthService } from '../services/auth.service';\r\n+// import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n+// import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n+\r\n+// Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n+export interface Client {\r\n+  id: string;\r\n+  name: string;\r\n+  address: string;\r\n+  email: string;\r\n+  phone: string;\r\n+  createdAt: number; // Ou Date, selon comment vous le gérez\r\n+  idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n+  companyName?: string; // Optionnel si non utilisé directement dans le template\r\n+}\r\n+\r\n+@Component({\r\n+  selector: 'app-clients',\r\n+  templateUrl: './clients.component.html',\r\n+  styleUrls: ['./clients.component.scss']\r\n+})\r\n+export class ClientsComponent implements OnInit {\r\n+\r\n+  clients: Client[] = [];\r\n+  filteredClients: Client[] = [];\r\n+  searchQuery: string = '';\r\n+  viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n+\r\n+  editingClientId: string | null = null;\r\n+  editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n+\r\n+  // Simulez votre AuthService et ClientService ici ou injectez-les\r\n+  constructor(\r\n+     private commercialService: CommercialService,\r\n+     private authService: AuthService,\r\n+     private router: Router,\r\n+     private http: HttpClient \r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    const idCompany=localStorage.getItem('idCompany)\r\n+    this.loadClients();\r\n+  }\r\n+\r\n+\r\n+\r\n+  loadClients(idCompany: string): void {\r\n+    this.commercialService.getClients(idCompany).subscribe({\r\n+      next: (data) => {\r\n+        console.log(\"les clients\",data)\r\n+        this.clients=data;\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Error fetching invoices:', err);\r\n+        \r\n+      }\r\n+    });\r\n+    this.applyFilter();\r\n+  }\r\n+\r\n+  applyFilter(): void {\r\n+    const query = this.searchQuery.toLowerCase().trim();\r\n+    if (!query) {\r\n+      this.filteredClients = [...this.clients];\r\n+    } else {\r\n+      this.filteredClients = this.clients.filter(client =>\r\n+        client.name.toLowerCase().includes(query) ||\r\n+        client.email.toLowerCase().includes(query) ||\r\n+        (client.address && client.address.toLowerCase().includes(query)) ||\r\n+        (client.phone && client.phone.toLowerCase().includes(query))\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  toggleViewMode(mode: 'list' | 'card'): void {\r\n+    this.viewMode = mode;\r\n+  }\r\n+\r\n+  addClient(): void {\r\n+    console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n+    // Exemple: this.router.navigate(['/clients/nouveau']);\r\n+    // Ou ouvrir un dialogue modal\r\n+  }\r\n+\r\n+  goToClientDetails(client: Client): void {\r\n+    // Si l'édition est active sur cette ligne, ne pas naviguer\r\n+    if (this.editingClientId === client.id) {\r\n+      return;\r\n+    }\r\n+    console.log('Naviguer vers les détails du client:', client.id);\r\n+    // Exemple: this.router.navigate(['/clients', client.id]);\r\n+  }\r\n+\r\n+\r\n+  deleteClient(clientId: string, event: MouseEvent): void {\r\n+    event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n+\r\n+  \r\n+    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n+   \r\n+      this.clients = this.clients.filter(c => c.id !== clientId);\r\n+      this.applyFilter();\r\n+      console.log('Client supprimé (simulation):', clientId);\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1747786486223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n      private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    const idCompany=localStorage.getItem('idCompany)\r\n+    const idCompany=localStorage.getItem('idAgence');\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n@@ -107,114 +107,4 @@\n       console.log('Client supprimé (simulation):', clientId);\r\n     }\r\n   }\r\n }\r\n-import { Component, OnInit } from '@angular/core';\r\n-import { Router } from '@angular/router';\r\n-import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n-import { CommercialService } from '../services/commercial.service';\r\n-import { AuthService } from '../services/auth.service';\r\n-// import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n-// import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n-\r\n-// Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n-export interface Client {\r\n-  id: string;\r\n-  name: string;\r\n-  address: string;\r\n-  email: string;\r\n-  phone: string;\r\n-  createdAt: number; // Ou Date, selon comment vous le gérez\r\n-  idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n-  companyName?: string; // Optionnel si non utilisé directement dans le template\r\n-}\r\n-\r\n-@Component({\r\n-  selector: 'app-clients',\r\n-  templateUrl: './clients.component.html',\r\n-  styleUrls: ['./clients.component.scss']\r\n-})\r\n-export class ClientsComponent implements OnInit {\r\n-\r\n-  clients: Client[] = [];\r\n-  filteredClients: Client[] = [];\r\n-  searchQuery: string = '';\r\n-  viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n-\r\n-  editingClientId: string | null = null;\r\n-  editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n-\r\n-  // Simulez votre AuthService et ClientService ici ou injectez-les\r\n-  constructor(\r\n-     private commercialService: CommercialService,\r\n-     private authService: AuthService,\r\n-     private router: Router,\r\n-     private http: HttpClient \r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    const idCompany=localStorage.getItem\r\n-    this.loadClients();\r\n-  }\r\n-\r\n-\r\n-\r\n-  loadClients(idCompany: string): void {\r\n-    this.commercialService.getClients(idCompany).subscribe({\r\n-      next: (data) => {\r\n-        console.log(\"les clients\",data)\r\n-        this.clients=data;\r\n-      },\r\n-      error: (err) => {\r\n-        console.error('Error fetching invoices:', err);\r\n-        \r\n-      }\r\n-    });\r\n-    this.applyFilter();\r\n-  }\r\n-\r\n-  applyFilter(): void {\r\n-    const query = this.searchQuery.toLowerCase().trim();\r\n-    if (!query) {\r\n-      this.filteredClients = [...this.clients];\r\n-    } else {\r\n-      this.filteredClients = this.clients.filter(client =>\r\n-        client.name.toLowerCase().includes(query) ||\r\n-        client.email.toLowerCase().includes(query) ||\r\n-        (client.address && client.address.toLowerCase().includes(query)) ||\r\n-        (client.phone && client.phone.toLowerCase().includes(query))\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  toggleViewMode(mode: 'list' | 'card'): void {\r\n-    this.viewMode = mode;\r\n-  }\r\n-\r\n-  addClient(): void {\r\n-    console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n-    // Exemple: this.router.navigate(['/clients/nouveau']);\r\n-    // Ou ouvrir un dialogue modal\r\n-  }\r\n-\r\n-  goToClientDetails(client: Client): void {\r\n-    // Si l'édition est active sur cette ligne, ne pas naviguer\r\n-    if (this.editingClientId === client.id) {\r\n-      return;\r\n-    }\r\n-    console.log('Naviguer vers les détails du client:', client.id);\r\n-    // Exemple: this.router.navigate(['/clients', client.id]);\r\n-  }\r\n-\r\n-\r\n-  deleteClient(clientId: string, event: MouseEvent): void {\r\n-    event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n-\r\n-  \r\n-    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n-   \r\n-      this.clients = this.clients.filter(c => c.id !== clientId);\r\n-      this.applyFilter();\r\n-      console.log('Client supprimé (simulation):', clientId);\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1747786494441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n-    this.loadClients();\r\n+    this.loadClients(idCompany);\r\n   }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747786502239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n+    if(idCompany)\r\n     this.loadClients(idCompany);\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786509528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,13 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n-    if(idCompany)\r\n-    this.loadClients(idCompany);\r\n+    if(idCompany){\r\n+      this.loadClients(idCompany);\r\n+    }\r\n+}\r\n+    \r\n   }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747786514904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n       this.loadClients(idCompany);\r\n     }\r\n }\r\n     \r\n-  }\r\n+ \r\n \r\n \r\n \r\n   loadClients(idCompany: string): void {\r\n"
                },
                {
                    "date": 1747787269920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,8 @@\n     if(idCompany){\r\n       this.loadClients(idCompany);\r\n     }\r\n }\r\n-    \r\n- \r\n \r\n \r\n \r\n   loadClients(idCompany: string): void {\r\n@@ -62,9 +60,9 @@\n         console.error('Error fetching invoices:', err);\r\n         \r\n       }\r\n     });\r\n-    this.applyFilter();\r\n+    \r\n   }\r\n \r\n   applyFilter(): void {\r\n     const query = this.searchQuery.toLowerCase().trim();\r\n"
                },
                {
                    "date": 1747787721496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,11 @@\n   searchQuery: string = '';\r\n   viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n \r\n   editingClientId: string | null = null;\r\n-  editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n+  editedClientData: { address?: string; phone?: string } = {}; // Pour l'édition en ligne (adresse et téléphone uniquement)\r\n \r\n+\r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n      private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n@@ -54,8 +55,9 @@\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les clients\",data)\r\n         this.clients=data;\r\n+        this.applyFilter();\r\n       },\r\n       error: (err) => {\r\n         console.error('Error fetching invoices:', err);\r\n         \r\n"
                },
                {
                    "date": 1747787748034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,9 @@\n       );\r\n     }\r\n   }\r\n \r\n-  toggleViewMode(mode: 'list' | 'card'): void {\r\n-    this.viewMode = mode;\r\n-  }\r\n+  \r\n \r\n   addClient(): void {\r\n     console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n     // Exemple: this.router.navigate(['/clients/nouveau']);\r\n"
                },
                {
                    "date": 1747787755980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,5 +108,58 @@\n       this.applyFilter();\r\n       console.log('Client supprimé (simulation):', clientId);\r\n     }\r\n   }\r\n+  startEdit(client: Client, event: MouseEvent): void {\r\n+    event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n+    this.editingClientId = client.id;\r\n+    // Copier uniquement les champs modifiables\r\n+    this.editedClientData = {\r\n+      address: client.address,\r\n+      phone: client.phone\r\n+    };\r\n+  }\r\n+\r\n+  saveEdit(clientId: string, event: MouseEvent): void {\r\n+    event.stopPropagation();\r\n+    if (!this.editedClientData || this.editingClientId !== clientId) return;\r\n+\r\n+    // Préparez les données à envoyer (uniquement les champs modifiés si nécessaire, ou l'objet entier)\r\n+    const updatePayload: Partial<Client> = {\r\n+      address: this.editedClientData.address,\r\n+      phone: this.editedClientData.phone\r\n+    };\r\n+\r\n+    // Assurez-vous que votre CommercialService a une méthode updateClient\r\n+    // Exemple: this.commercialService.updateClient(clientId, updatePayload).subscribe({\r\n+    //   next: (updatedClientFromServer) => {\r\n+    //     const index = this.clients.findIndex(c => c.id === clientId);\r\n+    //     if (index !== -1) {\r\n+    //       // Mettre à jour avec les données du serveur ou les données locales si le serveur ne renvoie pas tout\r\n+    //       this.clients[index] = { ...this.clients[index], ...updatePayload }; // Ou ...updatedClientFromServer\r\n+    //       this.applyFilter(); // Rafraîchir la liste filtrée\r\n+    //     }\r\n+    //     this.cancelEdit(); // Sortir du mode édition\r\n+    //     console.log('Client mis à jour avec succès', updatedClientFromServer);\r\n+    //   },\r\n+    //   error: (err) => {\r\n+    //     console.error('Erreur lors de la mise à jour du client', err);\r\n+    //     // Peut-être afficher un message d'erreur à l'utilisateur\r\n+    //   }\r\n+    // });\r\n+\r\n+    // Simulation de la sauvegarde\r\n+    console.log('Sauvegarde des modifications pour le client:', clientId, this.editedClientData);\r\n+    const index = this.clients.findIndex(c => c.id === clientId);\r\n+    if (index !== -1) {\r\n+        this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n+        this.applyFilter();\r\n+    }\r\n+    this.cancelEdit(); // Quitte le mode édition après la simulation\r\n+  }\r\n+\r\n+  cancelEdit(event?: MouseEvent): void {\r\n+    if(event) event.stopPropagation();\r\n+    this.editingClientId = null;\r\n+    this.editedClientData = {};\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1747788075807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n       phone: client.phone\r\n     };\r\n   }\r\n \r\n-  saveEdit(clientId: string, event: MouseEvent): void {\r\n+  saveEdit(clientId: string, event?: MouseEvent): void {\r\n     event.stopPropagation();\r\n     if (!this.editedClientData || this.editingClientId !== clientId) return;\r\n \r\n     // Préparez les données à envoyer (uniquement les champs modifiés si nécessaire, ou l'objet entier)\r\n"
                },
                {
                    "date": 1747788083508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n       phone: client.phone\r\n     };\r\n   }\r\n \r\n-  saveEdit(clientId: string, event?: MouseEvent): void {\r\n+  saveEdit(clientId: string, event: MouseEvent): void {\r\n     event.stopPropagation();\r\n     if (!this.editedClientData || this.editingClientId !== clientId) return;\r\n \r\n     // Préparez les données à envoyer (uniquement les champs modifiés si nécessaire, ou l'objet entier)\r\n"
                },
                {
                    "date": 1747788096821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n       phone: client.phone\r\n     };\r\n   }\r\n \r\n-  saveEdit(clientId: string, event: MouseEvent): void {\r\n+  saveEdit(clientId: string, event: Event): void {\r\n     event.stopPropagation();\r\n     if (!this.editedClientData || this.editingClientId !== clientId) return;\r\n \r\n     // Préparez les données à envoyer (uniquement les champs modifiés si nécessaire, ou l'objet entier)\r\n@@ -156,9 +156,9 @@\n     }\r\n     this.cancelEdit(); // Quitte le mode édition après la simulation\r\n   }\r\n \r\n-  cancelEdit(event?: MouseEvent): void {\r\n+  cancelEdit(event?: Event): void {\r\n     if(event) event.stopPropagation();\r\n     this.editingClientId = null;\r\n     this.editedClientData = {};\r\n   }\r\n"
                },
                {
                    "date": 1747823696557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,11 +82,34 @@\n \r\n   \r\n \r\n   addClient(): void {\r\n-    console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n-    // Exemple: this.router.navigate(['/clients/nouveau']);\r\n-    // Ou ouvrir un dialogue modal\r\n+    const modalRef = this.modalService.open(ProjectFormComponent, {\r\n+          size: 'lg',\r\n+          centered: true,\r\n+          backdrop: 'static',\r\n+          keyboard: false // Empêche la fermeture avec la touche Echap si backdrop='static'\r\n+        });\r\n+    \r\n+        // Utiliser modalRef.result qui est une promesse\r\n+        modalRef.result.then(\r\n+          (result) => {\r\n+            // Ce bloc est exécuté quand la modale est fermée avec succès (ex: via modal.close(result))\r\n+            console.log('La modale a été fermée avec succès');\r\n+            if (result) {\r\n+              console.log('Nouveau projet ajouté:', result);\r\n+              this.getProjects(); // Recharger la liste des projets\r\n+            } else {\r\n+              console.log('La modale a été fermée avec succès mais sans résultat.');\r\n+            \r\n+            }\r\n+          },\r\n+          (reason) => {\r\n+            // Ce bloc est exécuté quand la modale est annulée (ex: clic hors modale, touche Echap, ou via modal.dismiss(reason))\r\n+            console.log(`La modale a été annulée/fermée (${reason})`);\r\n+            // Pas besoin de recharger les projets si l'action a été annulée\r\n+          }\r\n+        );\r\n   }\r\n \r\n   goToClientDetails(client: Client): void {\r\n     // Si l'édition est active sur cette ligne, ne pas naviguer\r\n"
                },
                {
                    "date": 1747823714191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n   constructor(\r\n      private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n-     private http: HttpClient \r\n+     private http: HttpClient ,\r\n+     private modalService: NgbModal,\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n"
                },
                {
                    "date": 1747823723386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { Router } from '@angular/router';\r\n import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n import { CommercialService } from '../services/commercial.service';\r\n import { AuthService } from '../services/auth.service';\r\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n // import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n // import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n // Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n@@ -39,9 +40,9 @@\n      private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n      private http: HttpClient ,\r\n-     private modalService: NgbModal,\r\n+     private modalService: NgbModal\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n@@ -83,9 +84,9 @@\n \r\n   \r\n \r\n   addClient(): void {\r\n-    const modalRef = this.modalService.open(ProjectFormComponent, {\r\n+    const modalRef = this.modalService.open(ClFormComponent, {\r\n           size: 'lg',\r\n           centered: true,\r\n           backdrop: 'static',\r\n           keyboard: false // Empêche la fermeture avec la touche Echap si backdrop='static'\r\n"
                },
                {
                    "date": 1747823730107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n import { CommercialService } from '../services/commercial.service';\r\n import { AuthService } from '../services/auth.service';\r\n import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n+import { ClientFormComponent } from '../client-form/client-form.component';\r\n // import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n // import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n // Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n@@ -84,9 +85,9 @@\n \r\n   \r\n \r\n   addClient(): void {\r\n-    const modalRef = this.modalService.open(ClFormComponent, {\r\n+    const modalRef = this.modalService.open(ClientFormComponent, {\r\n           size: 'lg',\r\n           centered: true,\r\n           backdrop: 'static',\r\n           keyboard: false // Empêche la fermeture avec la touche Echap si backdrop='static'\r\n"
                },
                {
                    "date": 1747823735801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n   \r\n \r\n   addClient(): void {\r\n     const modalRef = this.modalService.open(ClientFormComponent, {\r\n-          size: 'lg',\r\n+          size: 'mg',\r\n           centered: true,\r\n           backdrop: 'static',\r\n           keyboard: false // Empêche la fermeture avec la touche Echap si backdrop='static'\r\n         });\r\n"
                },
                {
                    "date": 1747823750410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     const modalRef = this.modalService.open(ClientFormComponent, {\r\n           size: 'mg',\r\n           centered: true,\r\n           backdrop: 'static',\r\n-          keyboard: false // Empêche la fermeture avec la touche Echap si backdrop='static'\r\n+          keyboard: false \r\n         });\r\n     \r\n         // Utiliser modalRef.result qui est une promesse\r\n         modalRef.result.then(\r\n"
                },
                {
                    "date": 1747823761915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,8 @@\n           backdrop: 'static',\r\n           keyboard: false \r\n         });\r\n     \r\n-        // Utiliser modalRef.result qui est une promesse\r\n         modalRef.result.then(\r\n           (result) => {\r\n             // Ce bloc est exécuté quand la modale est fermée avec succès (ex: via modal.close(result))\r\n             console.log('La modale a été fermée avec succès');\r\n"
                },
                {
                    "date": 1747823770389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,9 @@\n         });\r\n     \r\n         modalRef.result.then(\r\n           (result) => {\r\n-            // Ce bloc est exécuté quand la modale est fermée avec succès (ex: via modal.close(result))\r\n-            console.log('La modale a été fermée avec succès');\r\n+             console.log('La modale a été fermée avec succès');\r\n             if (result) {\r\n               console.log('Nouveau projet ajouté:', result);\r\n               this.getProjects(); // Recharger la liste des projets\r\n             } else {\r\n"
                },
                {
                    "date": 1747823778676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n         modalRef.result.then(\r\n           (result) => {\r\n              console.log('La modale a été fermée avec succès');\r\n             if (result) {\r\n-              console.log('Nouveau projet ajouté:', result);\r\n+              console.log('Nouveau client ajouté:', result);\r\n               this.getProjects(); // Recharger la liste des projets\r\n             } else {\r\n               console.log('La modale a été fermée avec succès mais sans résultat.');\r\n             \r\n"
                },
                {
                    "date": 1747823788976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n           (result) => {\r\n              console.log('La modale a été fermée avec succès');\r\n             if (result) {\r\n               console.log('Nouveau client ajouté:', result);\r\n-              this.getProjects(); // Recharger la liste des projets\r\n+              this.getc(); // Recharger la liste des projets\r\n             } else {\r\n               console.log('La modale a été fermée avec succès mais sans résultat.');\r\n             \r\n             }\r\n"
                },
                {
                    "date": 1747823800257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n           (result) => {\r\n              console.log('La modale a été fermée avec succès');\r\n             if (result) {\r\n               console.log('Nouveau client ajouté:', result);\r\n-              this.getc(); // Recharger la liste des projets\r\n+              this.loadClients(); // Recharger la liste des projets\r\n             } else {\r\n               console.log('La modale a été fermée avec succès mais sans résultat.');\r\n             \r\n             }\r\n"
                },
                {
                    "date": 1747823810423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,9 @@\n           (result) => {\r\n              console.log('La modale a été fermée avec succès');\r\n             if (result) {\r\n               console.log('Nouveau client ajouté:', result);\r\n+              const \r\n               this.loadClients(); // Recharger la liste des projets\r\n             } else {\r\n               console.log('La modale a été fermée avec succès mais sans résultat.');\r\n             \r\n"
                },
                {
                    "date": 1747823816559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n           (result) => {\r\n              console.log('La modale a été fermée avec succès');\r\n             if (result) {\r\n               console.log('Nouveau client ajouté:', result);\r\n-              const \r\n+              const id\r\n               this.loadClients(); // Recharger la liste des projets\r\n             } else {\r\n               console.log('La modale a été fermée avec succès mais sans résultat.');\r\n             \r\n"
                },
                {
                    "date": 1747823822714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,13 @@\n           (result) => {\r\n              console.log('La modale a été fermée avec succès');\r\n             if (result) {\r\n               console.log('Nouveau client ajouté:', result);\r\n-              const id\r\n+              const idCompany=localStorage.getItem('idAgence');\r\n+              if(idCompany){\r\n+                this.loadClients(idCompany);\r\n+              }\r\n+            \r\n               this.loadClients(); // Recharger la liste des projets\r\n             } else {\r\n               console.log('La modale a été fermée avec succès mais sans résultat.');\r\n             \r\n"
                },
                {
                    "date": 1747823834109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,18 +102,17 @@\n               if(idCompany){\r\n                 this.loadClients(idCompany);\r\n               }\r\n             \r\n-              this.loadClients(); // Recharger la liste des projets\r\n+              \r\n             } else {\r\n               console.log('La modale a été fermée avec succès mais sans résultat.');\r\n             \r\n             }\r\n           },\r\n           (reason) => {\r\n             // Ce bloc est exécuté quand la modale est annulée (ex: clic hors modale, touche Echap, ou via modal.dismiss(reason))\r\n             console.log(`La modale a été annulée/fermée (${reason})`);\r\n-            // Pas besoin de recharger les projets si l'action a été annulée\r\n           }\r\n         );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747847802040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,24 +109,15 @@\n             \r\n             }\r\n           },\r\n           (reason) => {\r\n-            // Ce bloc est exécuté quand la modale est annulée (ex: clic hors modale, touche Echap, ou via modal.dismiss(reason))\r\n             console.log(`La modale a été annulée/fermée (${reason})`);\r\n           }\r\n         );\r\n   }\r\n \r\n-  goToClientDetails(client: Client): void {\r\n-    // Si l'édition est active sur cette ligne, ne pas naviguer\r\n-    if (this.editingClientId === client.id) {\r\n-      return;\r\n-    }\r\n-    console.log('Naviguer vers les détails du client:', client.id);\r\n-    // Exemple: this.router.navigate(['/clients', client.id]);\r\n-  }\r\n+  \r\n \r\n-\r\n   deleteClient(clientId: string, event: MouseEvent): void {\r\n     event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n \r\n   \r\n"
                },
                {
                    "date": 1747848101450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,27 +147,9 @@\n       address: this.editedClientData.address,\r\n       phone: this.editedClientData.phone\r\n     };\r\n \r\n-    // Assurez-vous que votre CommercialService a une méthode updateClient\r\n-    // Exemple: this.commercialService.updateClient(clientId, updatePayload).subscribe({\r\n-    //   next: (updatedClientFromServer) => {\r\n-    //     const index = this.clients.findIndex(c => c.id === clientId);\r\n-    //     if (index !== -1) {\r\n-    //       // Mettre à jour avec les données du serveur ou les données locales si le serveur ne renvoie pas tout\r\n-    //       this.clients[index] = { ...this.clients[index], ...updatePayload }; // Ou ...updatedClientFromServer\r\n-    //       this.applyFilter(); // Rafraîchir la liste filtrée\r\n-    //     }\r\n-    //     this.cancelEdit(); // Sortir du mode édition\r\n-    //     console.log('Client mis à jour avec succès', updatedClientFromServer);\r\n-    //   },\r\n-    //   error: (err) => {\r\n-    //     console.error('Erreur lors de la mise à jour du client', err);\r\n-    //     // Peut-être afficher un message d'erreur à l'utilisateur\r\n-    //   }\r\n-    // });\r\n-\r\n-    // Simulation de la sauvegarde\r\n+    \r\n     console.log('Sauvegarde des modifications pour le client:', clientId, this.editedClientData);\r\n     const index = this.clients.findIndex(c => c.id === clientId);\r\n     if (index !== -1) {\r\n         this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n"
                },
                {
                    "date": 1747848503533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,10 +141,9 @@\n   saveEdit(clientId: string, event: Event): void {\r\n     event.stopPropagation();\r\n     if (!this.editedClientData || this.editingClientId !== clientId) return;\r\n \r\n-    // Préparez les données à envoyer (uniquement les champs modifiés si nécessaire, ou l'objet entier)\r\n-    const updatePayload: Partial<Client> = {\r\n+    const updatePayload = {\r\n       address: this.editedClientData.address,\r\n       phone: this.editedClientData.phone\r\n     };\r\n \r\n"
                },
                {
                    "date": 1747848524117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,19 +145,31 @@\n     const updatePayload = {\r\n       address: this.editedClientData.address,\r\n       phone: this.editedClientData.phone\r\n     };\r\n+ this.commercialService.updateClient(clientId, updatePayload).subscribe({\r\n+      next: (updatedClient) => {\r\n+        console.log('Client mis à jour avec succès:', updatedClient);\r\n+        // Mettre à jour le client dans la liste locale\r\n+        const index = this.clients.findIndex(c => c.id === clientId);\r\n+        if (index !== -1) {\r\n+          // Si le backend renvoie l'objet client complet mis à jour\r\n+          this.clients[index] = { ...this.clients[index], ...updatedClient };\r\n+          // Sinon, si le backend ne renvoie que les champs mis à jour ou un statut de succès:\r\n+          // this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n+        }\r\n+        this.applyFilter(); // Mettre à jour la liste filtrée\r\n+        this.cancelEdit(); // Quitter le mode édition\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Erreur lors de la mise à jour du client:', err);\r\n+        // Afficher un message d'erreur à l'utilisateur si nécessaire\r\n+        // Par exemple, en utilisant une variable pour un message d'erreur dans le template\r\n+        // this.errorMessage = \"La mise à jour a échoué. Veuillez réessayer.\";\r\n+        // Optionnellement, ne pas quitter le mode édition pour permettre à l'utilisateur de réessayer\r\n+      }\r\n+    }); }\r\n \r\n-    \r\n-    console.log('Sauvegarde des modifications pour le client:', clientId, this.editedClientData);\r\n-    const index = this.clients.findIndex(c => c.id === clientId);\r\n-    if (index !== -1) {\r\n-        this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n-        this.applyFilter();\r\n-    }\r\n-    this.cancelEdit(); // Quitte le mode édition après la simulation\r\n-  }\r\n-\r\n   cancelEdit(event?: Event): void {\r\n     if(event) event.stopPropagation();\r\n     this.editingClientId = null;\r\n     this.editedClientData = {};\r\n"
                },
                {
                    "date": 1747848648330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,10 +153,9 @@\n         const index = this.clients.findIndex(c => c.id === clientId);\r\n         if (index !== -1) {\r\n           // Si le backend renvoie l'objet client complet mis à jour\r\n           this.clients[index] = { ...this.clients[index], ...updatedClient };\r\n-          // Sinon, si le backend ne renvoie que les champs mis à jour ou un statut de succès:\r\n-          // this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n+        \r\n         }\r\n         this.applyFilter(); // Mettre à jour la liste filtrée\r\n         this.cancelEdit(); // Quitter le mode édition\r\n       },\r\n"
                },
                {
                    "date": 1747848667932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,17 +143,18 @@\n     if (!this.editedClientData || this.editingClientId !== clientId) return;\r\n \r\n     const updatePayload = {\r\n       address: this.editedClientData.address,\r\n-      phone: this.editedClientData.phone\r\n+      phone: this.editedClientData.phone,\r\n+      \r\n     };\r\n  this.commercialService.updateClient(clientId, updatePayload).subscribe({\r\n       next: (updatedClient) => {\r\n         console.log('Client mis à jour avec succès:', updatedClient);\r\n         // Mettre à jour le client dans la liste locale\r\n         const index = this.clients.findIndex(c => c.id === clientId);\r\n         if (index !== -1) {\r\n-          // Si le backend renvoie l'objet client complet mis à jour\r\n+    \r\n           this.clients[index] = { ...this.clients[index], ...updatedClient };\r\n         \r\n         }\r\n         this.applyFilter(); // Mettre à jour la liste filtrée\r\n"
                },
                {
                    "date": 1747848697064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   searchQuery: string = '';\r\n   viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n \r\n   editingClientId: string | null = null;\r\n-  editedClientData: { address?: string; phone?: string } = {}; // Pour l'édition en ligne (adresse et téléphone uniquement)\r\n+  editedClientData: { address?: string; phone?: string, } = {}; // Pour l'édition en ligne (adresse et téléphone uniquement)\r\n \r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n@@ -144,9 +144,9 @@\n \r\n     const updatePayload = {\r\n       address: this.editedClientData.address,\r\n       phone: this.editedClientData.phone,\r\n-      \r\n+\r\n     };\r\n  this.commercialService.updateClient(clientId, updatePayload).subscribe({\r\n       next: (updatedClient) => {\r\n         console.log('Client mis à jour avec succès:', updatedClient);\r\n"
                },
                {
                    "date": 1747848702631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   searchQuery: string = '';\r\n   viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n \r\n   editingClientId: string | null = null;\r\n-  editedClientData: { address?: string; phone?: string, } = {}; // Pour l'édition en ligne (adresse et téléphone uniquement)\r\n+  editedClientData: { address?: string; phone?: string } = {}; // Pour l'édition en ligne (adresse et téléphone uniquement)\r\n \r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n"
                },
                {
                    "date": 1747849036424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,12 +121,22 @@\n     event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n \r\n   \r\n     if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n-   \r\n-      this.clients = this.clients.filter(c => c.id !== clientId);\r\n-      this.applyFilter();\r\n-      console.log('Client supprimé (simulation):', clientId);\r\n+   this.commercialService.deleteClient(clientId).subscribe({\r\n+        next: () => {\r\n+          console.log('Client supprimé avec succès:', clientId);\r\n+          // Mettre à jour la liste locale des clients\r\n+          this.clients = this.clients.filter(c => c.id !== clientId);\r\n+          this.applyFilter(); // Mettre à jour la liste filtrée\r\n+          // Afficher une notification de succès si nécessaire\r\n+        },\r\n+        error: (err) => {\r\n+          console.error('Erreur lors de la suppression du client:', err);\r\n+          // Afficher un message d'erreur à l'utilisateur\r\n+          // Par exemple: alert(err.message || 'La suppression a échoué.');\r\n+        }\r\n+      });\r\n     }\r\n   }\r\n   startEdit(client: Client, event: MouseEvent): void {\r\n     event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n"
                },
                {
                    "date": 1747849042926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,17 +124,12 @@\n     if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n    this.commercialService.deleteClient(clientId).subscribe({\r\n         next: () => {\r\n           console.log('Client supprimé avec succès:', clientId);\r\n-          // Mettre à jour la liste locale des clients\r\n           this.clients = this.clients.filter(c => c.id !== clientId);\r\n-          this.applyFilter(); // Mettre à jour la liste filtrée\r\n-          // Afficher une notification de succès si nécessaire\r\n         },\r\n         error: (err) => {\r\n           console.error('Erreur lors de la suppression du client:', err);\r\n-          // Afficher un message d'erreur à l'utilisateur\r\n-          // Par exemple: alert(err.message || 'La suppression a échoué.');\r\n         }\r\n       });\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1747849142210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,12 +117,19 @@\n \r\n   \r\n \r\n   deleteClient(clientId: string, event: MouseEvent): void {\r\n-    event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n-\r\n-  \r\n-    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n+    event.stopPropagation();  \r\n+    iconst modalRef = this.modalService.open(ConfirmationDialogComponent, {\r\n+            centered: true,\r\n+            windowClass: 'confirmation-modal'\r\n+        });\r\n+    \r\n+        modalRef.componentInstance.message = `Voulez-vous vraiment supprimer l'utilisateur `;\r\n+        modalRef.componentInstance.username = user.username; // Pass username for confirmation if needed\r\n+    \r\n+        modalRef.result.then((confirm) => {\r\n+            if (confirm) {\r\n    this.commercialService.deleteClient(clientId).subscribe({\r\n         next: () => {\r\n           console.log('Client supprimé avec succès:', clientId);\r\n           this.clients = this.clients.filter(c => c.id !== clientId);\r\n"
                },
                {
                    "date": 1747849160086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n   \r\n \r\n   deleteClient(clientId: string, event: MouseEvent): void {\r\n     event.stopPropagation();  \r\n-    iconst modalRef = this.modalService.open(ConfirmationDialogComponent, {\r\n+    const modalRef = this.modalService.open(ConfirmationDialogComponent, {\r\n             centered: true,\r\n             windowClass: 'confirmation-modal'\r\n         });\r\n     \r\n"
                },
                {
                    "date": 1747849172829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { CommercialService } from '../services/commercial.service';\r\n import { AuthService } from '../services/auth.service';\r\n import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n import { ClientFormComponent } from '../client-form/client-form.component';\r\n+import { ConfirmationDialogComponent } from '../super-admin/confirmation-dialog/confirmation-dialog.component';\r\n // import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n // import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n // Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n@@ -123,9 +124,9 @@\n             centered: true,\r\n             windowClass: 'confirmation-modal'\r\n         });\r\n     \r\n-        modalRef.componentInstance.message = `Voulez-vous vraiment supprimer l'utilisateur `;\r\n+        modalRef.componentInstance.message = `Voulez-vous vraiment supprimer ce client `;\r\n         modalRef.componentInstance.username = user.username; // Pass username for confirmation if needed\r\n     \r\n         modalRef.result.then((confirm) => {\r\n             if (confirm) {\r\n"
                },
                {
                    "date": 1747849186355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n             windowClass: 'confirmation-modal'\r\n         });\r\n     \r\n         modalRef.componentInstance.message = `Voulez-vous vraiment supprimer ce client `;\r\n-        modalRef.componentInstance.username = user.username; // Pass username for confirmation if needed\r\n+        //modalRef.componentInstance.username = user.username; // Pass username for confirmation if needed\r\n     \r\n         modalRef.result.then((confirm) => {\r\n             if (confirm) {\r\n    this.commercialService.deleteClient(clientId).subscribe({\r\n"
                },
                {
                    "date": 1747849226203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,12 @@\n         error: (err) => {\r\n           console.error('Erreur lors de la suppression du client:', err);\r\n         }\r\n       });\r\n-    }\r\n+    }}\r\n+    }).catch(() => {\r\n+        console.log('Suppression annulée');\r\n+    });\r\n   }\r\n   startEdit(client: Client, event: MouseEvent): void {\r\n     event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n     this.editingClientId = client.id;\r\n"
                },
                {
                    "date": 1747849383010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,35 +116,40 @@\n         );\r\n   }\r\n \r\n   \r\n+deleteClient(clientId: string, event: MouseEvent): void {\r\n+    event.stopPropagation();\r\n+    \r\n+    const modalRef = this.modalService.open(ConfirmationDialogComponent, {\r\n+        centered: true,\r\n+        windowClass: 'confirmation-modal'\r\n+    });\r\n \r\n-  deleteClient(clientId: string, event: MouseEvent): void {\r\n-    event.stopPropagation();  \r\n-    const modalRef = this.modalService.open(ConfirmationDialogComponent, {\r\n-            centered: true,\r\n-            windowClass: 'confirmation-modal'\r\n-        });\r\n+    modalRef.componentInstance.message = `Voulez-vous vraiment supprimer ce client ?`;\r\n     \r\n-        modalRef.componentInstance.message = `Voulez-vous vraiment supprimer ce client `;\r\n-        //modalRef.componentInstance.username = user.username; // Pass username for confirmation if needed\r\n-    \r\n-        modalRef.result.then((confirm) => {\r\n-            if (confirm) {\r\n-   this.commercialService.deleteClient(clientId).subscribe({\r\n-        next: () => {\r\n-          console.log('Client supprimé avec succès:', clientId);\r\n-          this.clients = this.clients.filter(c => c.id !== clientId);\r\n-        },\r\n-        error: (err) => {\r\n-          console.error('Erreur lors de la suppression du client:', err);\r\n+    modalRef.result.then((confirm) => {\r\n+        if (confirm) {\r\n+            this.commercialService.deleteClient(clientId).subscribe({\r\n+                next: () => {\r\n+                    console.log('Client supprimé avec succès:', clientId);\r\n+                    this.clients = this.clients.filter(c => c.id !== clientId);\r\n+                    // Optionnel : Ajouter un toast/message de succès\r\n+                    this.toastService.success('Client supprimé avec succès');\r\n+                },\r\n+                error: (err) => {\r\n+                    console.error('Erreur lors de la suppression du client:', err);\r\n+                    // Optionnel : Ajouter un toast/message d'erreur\r\n+                    this.toastService.error('Échec de la suppression du client');\r\n+                }\r\n+            });\r\n         }\r\n-      });\r\n-    }}\r\n     }).catch(() => {\r\n         console.log('Suppression annulée');\r\n+        // Optionnel : Ajouter un toast/message d'annulation\r\n+        this.toastService.info('Suppression annulée');\r\n     });\r\n-  }\r\n+}\r\n   startEdit(client: Client, event: MouseEvent): void {\r\n     event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n     this.editingClientId = client.id;\r\n     // Copier uniquement les champs modifiables\r\n"
                },
                {
                    "date": 1747849406622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n                 next: () => {\r\n                     console.log('Client supprimé avec succès:', clientId);\r\n                     this.clients = this.clients.filter(c => c.id !== clientId);\r\n                     // Optionnel : Ajouter un toast/message de succès\r\n-                    this.toastService.success('Client supprimé avec succès');\r\n+                    console.log('Client supprimé avec succès');\r\n                 },\r\n                 error: (err) => {\r\n                     console.error('Erreur lors de la suppression du client:', err);\r\n                     // Optionnel : Ajouter un toast/message d'erreur\r\n"
                },
                {
                    "date": 1747849420699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,10 +132,9 @@\n             this.commercialService.deleteClient(clientId).subscribe({\r\n                 next: () => {\r\n                     console.log('Client supprimé avec succès:', clientId);\r\n                     this.clients = this.clients.filter(c => c.id !== clientId);\r\n-                    // Optionnel : Ajouter un toast/message de succès\r\n-                    console.log('Client supprimé avec succès');\r\n+                    \r\n                 },\r\n                 error: (err) => {\r\n                     console.error('Erreur lors de la suppression du client:', err);\r\n                     // Optionnel : Ajouter un toast/message d'erreur\r\n"
                },
                {
                    "date": 1747849429446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,17 +136,14 @@\n                     \r\n                 },\r\n                 error: (err) => {\r\n                     console.error('Erreur lors de la suppression du client:', err);\r\n-                    // Optionnel : Ajouter un toast/message d'erreur\r\n-                    this.toastService.error('Échec de la suppression du client');\r\n-                }\r\n+                              }\r\n             });\r\n         }\r\n     }).catch(() => {\r\n         console.log('Suppression annulée');\r\n-        // Optionnel : Ajouter un toast/message d'annulation\r\n-        this.toastService.info('Suppression annulée');\r\n+       \r\n     });\r\n }\r\n   startEdit(client: Client, event: MouseEvent): void {\r\n     event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n"
                },
                {
                    "date": 1747849469916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n         centered: true,\r\n         windowClass: 'confirmation-modal'\r\n     });\r\n \r\n-    modalRef.componentInstance.message = `Voulez-vous vraiment supprimer ce client ?`;\r\n+    modalRef.componentInstance.message = `Voulez-vous vraiment supprimer ce client`;\r\n     \r\n     modalRef.result.then((confirm) => {\r\n         if (confirm) {\r\n             this.commercialService.deleteClient(clientId).subscribe({\r\n"
                },
                {
                    "date": 1747849513003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n             this.commercialService.deleteClient(clientId).subscribe({\r\n                 next: () => {\r\n                     console.log('Client supprimé avec succès:', clientId);\r\n                     this.clients = this.clients.filter(c => c.id !== clientId);\r\n-                    \r\n+                    this.applyFilter();\r\n                 },\r\n                 error: (err) => {\r\n                     console.error('Erreur lors de la suppression du client:', err);\r\n                               }\r\n"
                },
                {
                    "date": 1747956714183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,11 @@\n import { AuthService } from '../services/auth.service';\r\n import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n import { ClientFormComponent } from '../client-form/client-form.component';\r\n import { ConfirmationDialogComponent } from '../super-admin/confirmation-dialog/confirmation-dialog.component';\r\n-// import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n-// import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n+import { forkJoin, of } from 'rxjs';\r\n+import { switchMap, map, catchError } from 'rxjs/operators';\r\n \r\n-// Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n export interface Client {\r\n   id: string;\r\n   name: string;\r\n   address: string;\r\n"
                },
                {
                    "date": 1747956731967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n   email: string;\r\n   phone: string;\r\n   createdAt: number; // Ou Date, selon comment vous le gérez\r\n   idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n-  companyName?: string; // Optionnel si non utilisé directement dans le template\r\n-}\r\n+  companyName?: string;\r\n+  \r\n \r\n @Component({\r\n   selector: 'app-clients',\r\n   templateUrl: './clients.component.html',\r\n"
                },
                {
                    "date": 1747956753181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,13 @@\n   phone: string;\r\n   createdAt: number; // Ou Date, selon comment vous le gérez\r\n   idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n   companyName?: string;\r\n-  \r\n+  hasPassword?: boolean | undefined; // true, false, or undefined if not checked/error\r\n+  isLoadingCredentials?: boolean; // To show a loading spinner per row\r\n \r\n+}\r\n+\r\n @Component({\r\n   selector: 'app-clients',\r\n   templateUrl: './clients.component.html',\r\n   styleUrls: ['./clients.component.scss']\r\n@@ -54,12 +57,40 @@\n \r\n \r\n \r\n   loadClients(idCompany: string): void {\r\n-    this.commercialService.getClients(idCompany).subscribe({\r\n-      next: (data) => {\r\n-        console.log(\"les clients\",data)\r\n-        this.clients=data;\r\n+    this.commercialService.getClients(idCompany).pipe(\r\n+      switchMap(clients => {\r\n+        if (!clients || clients.length === 0) {\r\n+          return of([]);\r\n+        }\r\n+        // For each client, check Keycloak credentials\r\n+        const clientCredentialChecks$ = clients.map(client => {\r\n+          const typedClient = client as Client; // Ensure correct typing for new properties\r\n+          typedClient.isLoadingCredentials = true; \r\n+          // Assuming commercialService has a method checkKeycloakCredentials\r\n+          // that returns Observable<boolean>\r\n+          return this.commercialService.checkKeycloakCredentials(typedClient.id).pipe(\r\n+            map(hasPassword => {\r\n+              typedClient.hasPassword = hasPassword;\r\n+              typedClient.isLoadingCredentials = false;\r\n+              return typedClient;\r\n+            }),\r\n+            catchError(err => {\r\n+              console.error(`Error checking credentials for client ${typedClient.id}:`, err);\r\n+              typedClient.hasPassword = undefined; // Indicate error or unknown state\r\n+              typedClient.isLoadingCredentials = false;\r\n+              return of(typedClient); // Return the client even if credential check fails\r\n+            })\r\n+          );\r\n+        });\r\n+        return forkJoin(clientCredentialChecks$);\r\n+      })\r\n+    ).subscribe({\r\n+      next: (clientsWithPasswordStatus) => {\r\n+        console.log(\"Les clients avec statut mot de passe:\", clientsWithPasswordStatus);\r\n+        this.clients = clientsWithPasswordStatus as Client[];\r\n+ \r\n         this.applyFilter();\r\n       },\r\n       error: (err) => {\r\n         console.error('Error fetching invoices:', err);\r\n"
                },
                {
                    "date": 1747956766981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,11 @@\n  \r\n         this.applyFilter();\r\n       },\r\n       error: (err) => {\r\n-        console.error('Error fetching invoices:', err);\r\n+      console.error('Error fetching clients or their credentials:', err);\r\n+        this.clients = []; // Clear clients on error\r\n+        this.applyFilter();\r\n         \r\n       }\r\n     });\r\n     \r\n"
                },
                {
                    "date": 1747956782324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,5 +222,36 @@\n     if(event) event.stopPropagation();\r\n     this.editingClientId = null;\r\n     this.editedClientData = {};\r\n   }\r\n+  openSetPasswordModal(client: Client, event: MouseEvent): void {\r\n+    event.stopPropagation();\r\n+    // You will need to create SetPasswordModalComponent\r\n+    // For example: import { SetPasswordModalComponent } from '../set-password-modal/set-password-modal.component';\r\n+    // And ensure it's declared in your module and CommercialService has setKeycloakPassword method.\r\n+\r\n+    /*\r\n+    const modalRef = this.modalService.open(SetPasswordModalComponent, { // Replace with your actual modal component\r\n+      size: 'md',\r\n+      centered: true,\r\n+      backdrop: 'static',\r\n+      keyboard: false\r\n+    });\r\n+    modalRef.componentInstance.clientId = client.id; // Pass client ID to the modal\r\n+\r\n+    modalRef.result.then(\r\n+      (result) => {\r\n+        if (result === 'success') {\r\n+          console.log('Password set successfully for client:', client.id);\r\n+          client.hasPassword = true; // Update client's password status locally\r\n+          this.applyFilter(); // Refresh the view\r\n+        }\r\n+      },\r\n+      (reason) => {\r\n+        console.log(`Set password modal dismissed/cancelled: ${reason}`);\r\n+      }\r\n+    ).catch(() => console.log('Modal dismissed with error or backdrop click'));\r\n+    */\r\n+    alert(`TODO: Ouvrir le modal pour définir le mot de passe pour ${client.name} (ID: ${client.id}).\r\n+    Après succès, mettre à jour client.hasPassword = true.`);\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1747957509130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,9 @@\n         // For each client, check Keycloak credentials\r\n         const clientCredentialChecks$ = clients.map(client => {\r\n           const typedClient = client as Client; // Ensure correct typing for new properties\r\n           typedClient.isLoadingCredentials = true; \r\n-          // Assuming commercialService has a method checkKeycloakCredentials\r\n-          // that returns Observable<boolean>\r\n+   \r\n           return this.commercialService.checkKeycloakCredentials(typedClient.id).pipe(\r\n             map(hasPassword => {\r\n               typedClient.hasPassword = hasPassword;\r\n               typedClient.isLoadingCredentials = false;\r\n"
                },
                {
                    "date": 1747957515255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,10 @@\n           return of([]);\r\n         }\r\n         // For each client, check Keycloak credentials\r\n         const clientCredentialChecks$ = clients.map(client => {\r\n-          const typedClient = client as Client; // Ensure correct typing for new properties\r\n-          typedClient.isLoadingCredentials = true; \r\n+          const typedClient = client as Client; \r\n+                    typedClient.isLoadingCredentials = true; \r\n    \r\n           return this.commercialService.checkKeycloakCredentials(typedClient.id).pipe(\r\n             map(hasPassword => {\r\n               typedClient.hasPassword = hasPassword;\r\n"
                },
                {
                    "date": 1747957838209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         }\r\n         // For each client, check Keycloak credentials\r\n         const clientCredentialChecks$ = clients.map(client => {\r\n           const typedClient = client as Client; \r\n-                    typedClient.isLoadingCredentials = true; \r\n+           typedClient.isLoadingCredentials = true; \r\n    \r\n           return this.commercialService.checkKeycloakCredentials(typedClient.id).pipe(\r\n             map(hasPassword => {\r\n               typedClient.hasPassword = hasPassword;\r\n@@ -223,15 +223,10 @@\n     this.editedClientData = {};\r\n   }\r\n   openSetPasswordModal(client: Client, event: MouseEvent): void {\r\n     event.stopPropagation();\r\n-    // You will need to create SetPasswordModalComponent\r\n-    // For example: import { SetPasswordModalComponent } from '../set-password-modal/set-password-modal.component';\r\n-    // And ensure it's declared in your module and CommercialService has setKeycloakPassword method.\r\n-\r\n-    /*\r\n-    const modalRef = this.modalService.open(SetPasswordModalComponent, { // Replace with your actual modal component\r\n-      size: 'md',\r\n+    const modalRef = this.modalService.open(SetPasswordModalComponent, {\r\n+          size: 'md',\r\n       centered: true,\r\n       backdrop: 'static',\r\n       keyboard: false\r\n     });\r\n"
                },
                {
                    "date": 1747957843470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n     this.editedClientData = {};\r\n   }\r\n   openSetPasswordModal(client: Client, event: MouseEvent): void {\r\n     event.stopPropagation();\r\n-    const modalRef = this.modalService.open(SetPasswordModalComponent, {\r\n+    const modalRef = this.modalService.open(SetPasswordComponent, {\r\n           size: 'md',\r\n       centered: true,\r\n       backdrop: 'static',\r\n       keyboard: false\r\n"
                },
                {
                    "date": 1747957867041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import { ClientFormComponent } from '../client-form/client-form.component';\r\n import { ConfirmationDialogComponent } from '../super-admin/confirmation-dialog/confirmation-dialog.component';\r\n import { forkJoin, of } from 'rxjs';\r\n import { switchMap, map, catchError } from 'rxjs/operators';\r\n+import { SetPasswordComponent } from '../set-password/set-password.component';\r\n \r\n export interface Client {\r\n   id: string;\r\n   name: string;\r\n@@ -229,9 +230,10 @@\n       centered: true,\r\n       backdrop: 'static',\r\n       keyboard: false\r\n     });\r\n-    modalRef.componentInstance.clientId = client.id; // Pass client ID to the modal\r\n+modalRef.componentInstance.clientId = client.id;\r\n+    modalRef.componentInstance.clientName = client.name; // Passer le nom du client pour l'affichage\r\n \r\n     modalRef.result.then(\r\n       (result) => {\r\n         if (result === 'success') {\r\n"
                },
                {
                    "date": 1747957888270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,10 +237,15 @@\n     modalRef.result.then(\r\n       (result) => {\r\n         if (result === 'success') {\r\n           console.log('Password set successfully for client:', client.id);\r\n-          client.hasPassword = true; // Update client's password status locally\r\n-          this.applyFilter(); // Refresh the view\r\n+          // Re-vérifier le statut ou simplement le mettre à jour localement\r\n+          const foundClient = this.clients.find(c => c.id === client.id);\r\n+          if (foundClient) {\r\n+            foundClient.hasPassword = true;\r\n+          }\r\n+          this.applyFilter(); // Rafraîchir la vue\r\n+      \r\n         }\r\n       },\r\n       (reason) => {\r\n         console.log(`Set password modal dismissed/cancelled: ${reason}`);\r\n"
                },
                {
                    "date": 1747957902400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,7 @@\n       (reason) => {\r\n         console.log(`Set password modal dismissed/cancelled: ${reason}`);\r\n       }\r\n     ).catch(() => console.log('Modal dismissed with error or backdrop click'));\r\n-    */\r\n-    alert(`TODO: Ouvrir le modal pour définir le mot de passe pour ${client.name} (ID: ${client.id}).\r\n-    Après succès, mettre à jour client.hasPassword = true.`);\r\n+    \r\n   }\r\n }\r\n"
                }
            ],
            "date": 1746446042482,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-clients',\r\n  templateUrl: './clients.component.html',\r\n  styleUrl: './clients.component.scss',\r\n  standalone: false\r\n})\r\nexport class ClientsComponent {\r\n\r\n}\r\n"
        }
    ]
}