{
    "sourceFile": "src/app/invoice/invoice.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 54,
            "patches": [
                {
                    "date": 1747865170128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747865179166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n-export class InvoiceComponent {\r\n+export class InvoiceComponent implements OnInit {\r\n  invoiceForm!: FormGroup;\r\n \r\n   // Example: Clients data would typically be fetched from a service or passed as Input\r\n   @Input() clients: Client[] = [\r\n"
                },
                {
                    "date": 1747865185074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n+import { FormGroup } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n"
                },
                {
                    "date": 1747865190402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n export class InvoiceComponent implements OnInit {\r\n  invoiceForm!: FormGroup;\r\n \r\n   // Example: Clients data would typically be fetched from a service or passed as Input\r\n-  @Input() clients: Client[] = [\r\n+  @Input() clients: any[] = [\r\n     { id: '43d58cef-7977-4765-8f51-903270322a23', name: 'Slim (Client Example)' },\r\n     { id: 'client-id-002', name: 'Another Client Corp.' }\r\n   ];\r\n   // Example: Company ID might come from user context or another service\r\n"
                },
                {
                    "date": 1747865201044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, OnInit } from '@angular/core';\r\n+import { Component, Input, OnInit, Output } from '@angular/core';\r\n import { FormGroup } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n"
                },
                {
                    "date": 1747865217760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, Input, OnInit, Output } from '@angular/core';\r\n+import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n import { FormGroup } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n"
                },
                {
                    "date": 1747865223008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n-import { FormGroup } from '@angular/forms';\r\n+import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n"
                },
                {
                    "date": 1747865262645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,20 @@\n import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n-import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n+import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n+  imports: [\r\n+    CommonModule,\r\n+    ReactiveFormsModule,\r\n+    MatCardModule,\r\n+    MatFormFieldModule,\r\n+    MatInputModule,\r\n+    MatSelectModule,\r\n+    MatButtonModule,\r\n+    MatIconModule,\r\n+    TextFieldModule // For CdkTextareaAutosize\r\n+  ],\r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n"
                },
                {
                    "date": 1747865268107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n+import { CommonModule } from '@angular/common';\r\n import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n-import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n+import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   imports: [\r\n"
                },
                {
                    "date": 1747865276248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import { CommonModule } from '@angular/common';\r\n import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n+import { MatCardModule } from '@angular/material/card';\r\n+import { MatFormFieldModule } from '@angular/material/form-field';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   imports: [\r\n"
                },
                {
                    "date": 1747865281620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n+import { TextFieldModule } from '@angular/cdk/text-field';\r\n import { CommonModule } from '@angular/common';\r\n import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n import { MatCardModule } from '@angular/material/card';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n+import { MatInputModule } from '@angular/material/input';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   imports: [\r\n"
                },
                {
                    "date": 1747865287552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n import { TextFieldModule } from '@angular/cdk/text-field';\r\n import { CommonModule } from '@angular/common';\r\n import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n+import { MatButtonModule } from '@angular/material/button';\r\n import { MatCardModule } from '@angular/material/card';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n+import { MatIconModule } from '@angular/material/icon';\r\n import { MatInputModule } from '@angular/material/input';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n"
                },
                {
                    "date": 1747865306022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,13 @@\n import { MatCardModule } from '@angular/material/card';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n import { MatIconModule } from '@angular/material/icon';\r\n import { MatInputModule } from '@angular/material/input';\r\n+import { MatSelectModule } from '@angular/material/select';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n+  standalone: true,\r\n   imports: [\r\n     CommonModule,\r\n     ReactiveFormsModule,\r\n     MatCardModule,\r\n"
                },
                {
                    "date": 1747865314750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,19 +11,9 @@\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   standalone: true,\r\n-  imports: [\r\n-    CommonModule,\r\n-    ReactiveFormsModule,\r\n-    MatCardModule,\r\n-    MatFormFieldModule,\r\n-    MatInputModule,\r\n-    MatSelectModule,\r\n-    MatButtonModule,\r\n-    MatIconModule,\r\n-    TextFieldModule // For CdkTextareaAutosize\r\n-  ],\r\n+  \r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n"
                },
                {
                    "date": 1747865657125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,8 @@\n import { MatSelectModule } from '@angular/material/select';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n-  standalone: true,\r\n-  \r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n"
                },
                {
                    "date": 1747867442460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,67 +14,44 @@\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n- invoiceForm!: FormGroup;\r\n+ invoice = {\r\n+    number: 1,\r\n+    from: '',\r\n+    to: '',\r\n+    shippingAddress: '',\r\n+    date: '',\r\n+    paymentTerms: '',\r\n+    dueDate: '',\r\n+    purchaseOrder: '',\r\n+    items: [\r\n+      { description: '', quantity: 1, unitPrice: 0 }\r\n+    ],\r\n+    notes: '',\r\n+    terms: '',\r\n+    taxRate: 0,\r\n+    discount: 0,\r\n+    shipping: 0,\r\n+    paid: 0\r\n+  };\r\n \r\n-  // Example: Clients data would typically be fetched from a service or passed as Input\r\n-  @Input() clients: any[] = [\r\n-    { id: '43d58cef-7977-4765-8f51-903270322a23', name: 'Slim (Client Example)' },\r\n-    { id: 'client-id-002', name: 'Another Client Corp.' }\r\n-  ];\r\n-  // Example: Company ID might come from user context or another service\r\n-  @Input() currentCompanyId: string = '680657ad26cbca08d31f221c';\r\n+  subtotal = 0;\r\n+  total = 0;\r\n+  balance = 0;\r\n \r\n-  @Output() invoiceSubmitted = new EventEmitter<any>();\r\n-  @Output() cancel = new EventEmitter<void>();\r\n-\r\n-  constructor(private fb: FormBuilder) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    this.invoiceForm = this.fb.group({\r\n-      companyId: [this.currentCompanyId, Validators.required],\r\n-      clientId: ['', Validators.required],\r\n-      documentType: ['INVOICE', Validators.required], // Defaulted to INVOICE\r\n-      discount: [0, [Validators.required, Validators.min(0), Validators.max(100)]],\r\n-      notes: [''],\r\n-      lines: this.fb.array([], [Validators.required, Validators.minLength(1)]) // Invoice must have at least one line\r\n-    });\r\n-    this.addInvoiceLine(); // Start with one empty line item\r\n+  addItem() {\r\n+    this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n+    this.calculateTotals();\r\n   }\r\n \r\n-  get linesArray(): FormArray {\r\n-    return this.invoiceForm.get('lines') as FormArray;\r\n-  }\r\n+  calculateTotals() {\r\n+    this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n+      return sum + (item.quantity * item.unitPrice);\r\n+    }, 0);\r\n \r\n-  createInvoiceLine(): FormGroup {\r\n-    return this.fb.group({\r\n-      description: ['', Validators.required],\r\n-      quantity: [1, [Validators.required, Validators.min(1)]],\r\n-      unitPrice: [0, [Validators.required, Validators.min(0)]]\r\n-    });\r\n+    const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n+    this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n+    this.balance = this.total - (this.invoice.paid || 0);\r\n   }\r\n-\r\n-  addInvoiceLine(): void {\r\n-    this.linesArray.push(this.createInvoiceLine());\r\n-  }\r\n-\r\n-  removeInvoiceLine(index: number): void {\r\n-    // Prevent removing the last line if you always want at least one\r\n-    if (this.linesArray.length > 1) {\r\n-      this.linesArray.removeAt(index);\r\n-    }\r\n-  }\r\n-\r\n-  onSubmit(): void {\r\n-    if (this.invoiceForm.valid) {\r\n-      this.invoiceSubmitted.emit(this.invoiceForm.value);\r\n-    } else {\r\n-      this.invoiceForm.markAllAsTouched(); // Helper to show validation errors\r\n-      console.error('Form is invalid. Please check all fields.');\r\n-    }\r\n-  }\r\n-\r\n-  onCancel(): void {\r\n-    this.cancel.emit();\r\n-  }\r\n }\r\n+}\r\n"
                },
                {
                    "date": 1747867456451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,11 @@\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n+  ngOnInit(): void {\r\n+    throw new Error('Method not implemented.');\r\n+  }\r\n  invoice = {\r\n     number: 1,\r\n     from: '',\r\n     to: '',\r\n@@ -53,5 +56,4 @@\n     this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n     this.balance = this.total - (this.invoice.paid || 0);\r\n   }\r\n }\r\n-}\r\n"
                },
                {
                    "date": 1747867632143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,4 @@\n-import { TextFieldModule } from '@angular/cdk/text-field';\r\n-import { CommonModule } from '@angular/common';\r\n-import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n-import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n-import { MatButtonModule } from '@angular/material/button';\r\n-import { MatCardModule } from '@angular/material/card';\r\n-import { MatFormFieldModule } from '@angular/material/form-field';\r\n-import { MatIconModule } from '@angular/material/icon';\r\n-import { MatInputModule } from '@angular/material/input';\r\n-import { MatSelectModule } from '@angular/material/select';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n"
                },
                {
                    "date": 1747867660794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+import { Component, OnInit } from '@angular/core';\r\n+\r\n+@Component({\r\n+  selector: 'app-invoice',\r\n+  templateUrl: './invoice.component.html',\r\n+  styleUrl: './invoice.component.scss'\r\n+})\r\n+export class InvoiceComponent implements OnInit {\r\n+  ngOnInit(): void {\r\n+    this.calculateDueDate(); // Calculer la date d'échéance initiale\r\n+    this.calculateTotals();\r\n+  }\r\n+ invoice = {\r\n+    number: 1,\r\n+    from: '',\r\n+    to: '',\r\n+    shippingAddress: '',\r\n+    date: '',\r\n+    paymentTerms: '',\r\n+    dueDate: '',\r\n+    purchaseOrder: '',\r\n+    items: [\r\n+      { description: '', quantity: 1, unitPrice: 0 }\r\n+    ],\r\n+    notes: '',\r\n+    terms: '',\r\n+    taxRate: 0,\r\n+    discount: 0,\r\n+    shipping: 0,\r\n+    paid: 0\r\n+  };\r\n+\r\n+  subtotal = 0;\r\n+  total = 0;\r\n+  balance = 0;\r\n+\r\n+  addItem() {\r\n+    this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n+    this.calculateTotals();\r\n+  }\r\n+\r\n+  calculateTotals() {\r\n+    this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n+      return sum + (item.quantity * item.unitPrice);\r\n+    }, 0);\r\n+\r\n+    const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n+    this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n+    this.balance = this.total - (this.invoice.paid || 0);\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1747867671633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,12 @@\n     this.calculateDueDate(); // Calculer la date d'échéance initiale\r\n     this.calculateTotals();\r\n   }\r\n  invoice = {\r\n-    number: 1,\r\n-    from: '',\r\n-    to: '',\r\n+    number: this.generateInvoiceNumber(),\r\n+    from: 'Votre Nom/Société\\nVotre Adresse\\nVille, Code Postal',\r\n+    to: 'Nom du Client\\nAdresse du Client\\nVille, Code Postal',\r\n+ \r\n     shippingAddress: '',\r\n     date: '',\r\n     paymentTerms: '',\r\n     dueDate: '',\r\n@@ -48,53 +49,4 @@\n     this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n     this.balance = this.total - (this.invoice.paid || 0);\r\n   }\r\n }\r\n-\r\n-@Component({\r\n-  selector: 'app-invoice',\r\n-  templateUrl: './invoice.component.html',\r\n-  styleUrl: './invoice.component.scss'\r\n-})\r\n-export class InvoiceComponent implements OnInit {\r\n-  ngOnInit(): void {\r\n-    throw new Error('Method not implemented.');\r\n-  }\r\n- invoice = {\r\n-    number: 1,\r\n-    from: '',\r\n-    to: '',\r\n-    shippingAddress: '',\r\n-    date: '',\r\n-    paymentTerms: '',\r\n-    dueDate: '',\r\n-    purchaseOrder: '',\r\n-    items: [\r\n-      { description: '', quantity: 1, unitPrice: 0 }\r\n-    ],\r\n-    notes: '',\r\n-    terms: '',\r\n-    taxRate: 0,\r\n-    discount: 0,\r\n-    shipping: 0,\r\n-    paid: 0\r\n-  };\r\n-\r\n-  subtotal = 0;\r\n-  total = 0;\r\n-  balance = 0;\r\n-\r\n-  addItem() {\r\n-    this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n-    this.calculateTotals();\r\n-  }\r\n-\r\n-  calculateTotals() {\r\n-    this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n-      return sum + (item.quantity * item.unitPrice);\r\n-    }, 0);\r\n-\r\n-    const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n-    this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n-    this.balance = this.total - (this.invoice.paid || 0);\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1747867696442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,11 @@\n     from: 'Votre Nom/Société\\nVotre Adresse\\nVille, Code Postal',\r\n     to: 'Nom du Client\\nAdresse du Client\\nVille, Code Postal',\r\n  \r\n     shippingAddress: '',\r\n-    date: '',\r\n-    paymentTerms: '',\r\n+     date: new Date().toISOString().split('T')[0], // Date actuelle par défaut\r\n+    paymentTerms: 'Net 30',\r\n+  \r\n     dueDate: '',\r\n     purchaseOrder: '',\r\n     items: [\r\n       { description: '', quantity: 1, unitPrice: 0 }\r\n"
                },
                {
                    "date": 1747867704890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n       { description: '', quantity: 1, unitPrice: 0 }\r\n     ],\r\n     notes: '',\r\n     terms: '',\r\n-    taxRate: 0,\r\n+    taxRate: 20,\r\n     discount: 0,\r\n     shipping: 0,\r\n     paid: 0\r\n   };\r\n"
                },
                {
                    "date": 1747867715342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,18 @@\n   subtotal = 0;\r\n   total = 0;\r\n   balance = 0;\r\n \r\n-  addItem() {\r\n+ private generateInvoiceNumber(): string {\r\n+    const date = new Date();\r\n+    const year = date.getFullYear();\r\n+    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n+    const day = date.getDate().toString().padStart(2, '0');\r\n+    const randomSuffix = Math.random().toString(36).substring(2, 6).toUpperCase();\r\n+    return `INV-${year}${month}${day}-${randomSuffix}`;\r\n+  }\r\n+\r\n+  addItem(): void {\r\n     this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n     this.calculateTotals();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1747867725898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,16 @@\n     this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n     this.calculateTotals();\r\n   }\r\n \r\n-  calculateTotals() {\r\n+  removeItem(index: number): void {\r\n+    if (this.invoice.items.length > 1) { // Empêche la suppression du dernier article\r\n+      this.invoice.items.splice(index, 1);\r\n+      this.calculateTotals();\r\n+    }\r\n+  }\r\n+\r\n+  calculateTotals(): void {\r\n     this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n       return sum + (item.quantity * item.unitPrice);\r\n     }, 0);\r\n \r\n"
                },
                {
                    "date": 1747867733779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,5 +65,28 @@\n     const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n     this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n     this.balance = this.total - (this.invoice.paid || 0);\r\n   }\r\n+   calculateDueDate(): void {\r\n+    if (this.invoice.date && this.invoice.paymentTerms) {\r\n+      const date = new Date(this.invoice.date);\r\n+      const termsMatch = this.invoice.paymentTerms.match(/Net (\\d+)/i);\r\n+      if (termsMatch && termsMatch[1]) {\r\n+        const days = parseInt(termsMatch[1], 10);\r\n+        date.setDate(date.getDate() + days);\r\n+        this.invoice.dueDate = date.toISOString().split('T')[0];\r\n+      } else {\r\n+        this.invoice.dueDate = ''; // Ou une logique par défaut\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  onDateOrTermsChange(): void {\r\n+    this.calculateDueDate();\r\n+  }\r\n+\r\n+  saveInvoice(): void {\r\n+    console.log('Invoice data to save:', this.invoice);\r\n+    // Ici, vous appelleriez un service pour sauvegarder la facture.\r\n+    alert('Facture enregistrée (vérifiez la console pour les données)!');\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1747867810348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,28 +65,6 @@\n     const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n     this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n     this.balance = this.total - (this.invoice.paid || 0);\r\n   }\r\n-   calculateDueDate(): void {\r\n-    if (this.invoice.date && this.invoice.paymentTerms) {\r\n-      const date = new Date(this.invoice.date);\r\n-      const termsMatch = this.invoice.paymentTerms.match(/Net (\\d+)/i);\r\n-      if (termsMatch && termsMatch[1]) {\r\n-        const days = parseInt(termsMatch[1], 10);\r\n-        date.setDate(date.getDate() + days);\r\n-        this.invoice.dueDate = date.toISOString().split('T')[0];\r\n-      } else {\r\n-        this.invoice.dueDate = ''; // Ou une logique par défaut\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  onDateOrTermsChange(): void {\r\n-    this.calculateDueDate();\r\n-  }\r\n-\r\n-  saveInvoice(): void {\r\n-    console.log('Invoice data to save:', this.invoice);\r\n-    // Ici, vous appelleriez un service pour sauvegarder la facture.\r\n-    alert('Facture enregistrée (vérifiez la console pour les données)!');\r\n-  }\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1747867816486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,39 @@\n-import { Component, OnInit } from '@angular/core';\r\n+import { TextFieldModule } from '@angular/cdk/text-field';\r\n+import { CommonModule } from '@angular/common';\r\n+import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n+import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n+import { MatButtonModule } from '@angular/material/button';\r\n+import { MatCardModule } from '@angular/material/card';\r\n+import { MatFormFieldModule } from '@angular/material/form-field';\r\n+import { MatIconModule } from '@angular/material/icon';\r\n+import { MatInputModule } from '@angular/material/input';\r\n+import { MatSelectModule } from '@angular/material/select';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n   ngOnInit(): void {\r\n-    this.calculateDueDate(); // Calculer la date d'échéance initiale\r\n-    this.calculateTotals();\r\n+    throw new Error('Method not implemented.');\r\n   }\r\n  invoice = {\r\n-    number: this.generateInvoiceNumber(),\r\n-    from: 'Votre Nom/Société\\nVotre Adresse\\nVille, Code Postal',\r\n-    to: 'Nom du Client\\nAdresse du Client\\nVille, Code Postal',\r\n- \r\n+    number: 1,\r\n+    from: '',\r\n+    to: '',\r\n     shippingAddress: '',\r\n-     date: new Date().toISOString().split('T')[0], // Date actuelle par défaut\r\n-    paymentTerms: 'Net 30',\r\n-  \r\n+    date: '',\r\n+    paymentTerms: '',\r\n     dueDate: '',\r\n     purchaseOrder: '',\r\n     items: [\r\n       { description: '', quantity: 1, unitPrice: 0 }\r\n     ],\r\n     notes: '',\r\n     terms: '',\r\n-    taxRate: 20,\r\n+    taxRate: 0,\r\n     discount: 0,\r\n     shipping: 0,\r\n     paid: 0\r\n   };\r\n@@ -35,36 +41,19 @@\n   subtotal = 0;\r\n   total = 0;\r\n   balance = 0;\r\n \r\n- private generateInvoiceNumber(): string {\r\n-    const date = new Date();\r\n-    const year = date.getFullYear();\r\n-    const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n-    const day = date.getDate().toString().padStart(2, '0');\r\n-    const randomSuffix = Math.random().toString(36).substring(2, 6).toUpperCase();\r\n-    return `INV-${year}${month}${day}-${randomSuffix}`;\r\n-  }\r\n-\r\n-  addItem(): void {\r\n+  addItem() {\r\n     this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n     this.calculateTotals();\r\n   }\r\n \r\n-  removeItem(index: number): void {\r\n-    if (this.invoice.items.length > 1) { // Empêche la suppression du dernier article\r\n-      this.invoice.items.splice(index, 1);\r\n-      this.calculateTotals();\r\n-    }\r\n-  }\r\n-\r\n-  calculateTotals(): void {\r\n+  calculateTotals() {\r\n     this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n       return sum + (item.quantity * item.unitPrice);\r\n     }, 0);\r\n \r\n     const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n     this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n     this.balance = this.total - (this.invoice.paid || 0);\r\n   }\r\n-  \r\n }\r\n"
                },
                {
                    "date": 1747867822932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import { TextFieldModule } from '@angular/cdk/text-field';\r\n-import { CommonModule } from '@angular/common';\r\n-import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n+\r\n+import { Component, OnInit, Output } from '@angular/core';\r\n import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n import { MatButtonModule } from '@angular/material/button';\r\n import { MatCardModule } from '@angular/material/card';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n"
                },
                {
                    "date": 1747867828191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,8 @@\n \r\n-import { Component, OnInit, Output } from '@angular/core';\r\n-import { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\n-import { MatButtonModule } from '@angular/material/button';\r\n-import { MatCardModule } from '@angular/material/card';\r\n-import { MatFormFieldModule } from '@angular/material/form-field';\r\n-import { MatIconModule } from '@angular/material/icon';\r\n-import { MatInputModule } from '@angular/material/input';\r\n-import { MatSelectModule } from '@angular/material/select';\r\n+import { Component, OnIni } from '@angular/core';\r\n \r\n+\r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n"
                },
                {
                    "date": 1747910314053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \r\n-import { Component, OnIni } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n \r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n@@ -12,10 +12,17 @@\n     throw new Error('Method not implemented.');\r\n   }\r\n  invoice = {\r\n     number: 1,\r\n-    from: '',\r\n-    to: '',\r\n+   companyName: 'Nom de Votre Entreprise',\r\n+    companyAddress: '123 Votre Rue, Votre Ville',\r\n+    companyPhone: '01 23 45 67 89',\r\n+    companyEmail: 'contact@votrenentreprise.com',\r\n+    selectedClientId: null,\r\n+    clientName: '',\r\n+    clientAddress: '',\r\n+    clientPhone: '',\r\n+    clientEmail: '',\r\n     shippingAddress: '',\r\n     date: '',\r\n     paymentTerms: '',\r\n     dueDate: '',\r\n"
                },
                {
                    "date": 1747910322586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n     clientAddress: '',\r\n     clientPhone: '',\r\n     clientEmail: '',\r\n     shippingAddress: '',\r\n-    date: '',\r\n+    date: new Date().toISOString().split('T')[0], // Date d'aujourd'hui par défaut\r\n+  \r\n     paymentTerms: '',\r\n     dueDate: '',\r\n     purchaseOrder: '',\r\n     items: [\r\n"
                },
                {
                    "date": 1747910334801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,10 @@\n     paymentTerms: '',\r\n     dueDate: '',\r\n     purchaseOrder: '',\r\n     items: [\r\n-      { description: '', quantity: 1, unitPrice: 0 }\r\n+           { description: 'Exemple d\\'article', quantity: 1, unitPrice: 50 }\r\n+\r\n     ],\r\n     notes: '',\r\n     terms: '',\r\n     taxRate: 0,\r\n"
                },
                {
                    "date": 1747910341594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n     ],\r\n     notes: '',\r\n     terms: '',\r\n-    taxRate: 0,\r\n+    taxRate: 20,\r\n     discount: 0,\r\n     shipping: 0,\r\n     paid: 0\r\n   };\r\n"
                },
                {
                    "date": 1747910373996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,12 @@\n   }\r\n \r\n   calculateTotals() {\r\n     this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n-      return sum + (item.quantity * item.unitPrice);\r\n+      const quantity = Number(item.quantity) || 0;\r\n+      const unitPrice = Number(item.unitPrice) || 0;\r\n+      return sum + (quantity * unitPrice);\r\n+\r\n     }, 0);\r\n \r\n     const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n     this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n"
                },
                {
                    "date": 1747910392507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,38 @@\n       return sum + (quantity * unitPrice);\r\n \r\n     }, 0);\r\n \r\n-    const taxAmount = this.subtotal * (this.invoice.taxRate / 100);\r\n-    this.total = this.subtotal + taxAmount - (this.invoice.discount || 0) + (this.invoice.shipping || 0);\r\n-    this.balance = this.total - (this.invoice.paid || 0);\r\n+    const taxRate = Number(this.invoice.taxRate) || 0;\r\n+    const discount = Number(this.invoice.discount) || 0;\r\n+    const shipping = Number(this.invoice.shipping) || 0;\r\n+    const paid = Number(this.invoice.paid) || 0;\r\n+\r\n+    const taxAmount = this.subtotal * (taxRate / 100);\r\n+    this.total = this.subtotal + taxAmount - discount + shipping;\r\n+    this.balance = this.total - paid;\r\n   }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.calculateTotals(); // Calculer les totaux initiaux au chargement\r\n+  }\r\n+\r\n+  onClientSelected(): void {\r\n+    if (this.invoice.selectedClientId !== null) {\r\n+      const selectedId = Number(this.invoice.selectedClientId);\r\n+      const client = this.clients.find(c => c.id === selectedId);\r\n+      if (client) {\r\n+        this.invoice.clientName = client.name;\r\n+        this.invoice.clientAddress = client.address;\r\n+        this.invoice.clientPhone = client.phone;\r\n+        this.invoice.clientEmail = client.email;\r\n+        this.invoice.shippingAddress = client.address; // Pré-remplir l'adresse de livraison\r\n+      }\r\n+    } else {\r\n+      // Réinitialiser les champs si aucun client n'est sélectionné\r\n+      this.invoice.clientName = '';\r\n+      this.invoice.clientAddress = '';\r\n+      this.invoice.clientPhone = '';\r\n+      this.invoice.clientEmail = '';\r\n+      this.invoice.shippingAddress = '';\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1747910402414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,9 @@\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n-  ngOnInit(): void {\r\n-    throw new Error('Method not implemented.');\r\n-  }\r\n+  \r\n  invoice = {\r\n     number: 1,\r\n    companyName: 'Nom de Votre Entreprise',\r\n     companyAddress: '123 Votre Rue, Votre Ville',\r\n"
                },
                {
                    "date": 1747910411295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,4 +88,5 @@\n       this.invoice.clientEmail = '';\r\n       this.invoice.shippingAddress = '';\r\n     }\r\n }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747910427819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,13 @@\n     discount: 0,\r\n     shipping: 0,\r\n     paid: 0\r\n   };\r\n-\r\n+clients: Client[] = [\r\n+    { id: 1, name: 'Client Alpha SARL', address: '1 Rue du Commerce, 75001 Paris', phone: '01 11 22 33 44', email: 'contact@alpha.com' },\r\n+    { id: 2, name: 'Client Beta SAS', address: '2 Avenue des Projets, 69002 Lyon', phone: '04 55 66 77 88', email: 'info@beta.fr' },\r\n+    { id: 3, name: 'Client Gamma & Co', address: '3 Boulevard de l\\'Innovation, 13008 Marseille', phone: '04 99 88 77 66', email: 'achats@gamma.org' }\r\n+  ];\r\n   subtotal = 0;\r\n   total = 0;\r\n   balance = 0;\r\n \r\n"
                },
                {
                    "date": 1747910441727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \r\n import { Component, OnInit } from '@angular/core';\r\n \r\n-\r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n@@ -36,9 +35,9 @@\n     discount: 0,\r\n     shipping: 0,\r\n     paid: 0\r\n   };\r\n-clients: Client[] = [\r\n+clients: any[] = [\r\n     { id: 1, name: 'Client Alpha SARL', address: '1 Rue du Commerce, 75001 Paris', phone: '01 11 22 33 44', email: 'contact@alpha.com' },\r\n     { id: 2, name: 'Client Beta SAS', address: '2 Avenue des Projets, 69002 Lyon', phone: '04 55 66 77 88', email: 'info@beta.fr' },\r\n     { id: 3, name: 'Client Gamma & Co', address: '3 Boulevard de l\\'Innovation, 13008 Marseille', phone: '04 99 88 77 66', email: 'achats@gamma.org' }\r\n   ];\r\n"
                },
                {
                    "date": 1747911068607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\r\n import { Component, OnInit } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n@@ -91,5 +90,8 @@\n       this.invoice.clientEmail = '';\r\n       this.invoice.shippingAddress = '';\r\n     }\r\n }\r\n+getClients(){\r\n+  return this.clients;\r\n+}\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747911112294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n-  \r\n+  constructor\r\n  invoice = {\r\n     number: 1,\r\n    companyName: 'Nom de Votre Entreprise',\r\n     companyAddress: '123 Votre Rue, Votre Ville',\r\n"
                },
                {
                    "date": 1747911122016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n-  constructor\r\n+  constructor() { }\r\n+\r\n  invoice = {\r\n     number: 1,\r\n    companyName: 'Nom de Votre Entreprise',\r\n     companyAddress: '123 Votre Rue, Votre Ville',\r\n"
                },
                {
                    "date": 1747911128348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n-  constructor() { }\r\n+  constructor(private router: Router) { }\r\n \r\n  invoice = {\r\n     number: 1,\r\n    companyName: 'Nom de Votre Entreprise',\r\n"
                },
                {
                    "date": 1747911140607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,16 @@\n import { Component, OnInit } from '@angular/core';\r\n+import { Router } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n-  constructor(private router: Router) { }\r\n+  constructor(private router: Router,\r\n+    private commerci\r\n+  ) { }\r\n \r\n  invoice = {\r\n     number: 1,\r\n    companyName: 'Nom de Votre Entreprise',\r\n"
                },
                {
                    "date": 1747911146787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n import { Component, OnInit } from '@angular/core';\r\n import { Router } from '@angular/router';\r\n+import { CommercialService } from '../services/commercial.service';\r\n \r\n @Component({\r\n   selector: 'app-invoice',\r\n   templateUrl: './invoice.component.html',\r\n   styleUrl: './invoice.component.scss'\r\n })\r\n export class InvoiceComponent implements OnInit {\r\n   constructor(private router: Router,\r\n-    private commerci\r\n+    private commercialService: CommercialService\r\n   ) { }\r\n \r\n  invoice = {\r\n     number: 1,\r\n"
                },
                {
                    "date": 1747911156537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,7 +96,24 @@\n       this.invoice.shippingAddress = '';\r\n     }\r\n }\r\n getClients(){\r\n-  return this.clients;\r\n+  const \r\n+  if (this.projectId){\r\n+      this.projectService.getProjectById(this.projectId).subscribe({\r\n+        next: (p) => {\r\n+          this.projet = p;\r\n+          \r\n+          this.getProgress(this.projet);\r\n+          console.log(\"le projet\",this.projet);\r\n+          // Pour chaque projet, récupérer les détails des phases\r\n+        \r\n+          \r\n+        },\r\n+        error: (err) => {\r\n+          console.error('Erreur lors de la récupération des projets:', err);\r\n+          \r\n+        }\r\n+      });\r\n+    };\r\n }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747911163205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n       this.invoice.shippingAddress = '';\r\n     }\r\n }\r\n getClients(){\r\n-  const \r\n+  const idCompany=\r\n   if (this.projectId){\r\n       this.projectService.getProjectById(this.projectId).subscribe({\r\n         next: (p) => {\r\n           this.projet = p;\r\n"
                },
                {
                    "date": 1747911168980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import { Component, OnInit } from '@angular/core';\r\n+import { Router } from '@angular/router';\r\n+import { CommercialService } from '../services/commercial.service';\r\n+\r\n+@Component({\r\n+  selector: 'app-invoice',\r\n+  templateUrl: './invoice.component.html',\r\n+  styleUrl: './invoice.component.scss'\r\n+})\r\n+export class InvoiceComponent implements OnInit {\r\n+  constructor(private router: Router,\r\n+    private commercialService: CommercialService\r\n+  ) { }\r\n+\r\n+ invoice = {\r\n+    number: 1,\r\n+   companyName: 'Nom de Votre Entreprise',\r\n+    companyAddress: '123 Votre Rue, Votre Ville',\r\n+    companyPhone: '01 23 45 67 89',\r\n+    companyEmail: 'contact@votrenentreprise.com',\r\n+    selectedClientId: null,\r\n+    clientName: '',\r\n+    clientAddress: '',\r\n+    clientPhone: '',\r\n+    clientEmail: '',\r\n+    shippingAddress: '',\r\n+    date: new Date().toISOString().split('T')[0], // Date d'aujourd'hui par défaut\r\n+  \r\n+    paymentTerms: '',\r\n+    dueDate: '',\r\n+    purchaseOrder: '',\r\n+    items: [\r\n+           { description: 'Exemple d\\'article', quantity: 1, unitPrice: 50 }\r\n+\r\n+    ],\r\n+    notes: '',\r\n+    terms: '',\r\n+    taxRate: 20,\r\n+    discount: 0,\r\n+    shipping: 0,\r\n+    paid: 0\r\n+  };\r\n+clients: any[] = [\r\n+    { id: 1, name: 'Client Alpha SARL', address: '1 Rue du Commerce, 75001 Paris', phone: '01 11 22 33 44', email: 'contact@alpha.com' },\r\n+    { id: 2, name: 'Client Beta SAS', address: '2 Avenue des Projets, 69002 Lyon', phone: '04 55 66 77 88', email: 'info@beta.fr' },\r\n+    { id: 3, name: 'Client Gamma & Co', address: '3 Boulevard de l\\'Innovation, 13008 Marseille', phone: '04 99 88 77 66', email: 'achats@gamma.org' }\r\n+  ];\r\n+  subtotal = 0;\r\n+  total = 0;\r\n+  balance = 0;\r\n+\r\n+  addItem() {\r\n+    this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n+    this.calculateTotals();\r\n+  }\r\n+\r\n+  calculateTotals() {\r\n+    this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n+      const quantity = Number(item.quantity) || 0;\r\n+      const unitPrice = Number(item.unitPrice) || 0;\r\n+      return sum + (quantity * unitPrice);\r\n+\r\n+    }, 0);\r\n+\r\n+    const taxRate = Number(this.invoice.taxRate) || 0;\r\n+    const discount = Number(this.invoice.discount) || 0;\r\n+    const shipping = Number(this.invoice.shipping) || 0;\r\n+    const paid = Number(this.invoice.paid) || 0;\r\n+\r\n+    const taxAmount = this.subtotal * (taxRate / 100);\r\n+    this.total = this.subtotal + taxAmount - discount + shipping;\r\n+    this.balance = this.total - paid;\r\n+  }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.calculateTotals(); // Calculer les totaux initiaux au chargement\r\n+  }\r\n+\r\n+  onClientSelected(): void {\r\n+    if (this.invoice.selectedClientId !== null) {\r\n+      const selectedId = Number(this.invoice.selectedClientId);\r\n+      const client = this.clients.find(c => c.id === selectedId);\r\n+      if (client) {\r\n+        this.invoice.clientName = client.name;\r\n+        this.invoice.clientAddress = client.address;\r\n+        this.invoice.clientPhone = client.phone;\r\n+        this.invoice.clientEmail = client.email;\r\n+        this.invoice.shippingAddress = client.address; // Pré-remplir l'adresse de livraison\r\n+      }\r\n+    } else {\r\n+      // Réinitialiser les champs si aucun client n'est sélectionné\r\n+      this.invoice.clientName = '';\r\n+      this.invoice.clientAddress = '';\r\n+      this.invoice.clientPhone = '';\r\n+      this.invoice.clientEmail = '';\r\n+      this.invoice.shippingAddress = '';\r\n+    }\r\n+}\r\n+getClients(){\r\n+  const idCompany=localStorage.getItem('idCompany');\r\n+\r\n+  if (this.projectId){\r\n+      this.projectService.getProjectById(this.projectId).subscribe({\r\n+        next: (p) => {\r\n+          this.projet = p;\r\n+          \r\n+          this.getProgress(this.projet);\r\n+          console.log(\"le projet\",this.projet);\r\n+          // Pour chaque projet, récupérer les détails des phases\r\n+        \r\n+          \r\n+        },\r\n+        error: (err) => {\r\n+          console.error('Erreur lors de la récupération des projets:', err);\r\n+          \r\n+        }\r\n+      });\r\n+    };\r\n+}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747911184113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n       this.invoice.shippingAddress = '';\r\n     }\r\n }\r\n getClients(){\r\n-  const idCompany=localStorage.getItem('idCompany');\r\n+  const idCompany=localStorage.getItem('idAgence');\r\n \r\n   if (this.projectId){\r\n       this.projectService.getProjectById(this.projectId).subscribe({\r\n         next: (p) => {\r\n@@ -116,124 +116,5 @@\n         }\r\n       });\r\n     };\r\n }\r\n-}\n-import { Component, OnInit } from '@angular/core';\r\n-import { Router } from '@angular/router';\r\n-import { CommercialService } from '../services/commercial.service';\r\n-\r\n-@Component({\r\n-  selector: 'app-invoice',\r\n-  templateUrl: './invoice.component.html',\r\n-  styleUrl: './invoice.component.scss'\r\n-})\r\n-export class InvoiceComponent implements OnInit {\r\n-  constructor(private router: Router,\r\n-    private commercialService: CommercialService\r\n-  ) { }\r\n-\r\n- invoice = {\r\n-    number: 1,\r\n-   companyName: 'Nom de Votre Entreprise',\r\n-    companyAddress: '123 Votre Rue, Votre Ville',\r\n-    companyPhone: '01 23 45 67 89',\r\n-    companyEmail: 'contact@votrenentreprise.com',\r\n-    selectedClientId: null,\r\n-    clientName: '',\r\n-    clientAddress: '',\r\n-    clientPhone: '',\r\n-    clientEmail: '',\r\n-    shippingAddress: '',\r\n-    date: new Date().toISOString().split('T')[0], // Date d'aujourd'hui par défaut\r\n-  \r\n-    paymentTerms: '',\r\n-    dueDate: '',\r\n-    purchaseOrder: '',\r\n-    items: [\r\n-           { description: 'Exemple d\\'article', quantity: 1, unitPrice: 50 }\r\n-\r\n-    ],\r\n-    notes: '',\r\n-    terms: '',\r\n-    taxRate: 20,\r\n-    discount: 0,\r\n-    shipping: 0,\r\n-    paid: 0\r\n-  };\r\n-clients: any[] = [\r\n-    { id: 1, name: 'Client Alpha SARL', address: '1 Rue du Commerce, 75001 Paris', phone: '01 11 22 33 44', email: 'contact@alpha.com' },\r\n-    { id: 2, name: 'Client Beta SAS', address: '2 Avenue des Projets, 69002 Lyon', phone: '04 55 66 77 88', email: 'info@beta.fr' },\r\n-    { id: 3, name: 'Client Gamma & Co', address: '3 Boulevard de l\\'Innovation, 13008 Marseille', phone: '04 99 88 77 66', email: 'achats@gamma.org' }\r\n-  ];\r\n-  subtotal = 0;\r\n-  total = 0;\r\n-  balance = 0;\r\n-\r\n-  addItem() {\r\n-    this.invoice.items.push({ description: '', quantity: 1, unitPrice: 0 });\r\n-    this.calculateTotals();\r\n-  }\r\n-\r\n-  calculateTotals() {\r\n-    this.subtotal = this.invoice.items.reduce((sum, item) => {\r\n-      const quantity = Number(item.quantity) || 0;\r\n-      const unitPrice = Number(item.unitPrice) || 0;\r\n-      return sum + (quantity * unitPrice);\r\n-\r\n-    }, 0);\r\n-\r\n-    const taxRate = Number(this.invoice.taxRate) || 0;\r\n-    const discount = Number(this.invoice.discount) || 0;\r\n-    const shipping = Number(this.invoice.shipping) || 0;\r\n-    const paid = Number(this.invoice.paid) || 0;\r\n-\r\n-    const taxAmount = this.subtotal * (taxRate / 100);\r\n-    this.total = this.subtotal + taxAmount - discount + shipping;\r\n-    this.balance = this.total - paid;\r\n-  }\r\n-\r\n-  ngOnInit(): void {\r\n-    this.calculateTotals(); // Calculer les totaux initiaux au chargement\r\n-  }\r\n-\r\n-  onClientSelected(): void {\r\n-    if (this.invoice.selectedClientId !== null) {\r\n-      const selectedId = Number(this.invoice.selectedClientId);\r\n-      const client = this.clients.find(c => c.id === selectedId);\r\n-      if (client) {\r\n-        this.invoice.clientName = client.name;\r\n-        this.invoice.clientAddress = client.address;\r\n-        this.invoice.clientPhone = client.phone;\r\n-        this.invoice.clientEmail = client.email;\r\n-        this.invoice.shippingAddress = client.address; // Pré-remplir l'adresse de livraison\r\n-      }\r\n-    } else {\r\n-      // Réinitialiser les champs si aucun client n'est sélectionné\r\n-      this.invoice.clientName = '';\r\n-      this.invoice.clientAddress = '';\r\n-      this.invoice.clientPhone = '';\r\n-      this.invoice.clientEmail = '';\r\n-      this.invoice.shippingAddress = '';\r\n-    }\r\n-}\r\n-getClients(){\r\n-  const idCompany=\r\n-  if (this.projectId){\r\n-      this.projectService.getProjectById(this.projectId).subscribe({\r\n-        next: (p) => {\r\n-          this.projet = p;\r\n-          \r\n-          this.getProgress(this.projet);\r\n-          console.log(\"le projet\",this.projet);\r\n-          // Pour chaque projet, récupérer les détails des phases\r\n-        \r\n-          \r\n-        },\r\n-        error: (err) => {\r\n-          console.error('Erreur lors de la récupération des projets:', err);\r\n-          \r\n-        }\r\n-      });\r\n-    };\r\n-}\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747911190698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n }\r\n getClients(){\r\n   const idCompany=localStorage.getItem('idAgence');\r\n \r\n-  if (this.projectId){\r\n+  if (idCompany){\r\n       this.projectService.getProjectById(this.projectId).subscribe({\r\n         next: (p) => {\r\n           this.projet = p;\r\n           \r\n"
                },
                {
                    "date": 1747911197813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n getClients(){\r\n   const idCompany=localStorage.getItem('idAgence');\r\n \r\n   if (idCompany){\r\n-      this.projectService.getProjectById(this.projectId).subscribe({\r\n+      this.commercialService.get(this.projectId).subscribe({\r\n         next: (p) => {\r\n           this.projet = p;\r\n           \r\n           this.getProgress(this.projet);\r\n"
                },
                {
                    "date": 1747911203430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n getClients(){\r\n   const idCompany=localStorage.getItem('idAgence');\r\n \r\n   if (idCompany){\r\n-      this.commercialService.get(this.projectId).subscribe({\r\n+      this.commercialService.getClients().subscribe({\r\n         next: (p) => {\r\n           this.projet = p;\r\n           \r\n           this.getProgress(this.projet);\r\n"
                },
                {
                    "date": 1747911211501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,11 +99,11 @@\n getClients(){\r\n   const idCompany=localStorage.getItem('idAgence');\r\n \r\n   if (idCompany){\r\n-      this.commercialService.getClients().subscribe({\r\n+      this.commercialService.getClients(idCompany).subscribe({\r\n         next: (p) => {\r\n-          this.projet = p;\r\n+          this.clients  = p;\r\n           \r\n           this.getProgress(this.projet);\r\n           console.log(\"le projet\",this.projet);\r\n           // Pour chaque projet, récupérer les détails des phases\r\n"
                },
                {
                    "date": 1747911218882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n \r\n   if (idCompany){\r\n       this.commercialService.getClients(idCompany).subscribe({\r\n         next: (data) => {\r\n-          this.clients  = p;\r\n+          this.clients  = data;\r\n           \r\n           this.getProgress(this.projet);\r\n           console.log(\"le projet\",this.projet);\r\n           // Pour chaque projet, récupérer les détails des phases\r\n"
                },
                {
                    "date": 1747911236318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   if (idCompany){\r\n       this.commercialService.getClients(idCompany).subscribe({\r\n         next: (data) => {\r\n           this.clients  = data;\r\n-          console.log(\"les clients\")\r\n+          console.log(\"les clients\",)\r\n         \r\n           \r\n         },\r\n         error: (err) => {\r\n"
                }
            ],
            "date": 1747865170128,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-invoice',\r\n  templateUrl: './invoice.component.html',\r\n  styleUrl: './invoice.component.scss'\r\n})\r\nexport class InvoiceComponent {\r\n invoiceForm!: FormGroup;\r\n\r\n  // Example: Clients data would typically be fetched from a service or passed as Input\r\n  @Input() clients: Client[] = [\r\n    { id: '43d58cef-7977-4765-8f51-903270322a23', name: 'Slim (Client Example)' },\r\n    { id: 'client-id-002', name: 'Another Client Corp.' }\r\n  ];\r\n  // Example: Company ID might come from user context or another service\r\n  @Input() currentCompanyId: string = '680657ad26cbca08d31f221c';\r\n\r\n  @Output() invoiceSubmitted = new EventEmitter<any>();\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.invoiceForm = this.fb.group({\r\n      companyId: [this.currentCompanyId, Validators.required],\r\n      clientId: ['', Validators.required],\r\n      documentType: ['INVOICE', Validators.required], // Defaulted to INVOICE\r\n      discount: [0, [Validators.required, Validators.min(0), Validators.max(100)]],\r\n      notes: [''],\r\n      lines: this.fb.array([], [Validators.required, Validators.minLength(1)]) // Invoice must have at least one line\r\n    });\r\n    this.addInvoiceLine(); // Start with one empty line item\r\n  }\r\n\r\n  get linesArray(): FormArray {\r\n    return this.invoiceForm.get('lines') as FormArray;\r\n  }\r\n\r\n  createInvoiceLine(): FormGroup {\r\n    return this.fb.group({\r\n      description: ['', Validators.required],\r\n      quantity: [1, [Validators.required, Validators.min(1)]],\r\n      unitPrice: [0, [Validators.required, Validators.min(0)]]\r\n    });\r\n  }\r\n\r\n  addInvoiceLine(): void {\r\n    this.linesArray.push(this.createInvoiceLine());\r\n  }\r\n\r\n  removeInvoiceLine(index: number): void {\r\n    // Prevent removing the last line if you always want at least one\r\n    if (this.linesArray.length > 1) {\r\n      this.linesArray.removeAt(index);\r\n    }\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.invoiceForm.valid) {\r\n      this.invoiceSubmitted.emit(this.invoiceForm.value);\r\n    } else {\r\n      this.invoiceForm.markAllAsTouched(); // Helper to show validation errors\r\n      console.error('Form is invalid. Please check all fields.');\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n}\r\n"
        }
    ]
}