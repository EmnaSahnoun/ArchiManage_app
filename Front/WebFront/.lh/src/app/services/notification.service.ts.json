{
    "sourceFile": "src/app/services/notification.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1747324311131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747324321841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class NotificationService {\r\n-private apiUrl = 'http://localhost:8082/notifications'; // Adaptez l'URL\r\n+private apiUrl = ''; // Adaptez l'URL\r\n   private eventSource: EventSourcePolyfill;\r\n   private notificationsSubject = new Subject<any>();\r\n   constructor() { }\r\n }\r\n"
                },
                {
                    "date": 1747324344380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Injectable } from '@angular/core';\r\n-\r\n+import { EventSourcePolyfill } from 'event-source-polyfill';\r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class NotificationService {\r\n"
                },
                {
                    "date": 1747324378348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   providedIn: 'root'\r\n })\r\n export class NotificationService {\r\n private apiUrl = '';\r\n-\r\n+private apiUrl = '/agence';\r\n   private eventSource: EventSourcePolyfill;\r\n   private notificationsSubject = new Subject<any>();\r\n   constructor() { }\r\n }\r\n"
                },
                {
                    "date": 1747324580166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n+import { Injectable } from '@angular/core';\r\n+import { EventSourcePolyfill } from 'event-source-polyfill';\r\n+import { Observable, Subject } from 'rxjs';\r\n+@Injectable({\r\n+  providedIn: 'root'\r\n+})\r\n+export class NotificationService {\r\n+private apiUrl = '/notification';\r\n+  private eventSource: EventSourcePolyfill;\r\n+  private notificationsSubject = new Subject<any>();\r\n+  constructor(private http: HttpClient) { }\r\n+  // Récupérer les notifications en attente\r\n+  getPendingNotifications(userId: string): Observable<any[]> {\r\n+    return this.http.get<any[]>(`${this.apiUrl}/pending`, {\r\n+      headers: { 'X-User-ID': userId }\r\n+    });\r\n+  }\r\n+\r\n+  // Établir la connexion SSE et retourner un Observable\r\n+  connectToNotificationStream(userId: string): Observable<any> {\r\n+    // Fermer la connexion existante si elle existe\r\n+    if (this.eventSource) {\r\n+      this.eventSource.close();\r\n+    }\r\n+\r\n+    // Créer une nouvelle connexion SSE\r\n+    this.eventSource = new EventSourcePolyfill(`${this.apiUrl}/stream`, {\r\n+      headers: { 'X-User-ID': userId }\r\n+    });\r\n+\r\n+    // Gérer les événements\r\n+    this.eventSource.addEventListener('comment-notification', (event: any) => {\r\n+      const notification = JSON.parse(event.data);\r\n+      this.notificationsSubject.next(notification);\r\n+    });\r\n+\r\n+    this.eventSource.onerror = (error) => {\r\n+      console.error('EventSource error:', error);\r\n+      this.notificationsSubject.error(error);\r\n+    };\r\n+\r\n+    return this.notificationsSubject.asObservable();\r\n+  }\r\n+\r\n+  // Fermer la connexion\r\n+  closeConnection(): void {\r\n+    if (this.eventSource) {\r\n+      this.eventSource.close();\r\n+    }\r\n+  }\r\n+\r\n+  // Envoyer une notification de test (pour debug)\r\n+  sendTestNotification(notification: any): Observable<any> {\r\n+    return this.http.post(`${this.apiUrl}/send-notification`, notification);\r\n+  }\r\n+private getApiHeaders(): HttpHeaders {\r\n+        const token = this.authService.getAccessToken();\r\n+        return new HttpHeaders({\r\n+          'Content-Type': 'application/json',\r\n+          'Authorization': `Bearer ${token}`\r\n+        });\r\n+      }\r\n+      \r\n+        private handleError(error: HttpErrorResponse): Observable<never> {\r\n+          console.error('API Error Details:', error);\r\n+          \r\n+          let errorMessage = 'Une erreur est survenue';\r\n+          if (error.status === 401) {\r\n+            errorMessage = 'Session expirée - veuillez vous reconnecter';\r\n+            this.authService.logout();\r\n+          } else if (error.error?.message) {\r\n+            errorMessage = error.error.message;\r\n+          } else if (error.status === 500) {\r\n+            errorMessage = `Erreur serveur (${error.status}) - ${error.error?.error || 'Veuillez contacter l\\'administrateur'}`;\r\n+          }\r\n+      \r\n+          return throwError(() => new Error(errorMessage));\r\n+        }  \r\n+}\r\n"
                }
            ],
            "date": 1747324311131,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\nprivate apiUrl = 'http://localhost:8082/notifications'; // Adaptez l'URL\r\n  private eventSource: EventSourcePolyfill;\r\n  private notificationsSubject = new Subject<any>();\r\n  constructor() { }\r\n}\r\n"
        }
    ]
}