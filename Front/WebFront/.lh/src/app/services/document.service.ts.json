{
    "sourceFile": "src/app/services/document.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1747613269038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747613279527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,5 @@\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n-export class ProjectService {\n\\ No newline at end of file\n+export class DocumentService {\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747613286729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,6 @@\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n-export class DocumentService {\n\\ No newline at end of file\n+export class DocumentService {\r\n+     private apiUrl = '/agence';\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747613296227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,5 +7,6 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class DocumentService {\r\n-     private apiUrl = '/agence';\n\\ No newline at end of file\n+     private apiUrl = '/agence';\r\n+     constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n"
                },
                {
                    "date": 1747613311659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,4 +9,28 @@\n })\r\n export class DocumentService {\r\n      private apiUrl = '/agence';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n+     private getApiHeaders(): HttpHeaders {\r\n+        const token = this.authService.getAccessToken();\r\n+        return new HttpHeaders({\r\n+          'Content-Type': 'application/json',\r\n+          'Authorization': `Bearer ${token}`\r\n+        });\r\n+      }\r\n+      \r\n+        private handleError(error: HttpErrorResponse): Observable<never> {\r\n+          console.error('API Error Details:', error);\r\n+          \r\n+          let errorMessage = 'Une erreur est survenue';\r\n+          if (error.status === 401) {\r\n+            errorMessage = 'Session expirée - veuillez vous reconnecter';\r\n+            this.authService.logout();\r\n+          } else if (error.error?.message) {\r\n+            errorMessage = error.error.message;\r\n+          } else if (error.status === 500) {\r\n+            errorMessage = `Erreur serveur (${error.status}) - ${error.error?.error || 'Veuillez contacter l\\'administrateur'}`;\r\n+          }\r\n+      \r\n+          return throwError(() => new Error(errorMessage));\r\n+        }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747613332712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,11 @@\n })\r\n export class DocumentService {\r\n      private apiUrl = '/agence';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n+     \r\n+     \r\n+     \r\n      private getApiHeaders(): HttpHeaders {\r\n         const token = this.authService.getAccessToken();\r\n         return new HttpHeaders({\r\n           'Content-Type': 'application/json',\r\n"
                },
                {
                    "date": 1747613360570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,19 @@\n })\r\n export class DocumentService {\r\n      private apiUrl = '/agence';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n+      \r\n+     getDocumentsByTaskId(idCompany:string): Observable<any[]> {\r\n+        \r\n+        return this.http.get<any[]>(`${this.apiUrl}/${idCompany}/projects`, { \r\n+          headers: this.getApiHeaders()\r\n+        }).pipe(\r\n+          catchError(this.handleError)\r\n+        );\r\n+      }\r\n      \r\n      \r\n-     \r\n      private getApiHeaders(): HttpHeaders {\r\n         const token = this.authService.getAccessToken();\r\n         return new HttpHeaders({\r\n           'Content-Type': 'application/json',\r\n"
                },
                {
                    "date": 1747613366322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n export class DocumentService {\r\n      private apiUrl = '/agence';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n       \r\n-     getDocumentsByTaskId(idCompany:string): Observable<any[]> {\r\n+     getDocumentsByTaskId(idTask:string): Observable<any[]> {\r\n         \r\n         return this.http.get<any[]>(`${this.apiUrl}/${idCompany}/projects`, { \r\n           headers: this.getApiHeaders()\r\n         }).pipe(\r\n"
                },
                {
                    "date": 1747613502352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class DocumentService {\r\n-     private apiUrl = '/agence';\r\n+     private apiUrl = '/document';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n       \r\n      getDocumentsByTaskId(idTask:string): Observable<any[]> {\r\n         \r\n"
                },
                {
                    "date": 1747613549177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n       \r\n      getDocumentsByTaskId(idTask:string): Observable<any[]> {\r\n         \r\n-        return this.http.get<any[]>(`${this.apiUrl}/${idCompany}/projects`, { \r\n+        return this.http.get<any[]>(`${this.apiUrl}/${idTask}/projects`, { \r\n           headers: this.getApiHeaders()\r\n         }).pipe(\r\n           catchError(this.handleError)\r\n         );\r\n"
                },
                {
                    "date": 1747613799461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,38 +10,93 @@\n export class DocumentService {\r\n      private apiUrl = '/document';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n       \r\n-     getDocumentsByTaskId(idTask:string): Observable<any[]> {\r\n-        \r\n-        return this.http.get<any[]>(`${this.apiUrl}/${idTask}/projects`, { \r\n-          headers: this.getApiHeaders()\r\n-        }).pipe(\r\n-          catchError(this.handleError)\r\n-        );\r\n-      }\r\n-     \r\n-     \r\n-     private getApiHeaders(): HttpHeaders {\r\n-        const token = this.authService.getAccessToken();\r\n-        return new HttpHeaders({\r\n-          'Content-Type': 'application/json',\r\n-          'Authorization': `Bearer ${token}`\r\n-        });\r\n-      }\r\n-      \r\n-        private handleError(error: HttpErrorResponse): Observable<never> {\r\n-          console.error('API Error Details:', error);\r\n-          \r\n-          let errorMessage = 'Une erreur est survenue';\r\n-          if (error.status === 401) {\r\n-            errorMessage = 'Session expirée - veuillez vous reconnecter';\r\n-            this.authService.logout();\r\n-          } else if (error.error?.message) {\r\n-            errorMessage = error.error.message;\r\n-          } else if (error.status === 500) {\r\n-            errorMessage = `Erreur serveur (${error.status}) - ${error.error?.error || 'Veuillez contacter l\\'administrateur'}`;\r\n-          }\r\n-      \r\n-          return throwError(() => new Error(errorMessage));\r\n-        }\r\n+     uploadFile(\r\n+    file: File,\r\n+    description: string,\r\n+    taskId: string,\r\n+    projectId: string | null,\r\n+    phaseId: string | null,\r\n+    uploadedBy: string\r\n+  ): Observable<any> {\r\n+    const formData = new FormData();\r\n+    formData.append('file', file);\r\n+    formData.append('description', description);\r\n+    formData.append('taskId', taskId);\r\n+    \r\n+    if (projectId) {\r\n+      formData.append('projectId', projectId);\r\n+    }\r\n+    \r\n+    if (phaseId) {\r\n+      formData.append('phaseId', phaseId);\r\n+    }\r\n+\r\n+    const headers = this.getApiHeaders().delete('Content-Type'); // Let browser set content-type with boundary\r\n+\r\n+    return this.http.post(`${this.apiUrl}`, formData, { \r\n+      headers: headers,\r\n+      reportProgress: true,\r\n+      observe: 'events'\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n+\r\n+  // Download a media file\r\n+  downloadFile(id: string): Observable<Blob> {\r\n+    return this.http.get(`${this.apiUrl}/${id}`, {\r\n+      headers: this.getApiHeaders(),\r\n+      responseType: 'blob'\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n+\r\n+  // Get all media files for a task\r\n+  getFilesByTask(taskId: string): Observable<any[]> {\r\n+    return this.http.get<any[]>(`${this.apiUrl}/task/${taskId}`, { \r\n+      headers: this.getApiHeaders()\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n+\r\n+  // Delete a media file\r\n+  deleteFile(id: string): Observable<void> {\r\n+    return this.http.delete<void>(`${this.apiUrl}/${id}`, { \r\n+      headers: this.getApiHeaders()\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n+\r\n+  // Helper method to get headers with auth token\r\n+  private getApiHeaders(): HttpHeaders {\r\n+    const token = this.authService.getAccessToken();\r\n+    const userId = this.authService.getCurrentUserId(); // Assuming you have this method\r\n+    \r\n+    return new HttpHeaders({\r\n+      'Content-Type': 'application/json',\r\n+      'Authorization': `Bearer ${token}`,\r\n+      'X-User-ID': userId || ''\r\n+    });\r\n+  }\r\n+\r\n+  // Error handling\r\n+  private handleError(error: HttpErrorResponse): Observable<never> {\r\n+    console.error('API Error Details:', error);\r\n+    \r\n+    let errorMessage = 'An error occurred';\r\n+    if (error.status === 401) {\r\n+      errorMessage = 'Session expired - please login again';\r\n+      this.authService.logout();\r\n+    } else if (error.error?.message) {\r\n+      errorMessage = error.error.message;\r\n+    } else if (error.status === 500) {\r\n+      errorMessage = `Server error (${error.status}) - ${error.error?.error || 'Please contact administrator'}`;\r\n+    }\r\n+\r\n+    return throwError(() => new Error(errorMessage));\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747613816252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,93 +10,38 @@\n export class DocumentService {\r\n      private apiUrl = '/document';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n       \r\n-     uploadFile(\r\n-    file: File,\r\n-    description: string,\r\n-    taskId: string,\r\n-    projectId: string | null,\r\n-    phaseId: string | null,\r\n-    uploadedBy: string\r\n-  ): Observable<any> {\r\n-    const formData = new FormData();\r\n-    formData.append('file', file);\r\n-    formData.append('description', description);\r\n-    formData.append('taskId', taskId);\r\n-    \r\n-    if (projectId) {\r\n-      formData.append('projectId', projectId);\r\n-    }\r\n-    \r\n-    if (phaseId) {\r\n-      formData.append('phaseId', phaseId);\r\n-    }\r\n-\r\n-    const headers = this.getApiHeaders().delete('Content-Type'); // Let browser set content-type with boundary\r\n-\r\n-    return this.http.post(`${this.apiUrl}`, formData, { \r\n-      headers: headers,\r\n-      reportProgress: true,\r\n-      observe: 'events'\r\n-    }).pipe(\r\n-      catchError(this.handleError)\r\n-    );\r\n-  }\r\n-\r\n-  // Download a media file\r\n-  downloadFile(id: string): Observable<Blob> {\r\n-    return this.http.get(`${this.apiUrl}/${id}`, {\r\n-      headers: this.getApiHeaders(),\r\n-      responseType: 'blob'\r\n-    }).pipe(\r\n-      catchError(this.handleError)\r\n-    );\r\n-  }\r\n-\r\n-  // Get all media files for a task\r\n-  getFilesByTask(taskId: string): Observable<any[]> {\r\n-    return this.http.get<any[]>(`${this.apiUrl}/task/${taskId}`, { \r\n-      headers: this.getApiHeaders()\r\n-    }).pipe(\r\n-      catchError(this.handleError)\r\n-    );\r\n-  }\r\n-\r\n-  // Delete a media file\r\n-  deleteFile(id: string): Observable<void> {\r\n-    return this.http.delete<void>(`${this.apiUrl}/${id}`, { \r\n-      headers: this.getApiHeaders()\r\n-    }).pipe(\r\n-      catchError(this.handleError)\r\n-    );\r\n-  }\r\n-\r\n-  // Helper method to get headers with auth token\r\n-  private getApiHeaders(): HttpHeaders {\r\n-    const token = this.authService.getAccessToken();\r\n-    const userId = this.authService.getCurrentUserId(); // Assuming you have this method\r\n-    \r\n-    return new HttpHeaders({\r\n-      'Content-Type': 'application/json',\r\n-      'Authorization': `Bearer ${token}`,\r\n-      'X-User-ID': userId || ''\r\n-    });\r\n-  }\r\n-\r\n-  // Error handling\r\n-  private handleError(error: HttpErrorResponse): Observable<never> {\r\n-    console.error('API Error Details:', error);\r\n-    \r\n-    let errorMessage = 'An error occurred';\r\n-    if (error.status === 401) {\r\n-      errorMessage = 'Session expired - please login again';\r\n-      this.authService.logout();\r\n-    } else if (error.error?.message) {\r\n-      errorMessage = error.error.message;\r\n-    } else if (error.status === 500) {\r\n-      errorMessage = `Server error (${error.status}) - ${error.error?.error || 'Please contact administrator'}`;\r\n-    }\r\n-\r\n-    return throwError(() => new Error(errorMessage));\r\n-  }\r\n+     getDocumentsByTaskId(idTask:string): Observable<any[]> {\r\n+        \r\n+        return this.http.get<any[]>(`${this.apiUrl}/media/${idTask}/projects`, { \r\n+          headers: this.getApiHeaders()\r\n+        }).pipe(\r\n+          catchError(this.handleError)\r\n+        );\r\n+      }\r\n+     \r\n+     \r\n+     private getApiHeaders(): HttpHeaders {\r\n+        const token = this.authService.getAccessToken();\r\n+        return new HttpHeaders({\r\n+          'Content-Type': 'application/json',\r\n+          'Authorization': `Bearer ${token}`\r\n+        });\r\n+      }\r\n+      \r\n+        private handleError(error: HttpErrorResponse): Observable<never> {\r\n+          console.error('API Error Details:', error);\r\n+          \r\n+          let errorMessage = 'Une erreur est survenue';\r\n+          if (error.status === 401) {\r\n+            errorMessage = 'Session expirée - veuillez vous reconnecter';\r\n+            this.authService.logout();\r\n+          } else if (error.error?.message) {\r\n+            errorMessage = error.error.message;\r\n+          } else if (error.status === 500) {\r\n+            errorMessage = `Erreur serveur (${error.status}) - ${error.error?.error || 'Veuillez contacter l\\'administrateur'}`;\r\n+          }\r\n+      \r\n+          return throwError(() => new Error(errorMessage));\r\n+        }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747613849640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,68 @@\n export class DocumentService {\r\n      private apiUrl = '/document';\r\n      constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n       \r\n-     getDocumentsByTaskId(idTask:string): Observable<any[]> {\r\n-        \r\n-        return this.http.get<any[]>(`${this.apiUrl}/media/${idTask}/projects`, { \r\n-          headers: this.getApiHeaders()\r\n-        }).pipe(\r\n-          catchError(this.handleError)\r\n-        );\r\n-      }\r\n+       // Upload a media file with metadata\r\n+  uploadFile(\r\n+    file: File,\r\n+    description: string,\r\n+    taskId: string,\r\n+    projectId: string | null,\r\n+    phaseId: string | null,\r\n+    uploadedBy: string\r\n+  ): Observable<any> {\r\n+    const formData = new FormData();\r\n+    formData.append('file', file);\r\n+    formData.append('description', description);\r\n+    formData.append('taskId', taskId);\r\n+    \r\n+    if (projectId) {\r\n+      formData.append('projectId', projectId);\r\n+    }\r\n+    \r\n+    if (phaseId) {\r\n+      formData.append('phaseId', phaseId);\r\n+    }\r\n+\r\n+    const headers = this.getApiHeaders().delete('Content-Type'); // Let browser set content-type with boundary\r\n+\r\n+    return this.http.post(`${this.apiUrl}`, formData, { \r\n+      headers: headers,\r\n+      reportProgress: true,\r\n+      observe: 'events'\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n+\r\n+  // Download a media file\r\n+  downloadFile(id: string): Observable<Blob> {\r\n+    return this.http.get(`${this.apiUrl}/${id}`, {\r\n+      headers: this.getApiHeaders(),\r\n+      responseType: 'blob'\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n+\r\n+  // Get all media files for a task\r\n+  getFilesByTask(taskId: string): Observable<any[]> {\r\n+    return this.http.get<any[]>(`${this.apiUrl}/task/${taskId}`, { \r\n+      headers: this.getApiHeaders()\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n+\r\n+  // Delete a media file\r\n+  deleteFile(id: string): Observable<void> {\r\n+    return this.http.delete<void>(`${this.apiUrl}/${id}`, { \r\n+      headers: this.getApiHeaders()\r\n+    }).pipe(\r\n+      catchError(this.handleError)\r\n+    );\r\n+  }\r\n      \r\n      \r\n      private getApiHeaders(): HttpHeaders {\r\n         const token = this.authService.getAccessToken();\r\n"
                },
                {
                    "date": 1747613875650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     \r\n     if (phaseId) {\r\n       formData.append('phaseId', phaseId);\r\n     }\r\n-\r\n+    const url=\r\n     const headers = this.getApiHeaders().delete('Content-Type'); // Let browser set content-type with boundary\r\n \r\n     return this.http.post(`${this.apiUrl}`, formData, { \r\n       headers: headers,\r\n"
                },
                {
                    "date": 1747613882597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     \r\n     if (phaseId) {\r\n       formData.append('phaseId', phaseId);\r\n     }\r\n-    const url=\r\n+    const url=this.apiUrl+\"\"\r\n     const headers = this.getApiHeaders().delete('Content-Type'); // Let browser set content-type with boundary\r\n \r\n     return this.http.post(`${this.apiUrl}`, formData, { \r\n       headers: headers,\r\n"
                },
                {
                    "date": 1747613888109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     \r\n     if (phaseId) {\r\n       formData.append('phaseId', phaseId);\r\n     }\r\n-    const url=this.apiUrl+\"\"\r\n+    const url=this.apiUrl+\"/media\"\r\n     const headers = this.getApiHeaders().delete('Content-Type'); // Let browser set content-type with boundary\r\n \r\n     return this.http.post(`${this.apiUrl}`, formData, { \r\n       headers: headers,\r\n"
                },
                {
                    "date": 1747613898108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n   }\r\n \r\n   // Download a media file\r\n   downloadFile(id: string): Observable<Blob> {\r\n-    return this.http.get(`${this.apiUrl}/${id}`, {\r\n+    return this.http.get(`${this.apiUrl}/media${id}`, {\r\n       headers: this.getApiHeaders(),\r\n       responseType: 'blob'\r\n     }).pipe(\r\n       catchError(this.handleError)\r\n"
                },
                {
                    "date": 1747613908353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   }\r\n \r\n   // Get all media files for a task\r\n   getFilesByTask(taskId: string): Observable<any[]> {\r\n-    return this.http.get<any[]>(`${this.apiUrl}/task/${taskId}`, { \r\n+    return this.http.get<any[]>(`${this.apiUrl}media/task/${taskId}`, { \r\n       headers: this.getApiHeaders()\r\n     }).pipe(\r\n       catchError(this.handleError)\r\n     );\r\n"
                },
                {
                    "date": 1747613918753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,18 +55,18 @@\n   }\r\n \r\n   // Get all media files for a task\r\n   getFilesByTask(taskId: string): Observable<any[]> {\r\n-    return this.http.get<any[]>(`${this.apiUrl}media/task/${taskId}`, { \r\n+    return this.http.get<any[]>(`${this.apiUrl}/media/task/${taskId}`, { \r\n       headers: this.getApiHeaders()\r\n     }).pipe(\r\n       catchError(this.handleError)\r\n     );\r\n   }\r\n \r\n   // Delete a media file\r\n   deleteFile(id: string): Observable<void> {\r\n-    return this.http.delete<void>(`${this.apiUrl}/${id}`, { \r\n+    return this.http.delete<void>(`${this.apiUrl}media/${id}`, { \r\n       headers: this.getApiHeaders()\r\n     }).pipe(\r\n       catchError(this.handleError)\r\n     );\r\n"
                },
                {
                    "date": 1747614047147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   }\r\n \r\n   // Delete a media file\r\n   deleteFile(id: string): Observable<void> {\r\n-    return this.http.delete<void>(`${this.apiUrl}media/${id}`, { \r\n+    return this.http.delete<void>(`${this.apiUrl}/media/${id}`, { \r\n       headers: this.getApiHeaders()\r\n     }).pipe(\r\n       catchError(this.handleError)\r\n     );\r\n@@ -74,8 +74,9 @@\n      \r\n      \r\n      private getApiHeaders(): HttpHeaders {\r\n         const token = this.authService.getAccessToken();\r\n+        const\r\n         return new HttpHeaders({\r\n           'Content-Type': 'application/json',\r\n           'Authorization': `Bearer ${token}`\r\n         });\r\n"
                },
                {
                    "date": 1747614067446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n      \r\n      \r\n      private getApiHeaders(): HttpHeaders {\r\n         const token = this.authService.getAccessToken();\r\n-        const use\r\n+        const user\r\n         return new HttpHeaders({\r\n           'Content-Type': 'application/json',\r\n           'Authorization': `Bearer ${token}`\r\n         });\r\n"
                },
                {
                    "date": 1749047238829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   }\r\n \r\n   // Get all media files for a task\r\n   getFilesByTask(taskId: string): Observable<any[]> {\r\n-  return this.http.get<any[]>(`${this.apiUrl}//task/${taskId}`, { \r\n+  return this.http.get<any[]>(`${this.apiUrl}/m/task/${taskId}`, { \r\n     headers: this.getApiHeaders()\r\n   }).pipe(\r\n     catchError(this.handleError)\r\n   );\r\n"
                }
            ],
            "date": 1747613269038,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, forkJoin, map, Observable, switchMap, tap, throwError } from 'rxjs';\r\nimport { UserService } from './UserService';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectService {"
        }
    ]
}