{
    "sourceFile": "src/app/services/auth.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 77,
            "patches": [
                {
                    "date": 1744967466487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744967786751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n-import { authConfig } from 'src/app/auth.config';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n"
                },
                {
                    "date": 1744967794143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n+import { AuthConfig } from '../config/auth.config';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n"
                },
                {
                    "date": 1744967815826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n-import { AuthConfig } from '../config/auth.config';\r\n+import { authConfig } from '../config/auth.config';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n"
                },
                {
                    "date": 1744968458056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,32 @@\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n import { authConfig } from '../config/auth.config';\r\n+import { HttpClient } from '@angular/common/http';\r\n+import { tap } from 'rxjs/operators';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n-  constructor(private oauthService: OAuthService) {\r\n+  constructor(\r\n+    private oauthService: OAuthService,\r\n+    private http: HttpClient\r\n+  ) {\r\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n \r\n-  login(): void {\r\n-    this.oauthService.initCodeFlow();\r\n+  login(username: string, password: string): Promise<any> {\r\n+    return this.oauthService.fetchTokenUsingPasswordFlow(username, password)\r\n+      .then(() => {\r\n+        // Login réussi\r\n+        return Promise.resolve();\r\n+      })\r\n+      .catch(err => {\r\n+        // Gérer les erreurs\r\n+        return Promise.reject(err);\r\n+      });\r\n   }\r\n \r\n   logout(): void {\r\n     this.oauthService.logOut();\r\n"
                },
                {
                    "date": 1744969465229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n })\r\n export class AuthService {\r\n   constructor(\r\n     private oauthService: OAuthService,\r\n-    private http: HttpClient\r\n+    private router: Router\r\n   ) {\r\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n"
                },
                {
                    "date": 1744969472771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,9 @@\n   constructor(\r\n     private oauthService: OAuthService,\r\n     private router: Router\r\n   ) {\r\n-    this.oauthService.configure(authConfig);\r\n-    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n+    this.configureOAuth();\r\n   }\r\n \r\n   login(username: string, password: string): Promise<any> {\r\n     return this.oauthService.fetchTokenUsingPasswordFlow(username, password)\r\n"
                },
                {
                    "date": 1744969489747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { OAuthService } from 'angular-oauth2-oidc';\r\n import { authConfig } from '../config/auth.config';\r\n import { HttpClient } from '@angular/common/http';\r\n import { tap } from 'rxjs/operators';\r\n+import { Router } from '@angular/router';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n@@ -13,9 +14,16 @@\n     private router: Router\r\n   ) {\r\n     this.configureOAuth();\r\n   }\r\n-\r\n+  private configureOAuth(): void {\r\n+    this.oauthService.configure(authConfig);\r\n+    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n+      if (this.oauthService.hasValidAccessToken()) {\r\n+        this.router.navigate(['/dashboard']);\r\n+      }\r\n+    });\r\n+  }\r\n   login(username: string, password: string): Promise<any> {\r\n     return this.oauthService.fetchTokenUsingPasswordFlow(username, password)\r\n       .then(() => {\r\n         // Login réussi\r\n"
                },
                {
                    "date": 1744969516677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,12 @@\n         this.router.navigate(['/dashboard']);\r\n       }\r\n     });\r\n   }\r\n+  loginWithRedirect(): void {\r\n+    // Cette méthode redirige vers Keycloak (flux standard)\r\n+    this.oauthService.initCodeFlow();\r\n+  }\r\n   login(username: string, password: string): Promise<any> {\r\n     return this.oauthService.fetchTokenUsingPasswordFlow(username, password)\r\n       .then(() => {\r\n         // Login réussi\r\n"
                },
                {
                    "date": 1744969540476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,20 +23,18 @@\n       }\r\n     });\r\n   }\r\n   loginWithRedirect(): void {\r\n-    // Cette méthode redirige vers Keycloak (flux standard)\r\n     this.oauthService.initCodeFlow();\r\n   }\r\n-  login(username: string, password: string): Promise<any> {\r\n+  customLogin(username: string, password: string): Promise<boolean> {\r\n+    // Alternative si vous voulez vraiment gérer les credentials dans votre interface\r\n+    // Note: Cela nécessite d'activer le flux \"Direct Access\" dans Keycloak\r\n     return this.oauthService.fetchTokenUsingPasswordFlow(username, password)\r\n-      .then(() => {\r\n-        // Login réussi\r\n-        return Promise.resolve();\r\n-      })\r\n+      .then(() => true)\r\n       .catch(err => {\r\n-        // Gérer les erreurs\r\n-        return Promise.reject(err);\r\n+        console.error('Login error:', err);\r\n+        return false;\r\n       });\r\n   }\r\n \r\n   logout(): void {\r\n"
                },
                {
                    "date": 1744970168386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n })\r\n export class AuthService {\r\n   constructor(\r\n     private oauthService: OAuthService,\r\n-    private router: Router\r\n+    private http: HttpClient\r\n   ) {\r\n     this.configureOAuth();\r\n   }\r\n   private configureOAuth(): void {\r\n"
                },
                {
                    "date": 1744970176711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n   constructor(\r\n     private oauthService: OAuthService,\r\n     private http: HttpClient\r\n   ) {\r\n-    this.configureOAuth();\r\n+    this.oauthService.configure(authConfig);\r\n+    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n   private configureOAuth(): void {\r\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n"
                },
                {
                    "date": 1744970829283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,9 @@\n   ) {\r\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n-  private configureOAuth(): void {\r\n-    this.oauthService.configure(authConfig);\r\n-    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n-      if (this.oauthService.hasValidAccessToken()) {\r\n-        this.router.navigate(['/dashboard']);\r\n-      }\r\n-    });\r\n-  }\r\n+  \r\n   loginWithRedirect(): void {\r\n     this.oauthService.initCodeFlow();\r\n   }\r\n   customLogin(username: string, password: string): Promise<boolean> {\r\n"
                },
                {
                    "date": 1744970834850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,21 +16,37 @@\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n   \r\n-  loginWithRedirect(): void {\r\n-    this.oauthService.initCodeFlow();\r\n+  customLogin(username: string, password: string) {\r\n+    const body = new URLSearchParams();\r\n+    body.set('client_id', authConfig.clientId);\r\n+    body.set('username', username);\r\n+    body.set('password', password);\r\n+    body.set('grant_type', 'password');\r\n+    body.set('scope', 'openid profile email roles');\r\n+\r\n+    const headers = new HttpHeaders({\r\n+      'Content-Type': 'application/x-www-form-urlencoded'\r\n+    });\r\n+\r\n+    return this.http.post(\r\n+      `${authConfig.issuer}/protocol/openid-connect/token`,\r\n+      body.toString(),\r\n+      { headers }\r\n+    ).pipe(\r\n+      tap((response: any) => {\r\n+        // Stockage manuel des tokens\r\n+        this.oauthService.storeAccessToken(response.access_token);\r\n+        this.oauthService.storeIdToken(response.id_token);\r\n+        this.oauthService.storeRefreshToken(response.refresh_token);\r\n+      }),\r\n+      catchError(error => {\r\n+        console.error('Login error', error);\r\n+        return of(null);\r\n+      })\r\n+    );\r\n   }\r\n-  customLogin(username: string, password: string): Promise<boolean> {\r\n-    // Alternative si vous voulez vraiment gérer les credentials dans votre interface\r\n-    // Note: Cela nécessite d'activer le flux \"Direct Access\" dans Keycloak\r\n-    return this.oauthService.fetchTokenUsingPasswordFlow(username, password)\r\n-      .then(() => true)\r\n-      .catch(err => {\r\n-        console.error('Login error:', err);\r\n-        return false;\r\n-      });\r\n-  }\r\n \r\n   logout(): void {\r\n     this.oauthService.logOut();\r\n   }\r\n"
                },
                {
                    "date": 1744970844246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,5 +57,9 @@\n \r\n   isAuthenticated(): boolean {\r\n     return this.oauthService.hasValidAccessToken();\r\n   }\r\n+\r\n+  isAuthenticated(): boolean {\r\n+    return this.oauthService.hasValidAccessToken();\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744970864054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,8 @@\n   isAuthenticated(): boolean {\r\n     return this.oauthService.hasValidAccessToken();\r\n   }\r\n \r\n-  isAuthenticated(): boolean {\r\n+isAuthenticated(): boolean {\r\n     return this.oauthService.hasValidAccessToken();\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744970869892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,6 @@\n   isAuthenticated(): boolean {\r\n     return this.oauthService.hasValidAccessToken();\r\n   }\r\n \r\n-isAuthenticated(): boolean {\r\n-    return this.oauthService.hasValidAccessToken();\r\n-  }\r\n+ \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744971296509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n import { authConfig } from '../config/auth.config';\r\n-import { HttpClient } from '@angular/common/http';\r\n+import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n import { tap } from 'rxjs/operators';\r\n import { Router } from '@angular/router';\r\n \r\n @Injectable({\r\n"
                },
                {
                    "date": 1744971438380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import { Injectable } from '@angular/core';\r\n import { OAuthService } from 'angular-oauth2-oidc';\r\n import { authConfig } from '../config/auth.config';\r\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n-import { tap } from 'rxjs/operators';\r\n-import { Router } from '@angular/router';\r\n+import { catchError, tap } from 'rxjs/operators';\r\n+import { of } from 'rxjs';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n@@ -15,9 +15,9 @@\n   ) {\r\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n-  \r\n+\r\n   customLogin(username: string, password: string) {\r\n     const body = new URLSearchParams();\r\n     body.set('client_id', authConfig.clientId);\r\n     body.set('username', username);\r\n@@ -34,12 +34,18 @@\n       body.toString(),\r\n       { headers }\r\n     ).pipe(\r\n       tap((response: any) => {\r\n-        // Stockage manuel des tokens\r\n-        this.oauthService.storeAccessToken(response.access_token);\r\n-        this.oauthService.storeIdToken(response.id_token);\r\n-        this.oauthService.storeRefreshToken(response.refresh_token);\r\n+        // Correct way to store tokens\r\n+        this.oauthService['storage'].setItem('access_token', response.access_token);\r\n+        this.oauthService['storage'].setItem('id_token', response.id_token);\r\n+        this.oauthService['storage'].setItem('refresh_token', response.refresh_token);\r\n+        \r\n+        // Update the internal state of the OAuthService\r\n+        (this.oauthService as any).eventsSubject.next({\r\n+          type: 'token_received',\r\n+          info: response\r\n+        });\r\n       }),\r\n       catchError(error => {\r\n         console.error('Login error', error);\r\n         return of(null);\r\n@@ -57,7 +63,5 @@\n \r\n   isAuthenticated(): boolean {\r\n     return this.oauthService.hasValidAccessToken();\r\n   }\r\n-\r\n- \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744971489866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n       { headers }\r\n     ).pipe(\r\n       tap((response: any) => {\r\n         // Correct way to store tokens\r\n-        this.oauthService['storage'].setItem('access_token', response.access_token);\r\n+        this.oauthService['_storage'].setItem('access_token', response.access_token);\r\n         this.oauthService['storage'].setItem('id_token', response.id_token);\r\n         this.oauthService['storage'].setItem('refresh_token', response.refresh_token);\r\n         \r\n         // Update the internal state of the OAuthService\r\n"
                },
                {
                    "date": 1744971520435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   }\r\n \r\n   customLogin(username: string, password: string) {\r\n     const body = new URLSearchParams();\r\n-    body.set('client_id', authConfig.clientId);\r\n+    body.set('client_id', authConfig.clientId || ''); // Handle potential undefined\r\n     body.set('username', username);\r\n     body.set('password', password);\r\n     body.set('grant_type', 'password');\r\n     body.set('scope', 'openid profile email roles');\r\n@@ -34,18 +34,21 @@\n       body.toString(),\r\n       { headers }\r\n     ).pipe(\r\n       tap((response: any) => {\r\n-        // Correct way to store tokens\r\n-        this.oauthService['_storage'].setItem('access_token', response.access_token);\r\n-        this.oauthService['storage'].setItem('id_token', response.id_token);\r\n-        this.oauthService['storage'].setItem('refresh_token', response.refresh_token);\r\n+        // Proper way to handle token storage\r\n+        if (response.access_token) {\r\n+          sessionStorage.setItem('access_token', response.access_token);\r\n+        }\r\n+        if (response.id_token) {\r\n+          sessionStorage.setItem('id_token', response.id_token);\r\n+        }\r\n+        if (response.refresh_token) {\r\n+          sessionStorage.setItem('refresh_token', response.refresh_token);\r\n+        }\r\n         \r\n-        // Update the internal state of the OAuthService\r\n-        (this.oauthService as any).eventsSubject.next({\r\n-          type: 'token_received',\r\n-          info: response\r\n-        });\r\n+        // Notify OAuthService about the new tokens\r\n+        this.oauthService.tryLogin();\r\n       }),\r\n       catchError(error => {\r\n         console.error('Login error', error);\r\n         return of(null);\r\n"
                },
                {
                    "date": 1744971540865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   }\r\n \r\n   customLogin(username: string, password: string) {\r\n     const body = new URLSearchParams();\r\n-    body.set('client_id', authConfig.clientId || ''); // Handle potential undefined\r\n+    body.set('client_id', authConfig. || ''); // Handle potential undefined\r\n     body.set('username', username);\r\n     body.set('password', password);\r\n     body.set('grant_type', 'password');\r\n     body.set('scope', 'openid profile email roles');\r\n"
                },
                {
                    "date": 1744971667118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,17 @@\n })\r\n export class AuthService {\r\n   constructor(\r\n     private oauthService: OAuthService,\r\n-    private http: HttpClient\r\n+    \r\n   ) {\r\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n \r\n   customLogin(username: string, password: string) {\r\n     const body = new URLSearchParams();\r\n-    body.set('client_id', authConfig. || ''); // Handle potential undefined\r\n+    body.set('client_id', authConfig.clientId || ''); // Handle potential undefined\r\n     body.set('username', username);\r\n     body.set('password', password);\r\n     body.set('grant_type', 'password');\r\n     body.set('scope', 'openid profile email roles');\r\n"
                },
                {
                    "date": 1744971691355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,45 +16,10 @@\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n \r\n-  customLogin(username: string, password: string) {\r\n-    const body = new URLSearchParams();\r\n-    body.set('client_id', authConfig.clientId || ''); // Handle potential undefined\r\n-    body.set('username', username);\r\n-    body.set('password', password);\r\n-    body.set('grant_type', 'password');\r\n-    body.set('scope', 'openid profile email roles');\r\n-\r\n-    const headers = new HttpHeaders({\r\n-      'Content-Type': 'application/x-www-form-urlencoded'\r\n-    });\r\n-\r\n-    return this.http.post(\r\n-      `${authConfig.issuer}/protocol/openid-connect/token`,\r\n-      body.toString(),\r\n-      { headers }\r\n-    ).pipe(\r\n-      tap((response: any) => {\r\n-        // Proper way to handle token storage\r\n-        if (response.access_token) {\r\n-          sessionStorage.setItem('access_token', response.access_token);\r\n-        }\r\n-        if (response.id_token) {\r\n-          sessionStorage.setItem('id_token', response.id_token);\r\n-        }\r\n-        if (response.refresh_token) {\r\n-          sessionStorage.setItem('refresh_token', response.refresh_token);\r\n-        }\r\n-        \r\n-        // Notify OAuthService about the new tokens\r\n-        this.oauthService.tryLogin();\r\n-      }),\r\n-      catchError(error => {\r\n-        console.error('Login error', error);\r\n-        return of(null);\r\n-      })\r\n-    );\r\n+  login(): void {\r\n+    this.oauthService.initCodeFlow();\r\n   }\r\n \r\n   logout(): void {\r\n     this.oauthService.logOut();\r\n"
                },
                {
                    "date": 1744972700921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,11 @@\n     this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n   }\r\n \r\n-  login(): void {\r\n+  login(redirectPath: string = '/dashboard'): void {\r\n+    // Stocker la route de redirection après authentification\r\n+    localStorage.setItem('post_login_redirect', redirectPath);\r\n     this.oauthService.initCodeFlow();\r\n   }\r\n \r\n   logout(): void {\r\n"
                },
                {
                    "date": 1744974440565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,15 +8,12 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n-  constructor(\r\n-    private oauthService: OAuthService,\r\n-    \r\n-  ) {\r\n-    this.oauthService.configure(authConfig);\r\n-    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n-  }\r\n+    constructor(private oAuthService: OAuthService) {\r\n+        this.oAuthService.configure(authConfig);\r\n+        this.oAuthService.loadDiscoveryDocumentAndTryLogin();\r\n+      }\r\n \r\n   login(redirectPath: string = '/dashboard'): void {\r\n     // Stocker la route de redirection après authentification\r\n     localStorage.setItem('post_login_redirect', redirectPath);\r\n"
                },
                {
                    "date": 1744974454538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,12 @@\n         this.oAuthService.configure(authConfig);\r\n         this.oAuthService.loadDiscoveryDocumentAndTryLogin();\r\n       }\r\n \r\n-  login(redirectPath: string = '/dashboard'): void {\r\n-    // Stocker la route de redirection après authentification\r\n-    localStorage.setItem('post_login_redirect', redirectPath);\r\n-    this.oauthService.initCodeFlow();\r\n-  }\r\n+      login(): void {\r\n+        // Redirection immédiate vers Keycloak\r\n+        this.oAuthService.initCodeFlow();\r\n+      }\r\n \r\n   logout(): void {\r\n     this.oauthService.logOut();\r\n   }\r\n"
                },
                {
                    "date": 1744974460311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,13 +19,13 @@\n         this.oAuthService.initCodeFlow();\r\n       }\r\n \r\n   logout(): void {\r\n-    this.oauthService.logOut();\r\n+    this.oAuthService.logOut();\r\n   }\r\n \r\n   getAccessToken(): string {\r\n-    return this.oauthService.getAccessToken();\r\n+    return this.oAuthService.getAccessToken();\r\n   }\r\n \r\n   isAuthenticated(): boolean {\r\n     return this.oauthService.hasValidAccessToken();\r\n"
                },
                {
                    "date": 1744977962677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,10 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n-    constructor(private oAuthService: OAuthService) {\r\n-        this.oAuthService.configure(authConfig);\r\n-        this.oAuthService.loadDiscoveryDocumentAndTryLogin();\r\n+    constructor(private oauthService: OAuthService) {\r\n+        this.configureOAuth();\r\n       }\r\n \r\n       login(): void {\r\n         // Redirection immédiate vers Keycloak\r\n@@ -27,7 +26,7 @@\n     return this.oAuthService.getAccessToken();\r\n   }\r\n \r\n   isAuthenticated(): boolean {\r\n-    return this.oauthService.hasValidAccessToken();\r\n+    return this.oAuthService.hasValidAccessToken();\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744977974007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,19 @@\n     constructor(private oauthService: OAuthService) {\r\n         this.configureOAuth();\r\n       }\r\n \r\n+      private configureOAuth(): void {\r\n+        this.oauthService.configure(authConfig);\r\n+        this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n+          if (this.oauthService.hasValidAccessToken()) {\r\n+            this.oauthService.setupAutomaticSilentRefresh();\r\n+          }\r\n+        });\r\n+      }\r\n+    \r\n       login(): void {\r\n-        // Redirection immédiate vers Keycloak\r\n-        this.oAuthService.initCodeFlow();\r\n+        this.oauthService.initCodeFlow();\r\n       }\r\n \r\n   logout(): void {\r\n     this.oAuthService.logOut();\r\n"
                },
                {
                    "date": 1744977980586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,13 +26,13 @@\n         this.oauthService.initCodeFlow();\r\n       }\r\n \r\n   logout(): void {\r\n-    this.oAuthService.logOut();\r\n+    this.oauthService.logOut();\r\n   }\r\n \r\n   getAccessToken(): string {\r\n-    return this.oAuthService.getAccessToken();\r\n+    return this.oauthService.getAccessToken();\r\n   }\r\n \r\n   isAuthenticated(): boolean {\r\n     return this.oAuthService.hasValidAccessToken();\r\n"
                },
                {
                    "date": 1744978766366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,11 @@\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n     constructor(private oauthService: OAuthService) {\r\n-        this.configureOAuth();\r\n+        this.configureAuth();\r\n       }\r\n+    \r\n \r\n       private configureOAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n         this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n"
                },
                {
                    "date": 1744978773739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,16 +12,16 @@\n     constructor(private oauthService: OAuthService) {\r\n         this.configureAuth();\r\n       }\r\n     \r\n-\r\n-      private configureOAuth(): void {\r\n+      private configureAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n-        this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n-          if (this.oauthService.hasValidAccessToken()) {\r\n-            this.oauthService.setupAutomaticSilentRefresh();\r\n-          }\r\n-        });\r\n+        this.oauthService.loadDiscoveryDocumentAndTryLogin()\r\n+          .then(() => {\r\n+            if (this.oauthService.hasValidAccessToken()) {\r\n+              this.oauthService.setupAutomaticSilentRefresh();\r\n+            }\r\n+          });\r\n       }\r\n     \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n@@ -35,7 +35,7 @@\n     return this.oauthService.getAccessToken();\r\n   }\r\n \r\n   isAuthenticated(): boolean {\r\n-    return this.oAuthService.hasValidAccessToken();\r\n+    return this.oauthService.hasValidAccessToken();\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744978787864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,21 +21,16 @@\n               this.oauthService.setupAutomaticSilentRefresh();\r\n             }\r\n           });\r\n       }\r\n-    \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n-\r\n-  logout(): void {\r\n-    this.oauthService.logOut();\r\n-  }\r\n-\r\n-  getAccessToken(): string {\r\n-    return this.oauthService.getAccessToken();\r\n-  }\r\n-\r\n-  isAuthenticated(): boolean {\r\n-    return this.oauthService.hasValidAccessToken();\r\n-  }\r\n+    \r\n+      logout(): void {\r\n+        this.oauthService.logOut();\r\n+      }\r\n+    \r\n+      isAuthenticated(): boolean {\r\n+        return this.oauthService.hasValidAccessToken();\r\n+      }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744979085792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n     constructor(private oauthService: OAuthService) {\r\n-        this.configureAuth();\r\n+        this.oauthService.configure(authConfig);\r\n+    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n       }\r\n     \r\n       private configureAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n"
                },
                {
                    "date": 1744979107896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n       }\r\n     \r\n       private configureAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n-        this.oauthService.loadDiscoveryDocumentAndTryLogin()\r\n+        this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n           .then(() => {\r\n             if (this.oauthService.hasValidAccessToken()) {\r\n               this.oauthService.setupAutomaticSilentRefresh();\r\n             }\r\n"
                },
                {
                    "date": 1744979124917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,17 +13,8 @@\n         this.oauthService.configure(authConfig);\r\n     this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n       }\r\n     \r\n-      private configureAuth(): void {\r\n-        this.oauthService.configure(authConfig);\r\n-        this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n-          .then(() => {\r\n-            if (this.oauthService.hasValidAccessToken()) {\r\n-              this.oauthService.setupAutomaticSilentRefresh();\r\n-            }\r\n-          });\r\n-      }\r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744979137945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,11 @@\n     \r\n       logout(): void {\r\n         this.oauthService.logOut();\r\n       }\r\n-    \r\n+      getAccessToken(): string {\r\n+        return this.oauthService.getAccessToken();\r\n+      }\r\n       isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n       }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744979530700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,9 @@\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n     constructor(private oauthService: OAuthService) {\r\n-        this.oauthService.configure(authConfig);\r\n-    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n+        this.configureAuth();\r\n       }\r\n     \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n"
                },
                {
                    "date": 1744979555559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,44 @@\n export class AuthService {\r\n     constructor(private oauthService: OAuthService) {\r\n         this.configureAuth();\r\n       }\r\n+      private async configureAuth(): Promise<void> {\r\n+        this.oauthService.configure(authConfig);\r\n+        \r\n+        try {\r\n+          await this.oauthService.loadDiscoveryDocument();\r\n+          \r\n+          // Vérifie si l'URL contient un code ou un token\r\n+          if (this.oauthService.hasValidAccessToken()) {\r\n+            this.authChecked = true;\r\n+            return;\r\n+          }\r\n     \r\n+          // Essaye de compléter le flux d'authentification\r\n+          const isLoggedIn = await this.oauthService.tryLoginCodeFlow();\r\n+          \r\n+          if (isLoggedIn) {\r\n+            this.authChecked = true;\r\n+            if (this.router.url === '/login') {\r\n+              this.router.navigate(['/dashboard']);\r\n+            }\r\n+            return;\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error during auth configuration', error);\r\n+        }\r\n+        \r\n+        this.authChecked = true;\r\n+      }\r\n+    \r\n       login(): void {\r\n-        this.oauthService.initCodeFlow();\r\n+        if (!this.oauthService.hasValidAccessToken()) {\r\n+          this.oauthService.initCodeFlow();\r\n+        }\r\n       }\r\n     \r\n+    \r\n       logout(): void {\r\n         this.oauthService.logOut();\r\n       }\r\n       getAccessToken(): string {\r\n"
                },
                {
                    "date": 1744979565902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n+    private authChecked = false;\r\n     constructor(private oauthService: OAuthService) {\r\n         this.configureAuth();\r\n       }\r\n       private async configureAuth(): Promise<void> {\r\n"
                },
                {
                    "date": 1744979613190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n     private authChecked = false;\r\n-    constructor(private oauthService: OAuthService) {\r\n+    constructor(private oauthService: OAuthService,private router: Router) {\r\n         this.configureAuth();\r\n       }\r\n       private async configureAuth(): Promise<void> {\r\n         this.oauthService.configure(authConfig);\r\n"
                },
                {
                    "date": 1744979634345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { authConfig } from '../config/auth.config';\r\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n import { catchError, tap } from 'rxjs/operators';\r\n import { of } from 'rxjs';\r\n+import { Router } from '@angular/router';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n@@ -27,9 +28,9 @@\n     \r\n           // Essaye de compléter le flux d'authentification\r\n           const isLoggedIn = await this.oauthService.tryLoginCodeFlow();\r\n           \r\n-          if (isLoggedIn) {\r\n+          if (!isLoggedIn) {\r\n             this.authChecked = true;\r\n             if (this.router.url === '/login') {\r\n               this.router.navigate(['/dashboard']);\r\n             }\r\n"
                },
                {
                    "date": 1744979708400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,54 +3,22 @@\n import { authConfig } from '../config/auth.config';\r\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n import { catchError, tap } from 'rxjs/operators';\r\n import { of } from 'rxjs';\r\n-import { Router } from '@angular/router';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n-    private authChecked = false;\r\n-    constructor(private oauthService: OAuthService,private router: Router) {\r\n-        this.configureAuth();\r\n-      }\r\n-      private async configureAuth(): Promise<void> {\r\n+    constructor(private oauthService: OAuthService) {\r\n         this.oauthService.configure(authConfig);\r\n-        \r\n-        try {\r\n-          await this.oauthService.loadDiscoveryDocument();\r\n-          \r\n-          // Vérifie si l'URL contient un code ou un token\r\n-          if (this.oauthService.hasValidAccessToken()) {\r\n-            this.authChecked = true;\r\n-            return;\r\n-          }\r\n-    \r\n-          // Essaye de compléter le flux d'authentification\r\n-          const isLoggedIn = await this.oauthService.tryLoginCodeFlow();\r\n-          \r\n-          if (!isLoggedIn) {\r\n-            this.authChecked = true;\r\n-            if (this.router.url === '/login') {\r\n-              this.router.navigate(['/dashboard']);\r\n-            }\r\n-            return;\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error during auth configuration', error);\r\n-        }\r\n-        \r\n-        this.authChecked = true;\r\n+    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n       }\r\n     \r\n       login(): void {\r\n-        if (!this.oauthService.hasValidAccessToken()) {\r\n-          this.oauthService.initCodeFlow();\r\n-        }\r\n+        this.oauthService.initCodeFlow();\r\n       }\r\n     \r\n-    \r\n       logout(): void {\r\n         this.oauthService.logOut();\r\n       }\r\n       getAccessToken(): string {\r\n"
                },
                {
                    "date": 1744980992262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,22 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class AuthService {\r\n-    constructor(private oauthService: OAuthService) {\r\n+    constructor(\r\n+        private oauthService: OAuthService,\r\n+        private router: Router\r\n+      ) {\r\n+        this.configureAuth();\r\n+      }\r\n+    \r\n+      private configureAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n-    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n+        this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n+          if (this.oauthService.hasValidAccessToken()) {\r\n+            this.router.navigate(['/dashboard']);\r\n+          }\r\n+        });\r\n       }\r\n     \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n@@ -20,11 +31,13 @@\n     \r\n       logout(): void {\r\n         this.oauthService.logOut();\r\n       }\r\n+    \r\n       getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n       }\r\n+    \r\n       isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n       }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744984644156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { authConfig } from '../config/auth.config';\r\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n import { catchError, tap } from 'rxjs/operators';\r\n import { of } from 'rxjs';\r\n+import { Router } from '@angular/router';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n@@ -23,9 +24,31 @@\n             this.router.navigate(['/dashboard']);\r\n           }\r\n         });\r\n       }\r\n+      customLogin(username: string, password: string) {\r\n+        const body = new URLSearchParams();\r\n+        body.set('client_id', authConfig.clientId);\r\n+        body.set('username', username);\r\n+        body.set('password', password);\r\n+        body.set('grant_type', 'password');\r\n+        body.set('scope', 'openid profile email roles');\r\n     \r\n+        const headers = new HttpHeaders({\r\n+          'Content-Type': 'application/x-www-form-urlencoded'\r\n+        });\r\n+    \r\n+        return this.http.post(\r\n+          `${authConfig.issuer}/protocol/openid-connect/token`,\r\n+          body.toString(),\r\n+          { headers }\r\n+        ).pipe(\r\n+          catchError(error => {\r\n+            console.error('Login error', error);\r\n+            return of(null);\r\n+          })\r\n+        );\r\n+      }    \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744984662224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n })\r\n export class AuthService {\r\n     constructor(\r\n         private oauthService: OAuthService,\r\n-        private router: Router\r\n+        private router: Router,\r\n       ) {\r\n         this.configureAuth();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744984671114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n export class AuthService {\r\n     constructor(\r\n         private oauthService: OAuthService,\r\n         private router: Router,\r\n+        private http: HttpClient\r\n       ) {\r\n         this.configureAuth();\r\n       }\r\n     \r\n@@ -26,9 +27,9 @@\n         });\r\n       }\r\n       customLogin(username: string, password: string) {\r\n         const body = new URLSearchParams();\r\n-        body.set('client_id', authConfig.clientId);\r\n+        body.set('client_id', authConfig.);\r\n         body.set('username', username);\r\n         body.set('password', password);\r\n         body.set('grant_type', 'password');\r\n         body.set('scope', 'openid profile email roles');\r\n"
                },
                {
                    "date": 1744984899908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,9 @@\n })\r\n export class AuthService {\r\n     constructor(\r\n         private oauthService: OAuthService,\r\n-        private router: Router,\r\n-        private http: HttpClient\r\n+        private router: Router\r\n       ) {\r\n         this.configureAuth();\r\n       }\r\n     \r\n@@ -25,31 +24,9 @@\n             this.router.navigate(['/dashboard']);\r\n           }\r\n         });\r\n       }\r\n-      customLogin(username: string, password: string) {\r\n-        const body = new URLSearchParams();\r\n-        body.set('client_id', authConfig.);\r\n-        body.set('username', username);\r\n-        body.set('password', password);\r\n-        body.set('grant_type', 'password');\r\n-        body.set('scope', 'openid profile email roles');\r\n     \r\n-        const headers = new HttpHeaders({\r\n-          'Content-Type': 'application/x-www-form-urlencoded'\r\n-        });\r\n-    \r\n-        return this.http.post(\r\n-          `${authConfig.issuer}/protocol/openid-connect/token`,\r\n-          body.toString(),\r\n-          { headers }\r\n-        ).pipe(\r\n-          catchError(error => {\r\n-            console.error('Login error', error);\r\n-            return of(null);\r\n-          })\r\n-        );\r\n-      }    \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744985218345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n })\r\n export class AuthService {\r\n     constructor(\r\n         private oauthService: OAuthService,\r\n-        private router: Router\r\n+        private http: HttpClient,\r\n+    private router: Router\r\n       ) {\r\n         this.configureAuth();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744985233030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,12 @@\n export class AuthService {\r\n     constructor(\r\n         private oauthService: OAuthService,\r\n         private http: HttpClient,\r\n-    private router: Router\r\n+        private router: Router\r\n       ) {\r\n-        this.configureAuth();\r\n+        this.oauthService.configure(authConfig);\r\n+    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n       }\r\n     \r\n       private configureAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n"
                },
                {
                    "date": 1744985254977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,44 @@\n             this.router.navigate(['/dashboard']);\r\n           }\r\n         });\r\n       }\r\n+      customLogin(username: string, password: string) {\r\n+        const body = new URLSearchParams();\r\n+        body.set('client_id', authConfig.clientId || '');\r\n+        body.set('username', username);\r\n+        body.set('password', password);\r\n+        body.set('grant_type', 'password');\r\n+        body.set('scope', 'openid profile email roles');\r\n     \r\n+        const headers = new HttpHeaders({\r\n+          'Content-Type': 'application/x-www-form-urlencoded'\r\n+        });\r\n+    \r\n+        return this.http.post(\r\n+          `${authConfig.issuer}/protocol/openid-connect/token`,\r\n+          body.toString(),\r\n+          { headers }\r\n+        ).pipe(\r\n+          tap((response: any) => {\r\n+            if (response.access_token) {\r\n+              sessionStorage.setItem('access_token', response.access_token);\r\n+            }\r\n+            if (response.id_token) {\r\n+              sessionStorage.setItem('id_token', response.id_token);\r\n+            }\r\n+            if (response.refresh_token) {\r\n+              sessionStorage.setItem('refresh_token', response.refresh_token);\r\n+            }\r\n+            this.oauthService.tryLogin();\r\n+            this.router.navigate(['/dashboard']);\r\n+          }),\r\n+          catchError(error => {\r\n+            console.error('Login error', error);\r\n+            return of(null);\r\n+          })\r\n+        );\r\n+      } \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744985526656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,44 +26,9 @@\n             this.router.navigate(['/dashboard']);\r\n           }\r\n         });\r\n       }\r\n-      customLogin(username: string, password: string) {\r\n-        const body = new URLSearchParams();\r\n-        body.set('client_id', authConfig.clientId || '');\r\n-        body.set('username', username);\r\n-        body.set('password', password);\r\n-        body.set('grant_type', 'password');\r\n-        body.set('scope', 'openid profile email roles');\r\n     \r\n-        const headers = new HttpHeaders({\r\n-          'Content-Type': 'application/x-www-form-urlencoded'\r\n-        });\r\n-    \r\n-        return this.http.post(\r\n-          `${authConfig.issuer}/protocol/openid-connect/token`,\r\n-          body.toString(),\r\n-          { headers }\r\n-        ).pipe(\r\n-          tap((response: any) => {\r\n-            if (response.access_token) {\r\n-              sessionStorage.setItem('access_token', response.access_token);\r\n-            }\r\n-            if (response.id_token) {\r\n-              sessionStorage.setItem('id_token', response.id_token);\r\n-            }\r\n-            if (response.refresh_token) {\r\n-              sessionStorage.setItem('refresh_token', response.refresh_token);\r\n-            }\r\n-            this.oauthService.tryLogin();\r\n-            this.router.navigate(['/dashboard']);\r\n-          }),\r\n-          catchError(error => {\r\n-            console.error('Login error', error);\r\n-            return of(null);\r\n-          })\r\n-        );\r\n-      } \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744992842552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,22 +11,37 @@\n })\r\n export class AuthService {\r\n     constructor(\r\n         private oauthService: OAuthService,\r\n-        private http: HttpClient,\r\n         private router: Router\r\n       ) {\r\n-        this.oauthService.configure(authConfig);\r\n-    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n+        this.configureAuth();\r\n       }\r\n     \r\n       private configureAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n+        \r\n+        // Vérifier s'il y a un token stocké dans le localStorage\r\n+        const storedAuth = localStorage.getItem(this.TOKEN_KEY);\r\n+        if (storedAuth) {\r\n+          const authData = JSON.parse(storedAuth);\r\n+          this.oauthService.setAccessToken(authData.access_token);\r\n+          this.oauthService.setRefreshToken(authData.refresh_token);\r\n+        }\r\n+    \r\n         this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n           if (this.oauthService.hasValidAccessToken()) {\r\n+            this.storeAuthData();\r\n             this.router.navigate(['/dashboard']);\r\n           }\r\n         });\r\n+    \r\n+        // Écouter les événements de token\r\n+        this.oauthService.events.subscribe(event => {\r\n+          if (event.type === 'token_received') {\r\n+            this.storeAuthData();\r\n+          }\r\n+        });\r\n       }\r\n     \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n"
                },
                {
                    "date": 1744992859860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       private configureAuth(): void {\r\n         this.oauthService.configure(authConfig);\r\n         \r\n         // Vérifier s'il y a un token stocké dans le localStorage\r\n-        const storedAuth = localStorage.getItem(this.TOKEN_KEY);\r\n+        const storedAuth = localStorage.getItem('token');\r\n         if (storedAuth) {\r\n           const authData = JSON.parse(storedAuth);\r\n           this.oauthService.setAccessToken(authData.access_token);\r\n           this.oauthService.setRefreshToken(authData.refresh_token);\r\n"
                },
                {
                    "date": 1744992876063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,32 +17,32 @@\n         this.configureAuth();\r\n       }\r\n     \r\n       private configureAuth(): void {\r\n-        this.oauthService.configure(authConfig);\r\n-        \r\n-        // Vérifier s'il y a un token stocké dans le localStorage\r\n-        const storedAuth = localStorage.getItem('token');\r\n-        if (storedAuth) {\r\n-          const authData = JSON.parse(storedAuth);\r\n-          this.oauthService.setAccessToken(authData.access_token);\r\n-          this.oauthService.setRefreshToken(authData.refresh_token);\r\n-        }\r\n+    this.oauthService.configure(authConfig);\r\n     \r\n-        this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n-          if (this.oauthService.hasValidAccessToken()) {\r\n-            this.storeAuthData();\r\n-            this.router.navigate(['/dashboard']);\r\n-          }\r\n-        });\r\n-    \r\n-        // Écouter les événements de token\r\n-        this.oauthService.events.subscribe(event => {\r\n-          if (event.type === 'token_received') {\r\n-            this.storeAuthData();\r\n-          }\r\n-        });\r\n+    // Vérifier s'il y a un token stocké dans le localStorage\r\n+    const storedAuth = localStorage.getItem(this.TOKEN_KEY);\r\n+    if (storedAuth) {\r\n+      const authData = JSON.parse(storedAuth);\r\n+      this.oauthService.setAccessToken(authData.access_token);\r\n+      this.oauthService.setRefreshToken(authData.refresh_token);\r\n+    }\r\n+\r\n+    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n+      if (this.oauthService.hasValidAccessToken()) {\r\n+        this.storeAuthData();\r\n+        this.router.navigate(['/dashboard']);\r\n       }\r\n+    });\r\n+\r\n+    // Écouter les événements de token\r\n+    this.oauthService.events.subscribe(event => {\r\n+      if (event.type === 'token_received') {\r\n+        this.storeAuthData();\r\n+      }\r\n+    });\r\n+  }\r\n     \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n"
                },
                {
                    "date": 1744992919518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,32 +17,40 @@\n         this.configureAuth();\r\n       }\r\n     \r\n       private configureAuth(): void {\r\n-    this.oauthService.configure(authConfig);\r\n+        this.oauthService.configure(authConfig);\r\n+        this.oauthService.setupAutomaticSilentRefresh();\r\n+        \r\n+        this.oauthService.events.subscribe(event => {\r\n+          if (event.type === 'token_received') {\r\n+            this.storeTokenData();\r\n+          }\r\n+        });\r\n     \r\n-    // Vérifier s'il y a un token stocké dans le localStorage\r\n-    const storedAuth = localStorage.getItem(this.TOKEN_KEY);\r\n-    if (storedAuth) {\r\n-      const authData = JSON.parse(storedAuth);\r\n-      this.oauthService.setAccessToken(authData.access_token);\r\n-      this.oauthService.setRefreshToken(authData.refresh_token);\r\n-    }\r\n-\r\n-    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n-      if (this.oauthService.hasValidAccessToken()) {\r\n-        this.storeAuthData();\r\n-        this.router.navigate(['/dashboard']);\r\n+        this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n+          if (this.hasValidToken()) {\r\n+            this.storeTokenData();\r\n+            this.router.navigate(['/dashboard']);\r\n+          }\r\n+        });\r\n       }\r\n-    });\r\n-\r\n-    // Écouter les événements de token\r\n-    this.oauthService.events.subscribe(event => {\r\n-      if (event.type === 'token_received') {\r\n-        this.storeAuthData();\r\n+    \r\n+      private storeTokenData(): void {\r\n+        const token = this.oauthService.getAccessToken();\r\n+        const claims = this.oauthService.getIdentityClaims();\r\n+        const expiration = this.oauthService.getAccessTokenExpiration();\r\n+    \r\n+        if (token) {\r\n+          localStorage.setItem(this.TOKEN_KEY, token);\r\n+          localStorage.setItem(this.TOKEN_EXPIRATION_KEY, expiration.toString());\r\n+          \r\n+          // Stocker d'autres informations utilisateur si nécessaire\r\n+          if (claims) {\r\n+            localStorage.setItem('user_profile', JSON.stringify(claims));\r\n+          }\r\n+        }\r\n       }\r\n-    });\r\n-  }\r\n     \r\n       login(): void {\r\n         this.oauthService.initCodeFlow();\r\n       }\r\n"
                },
                {
                    "date": 1744992925908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         const claims = this.oauthService.getIdentityClaims();\r\n         const expiration = this.oauthService.getAccessTokenExpiration();\r\n     \r\n         if (token) {\r\n-          localStorage.setItem(this.TOKEN_KEY, token);\r\n+          localStorage.setItem(\"token\", token);\r\n           localStorage.setItem(this.TOKEN_EXPIRATION_KEY, expiration.toString());\r\n           \r\n           // Stocker d'autres informations utilisateur si nécessaire\r\n           if (claims) {\r\n"
                },
                {
                    "date": 1744992935812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         const expiration = this.oauthService.getAccessTokenExpiration();\r\n     \r\n         if (token) {\r\n           localStorage.setItem(\"token\", token);\r\n-          localStorage.setItem(this.TOKEN_EXPIRATION_KEY, expiration.toString());\r\n+          localStorage.setItem(\"this.TOKEN_EXPIRATION_KEY\", expiration.toString());\r\n           \r\n           // Stocker d'autres informations utilisateur si nécessaire\r\n           if (claims) {\r\n             localStorage.setItem('user_profile', JSON.stringify(claims));\r\n"
                },
                {
                    "date": 1744992943590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         const expiration = this.oauthService.getAccessTokenExpiration();\r\n     \r\n         if (token) {\r\n           localStorage.setItem(\"token\", token);\r\n-          localStorage.setItem(\"this.TOKEN_EXPIRATION_KEY\", expiration.toString());\r\n+          localStorage.setItem(\"expiration\", expiration.toString());\r\n           \r\n           // Stocker d'autres informations utilisateur si nécessaire\r\n           if (claims) {\r\n             localStorage.setItem('user_profile', JSON.stringify(claims));\r\n"
                },
                {
                    "date": 1744993022845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,11 @@\n         this.oauthService.initCodeFlow();\r\n       }\r\n     \r\n       logout(): void {\r\n+        this.clearTokenData();\r\n         this.oauthService.logOut();\r\n+        this.router.navigate(['/login']);\r\n       }\r\n     \r\n       getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n"
                },
                {
                    "date": 1744993032920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,13 @@\n         this.clearTokenData();\r\n         this.oauthService.logOut();\r\n         this.router.navigate(['/login']);\r\n       }\r\n-    \r\n+      private clearTokenData(): void {\r\n+        localStorage.removeItem(this.TOKEN_KEY);\r\n+        localStorage.removeItem(this.TOKEN_EXPIRATION_KEY);\r\n+        localStorage.removeItem('user_profile');\r\n+      }\r\n       getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n       }\r\n     \r\n"
                },
                {
                    "date": 1744993040252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         this.oauthService.logOut();\r\n         this.router.navigate(['/login']);\r\n       }\r\n       private clearTokenData(): void {\r\n-        localStorage.removeItem(this.TOKEN_KEY);\r\n+        localStorage.removeItem('token');\r\n         localStorage.removeItem(this.TOKEN_EXPIRATION_KEY);\r\n         localStorage.removeItem('user_profile');\r\n       }\r\n       getAccessToken(): string {\r\n"
                },
                {
                    "date": 1744993048418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n         this.router.navigate(['/login']);\r\n       }\r\n       private clearTokenData(): void {\r\n         localStorage.removeItem('token');\r\n-        localStorage.removeItem(this.TOKEN_EXPIRATION_KEY);\r\n+        localStorage.removeItem('expiration');\r\n         localStorage.removeItem('user_profile');\r\n       }\r\n       getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n"
                },
                {
                    "date": 1744993067610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n         localStorage.removeItem('token');\r\n         localStorage.removeItem('expiration');\r\n         localStorage.removeItem('user_profile');\r\n       }\r\n-      getAccessToken(): string {\r\n+      /* getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n-      }\r\n+      } */\r\n     \r\n       isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n       }\r\n"
                },
                {
                    "date": 1744993077764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,11 @@\n         localStorage.removeItem('token');\r\n         localStorage.removeItem('expiration');\r\n         localStorage.removeItem('user_profile');\r\n       }\r\n+      getAccessToken(): string | null {\r\n+        return localStorage.getItem('token');\r\n+      }\r\n       /* getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n       } */\r\n     \r\n"
                },
                {
                    "date": 1744993089233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,5 +74,20 @@\n     \r\n       isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n       }\r\n+      isAuthenticated(): boolean {\r\n+        const token = this.getAccessToken();\r\n+        const expiration = localStorage.getItem(this.TOKEN_EXPIRATION_KEY);\r\n+        \r\n+        if (!token || !expiration) {\r\n+          return false;\r\n+        }\r\n+    \r\n+        return Date.now() < Number(expiration) * 1000;\r\n+      }\r\n+    \r\n+      getTokenExpiration(): number | null {\r\n+        const expiration = localStorage.getItem(this.TOKEN_EXPIRATION_KEY);\r\n+        return expiration ? Number(expiration) : null;\r\n+      }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744993097082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,11 +71,11 @@\n       /* getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n       } */\r\n     \r\n-      isAuthenticated(): boolean {\r\n+      /* isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n-      }\r\n+      } */\r\n       isAuthenticated(): boolean {\r\n         const token = this.getAccessToken();\r\n         const expiration = localStorage.getItem(this.TOKEN_EXPIRATION_KEY);\r\n         \r\n"
                },
                {
                    "date": 1744993106273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n         return this.oauthService.hasValidAccessToken();\r\n       } */\r\n       isAuthenticated(): boolean {\r\n         const token = this.getAccessToken();\r\n-        const expiration = localStorage.getItem(this.TOKEN_EXPIRATION_KEY);\r\n+        const expiration = localStorage.getItem('expiration');\r\n         \r\n         if (!token || !expiration) {\r\n           return false;\r\n         }\r\n"
                },
                {
                    "date": 1744993119071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,8 @@\n         return Date.now() < Number(expiration) * 1000;\r\n       }\r\n     \r\n       getTokenExpiration(): number | null {\r\n-        const expiration = localStorage.getItem(this.TOKEN_EXPIRATION_KEY);\r\n+        const expiration = localStorage.getItem(expiration);\r\n         return expiration ? Number(expiration) : null;\r\n       }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744993152774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n           }\r\n         });\r\n     \r\n         this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n-          if (this.hasValidToken()) {\r\n+          if (this.oauthService.hasValidAccessToken()) {\r\n             this.storeTokenData();\r\n             this.router.navigate(['/dashboard']);\r\n           }\r\n         });\r\n@@ -86,8 +86,8 @@\n         return Date.now() < Number(expiration) * 1000;\r\n       }\r\n     \r\n       getTokenExpiration(): number | null {\r\n-        const expiration = localStorage.getItem(expiration);\r\n+        const expiration = localStorage.getItem('expiration');\r\n         return expiration ? Number(expiration) : null;\r\n       }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744994390643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         return localStorage.getItem('token');\r\n       }\r\n       /* getAccessToken(): string {\r\n         return this.oauthService.getAccessToken();\r\n-      } */\r\n+      } \r\n     \r\n       /* isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n       } */\r\n"
                },
                {
                    "date": 1744994409378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,13 +64,11 @@\n         localStorage.removeItem('token');\r\n         localStorage.removeItem('expiration');\r\n         localStorage.removeItem('user_profile');\r\n       }\r\n-      getAccessToken(): string | null {\r\n-        return localStorage.getItem('token');\r\n-      }\r\n-      /* getAccessToken(): string {\r\n-        return this.oauthService.getAccessToken();\r\n+\r\n+      getAccessToken(): string {\r\n+        this.oauthService.getAccessToken();\r\n       } \r\n     \r\n       /* isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n"
                },
                {
                    "date": 1744994415416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,10 @@\n         localStorage.removeItem('user_profile');\r\n       }\r\n \r\n       getAccessToken(): string {\r\n-        this.oauthService.getAccessToken();\r\n+      const   this.oauthService.getAccessToken();\r\n+\r\n       } \r\n     \r\n       /* isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n"
                },
                {
                    "date": 1744994423303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,10 @@\n         localStorage.removeItem('user_profile');\r\n       }\r\n \r\n       getAccessToken(): string {\r\n-      const   this.oauthService.getAccessToken();\r\n+      const token =  this.oauthService.getAccessToken();\r\n+      \r\n \r\n       } \r\n     \r\n       /* isAuthenticated(): boolean {\r\n"
                },
                {
                    "date": 1744994433906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       }\r\n \r\n       getAccessToken(): string {\r\n       const token =  this.oauthService.getAccessToken();\r\n-      \r\n+      if(token)\r\n \r\n       } \r\n     \r\n       /* isAuthenticated(): boolean {\r\n"
                },
                {
                    "date": 1744994440788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n \r\n       getAccessToken(): string {\r\n       const token =  this.oauthService.getAccessToken();\r\n       if(token){\r\n-        localStorage.se\r\n+        localStorage.setItem\r\n       }\r\n \r\n       } \r\n     \r\n"
                },
                {
                    "date": 1744994462215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n       const token =  this.oauthService.getAccessToken();\r\n       if(token){\r\n         localStorage.setItem(\"token\",token);\r\n       }\r\n-re\r\n+ret\r\n       } \r\n     \r\n       /* isAuthenticated(): boolean {\r\n         return this.oauthService.hasValidAccessToken();\r\n"
                }
            ],
            "date": 1744967466487,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { authConfig } from 'src/app/auth.config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  constructor(private oauthService: OAuthService) {\r\n    this.oauthService.configure(authConfig);\r\n    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n  }\r\n\r\n  login(): void {\r\n    this.oauthService.initCodeFlow();\r\n  }\r\n\r\n  logout(): void {\r\n    this.oauthService.logOut();\r\n  }\r\n\r\n  getAccessToken(): string {\r\n    return this.oauthService.getAccessToken();\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.oauthService.hasValidAccessToken();\r\n  }\r\n}"
        }
    ]
}