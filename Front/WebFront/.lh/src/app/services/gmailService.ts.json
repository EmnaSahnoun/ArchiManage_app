{
    "sourceFile": "src/app/services/gmailService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1748650251441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748650261620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,9 @@\n import { CommentResponse, TaskHistory } from '../models/activity.interfaces';\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n-})\n\\ No newline at end of file\n+})\r\n+export class ActivityService {\r\n+    private apiUrl = '/activity';\r\n+    \r\n+    constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n"
                },
                {
                    "date": 1748650289744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,4 +11,31 @@\n export class ActivityService {\r\n     private apiUrl = '/activity';\r\n     \r\n     constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n+\r\n+\r\n+      private getApiHeaders(): HttpHeaders {\r\n+         const token = this.authService.getAccessToken();\r\n+         return new HttpHeaders({\r\n+           'Content-Type': 'application/json',\r\n+           'Authorization': `Bearer ${token}`,\r\n+           'Scope': 'roles'\r\n+         });\r\n+       }\r\n+       \r\n+         private handleError(error: HttpErrorResponse): Observable<never> {\r\n+           console.error('API Error Details:', error);\r\n+           \r\n+           let errorMessage = 'Une erreur est survenue';\r\n+           if (error.status === 401) {\r\n+             errorMessage = 'Session expirÃ©e - veuillez vous reconnecter';\r\n+             this.authService.logout();\r\n+           } else if (error.error?.message) {\r\n+             errorMessage = error.error.message;\r\n+           } else if (error.status === 500) {\r\n+             errorMessage = `Erreur serveur (${error.status}) - ${error.error?.error || 'Veuillez contacter l\\'administrateur'}`;\r\n+           }\r\n+       \r\n+           return throwError(() => new Error(errorMessage));\r\n+         }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748650301377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n-export class ActivityService {\r\n+export class GmailService {\r\n     private apiUrl = '/activity';\r\n     \r\n     constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n \r\n"
                },
                {
                    "date": 1748650386655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class GmailService {\r\n-    private apiUrl = '/activity';\r\n+    private apiUrl = '/emailService';\r\n     \r\n     constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n \r\n \r\n"
                },
                {
                    "date": 1748650392229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,13 @@\n     \r\n     constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n \r\n \r\n+\r\n+\r\n+\r\n+\r\n+    \r\n       private getApiHeaders(): HttpHeaders {\r\n          const token = this.authService.getAccessToken();\r\n          return new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n"
                },
                {
                    "date": 1748650421166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,16 @@\n })\r\n export class GmailService {\r\n     private apiUrl = '/emailService';\r\n     \r\n-    constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n+    constructor(private http: HttpClient) { }\r\n \r\n \r\n \r\n \r\n \r\n \r\n-    \r\n+\r\n       private getApiHeaders(): HttpHeaders {\r\n          const token = this.authService.getAccessToken();\r\n          return new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n"
                },
                {
                    "date": 1748650506300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,16 @@\n })\r\n export class GmailService {\r\n     private apiUrl = '/emailService';\r\n     \r\n-    constructor(private http: HttpClient) { }\r\n+    constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n \r\n \r\n \r\n \r\n \r\n \r\n-\r\n+    \r\n       private getApiHeaders(): HttpHeaders {\r\n          const token = this.authService.getAccessToken();\r\n          return new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n"
                },
                {
                    "date": 1748650513040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n })\r\n export class GmailService {\r\n     private apiUrl = '/emailService';\r\n     \r\n-    constructor(private http: HttpClient, private authService: AuthService, private userService:UserService) { }\r\n+    constructor(private http: HttpClient, private authService: AuthService) { }\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1748650559572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,35 @@\n     private apiUrl = '/emailService';\r\n     \r\n     constructor(private http: HttpClient, private authService: AuthService) { }\r\n \r\n+sendEmail(accessToken: string, emailData: EmailData, userId: string): Observable<any> {\r\n+    const headers = new HttpHeaders({\r\n+      'Authorization': `Bearer ${accessToken}`\r\n+    });\r\n \r\n+    const formData = new FormData();\r\n+    formData.append('accessToken', accessToken);\r\n+    formData.append('from', emailData.from);\r\n+    formData.append('to', emailData.to);\r\n+    formData.append('subject', emailData.subject);\r\n+    \r\n+    if (emailData.text) formData.append('text', emailData.text);\r\n+    if (emailData.html) formData.append('html', emailData.html);\r\n \r\n+    if (emailData.attachments) {\r\n+      emailData.attachments.forEach((attachment, index) => {\r\n+        const blob = new Blob([attachment.content], { type: attachment.mimeType });\r\n+        formData.append(`attachments`, blob, attachment.filename);\r\n+      });\r\n+    }\r\n \r\n+    return this.http.post(`${this.apiUrl}/emails/send`, formData, { headers });\r\n+  }\r\n \r\n \r\n+\r\n+\r\n     \r\n       private getApiHeaders(): HttpHeaders {\r\n          const token = this.authService.getAccessToken();\r\n          return new HttpHeaders({\r\n"
                },
                {
                    "date": 1748650565224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     private apiUrl = '/emailService';\r\n     \r\n     constructor(private http: HttpClient, private authService: AuthService) { }\r\n \r\n-sendEmail(accessToken: string, emailData: EmailData, userId: string): Observable<any> {\r\n+sendEmail(accessToken: string, emailData: any, userId: string): Observable<any> {\r\n     const headers = new HttpHeaders({\r\n       'Authorization': `Bearer ${accessToken}`\r\n     });\r\n \r\n"
                },
                {
                    "date": 1748650577106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     if (emailData.text) formData.append('text', emailData.text);\r\n     if (emailData.html) formData.append('html', emailData.html);\r\n \r\n     if (emailData.attachments) {\r\n-      emailData.attachments.forEach((attachment, index) => {\r\n+      emailData.attachments.forEach((attachments, index) => {\r\n         const blob = new Blob([attachment.content], { type: attachment.mimeType });\r\n         formData.append(`attachments`, blob, attachment.filename);\r\n       });\r\n     }\r\n"
                },
                {
                    "date": 1748650598974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     if (emailData.text) formData.append('text', emailData.text);\r\n     if (emailData.html) formData.append('html', emailData.html);\r\n \r\n     if (emailData.attachments) {\r\n-      emailData.attachments.forEach((attachments, index) => {\r\n+      emailData.attachments.forEach((attachment:any, index) => {\r\n         const blob = new Blob([attachment.content], { type: attachment.mimeType });\r\n         formData.append(`attachments`, blob, attachment.filename);\r\n       });\r\n     }\r\n"
                },
                {
                    "date": 1748650623206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,16 @@\n \r\n     return this.http.post(`${this.apiUrl}/emails/send`, formData, { headers });\r\n   }\r\n \r\n+getEmail(accessToken: string, emailId: string, userId: string, includeAttachments = false): Observable<Email> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId)\r\n+      .set('includeAttachments', includeAttachments.toString());\r\n \r\n+    return this.http.get<Email>(`${this.apiUrl}/emails/${emailId}`, { params });\r\n+  }\r\n \r\n \r\n     \r\n       private getApiHeaders(): HttpHeaders {\r\n"
                },
                {
                    "date": 1748650656055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     if (emailData.text) formData.append('text', emailData.text);\r\n     if (emailData.html) formData.append('html', emailData.html);\r\n \r\n     if (emailData.attachments) {\r\n-      emailData.attachments.forEach((attachment:any, index) => {\r\n+      emailData.attachments.forEach((attachment:any, index:any) => {\r\n         const blob = new Blob([attachment.content], { type: attachment.mimeType });\r\n         formData.append(`attachments`, blob, attachment.filename);\r\n       });\r\n     }\r\n@@ -42,12 +42,87 @@\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('includeAttachments', includeAttachments.toString());\r\n \r\n-    return this.http.get<Email>(`${this.apiUrl}/emails/${emailId}`, { params });\r\n+    return this.http.get<any>(`${this.apiUrl}/emails/${emailId}`, { params });\r\n   }\r\n+// Obtenir les emails reÃ§us\r\n+  getInboxEmails(accessToken: string, userId: string, maxResults = 20): Observable<Email[]> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId)\r\n+      .set('maxResults', maxResults.toString());\r\n \r\n+    return this.http.get<Email[]>(`${this.apiUrl}/emails/inbox`, { params });\r\n+  }\r\n \r\n+  // Obtenir les emails envoyÃ©s\r\n+  getSentEmails(accessToken: string, userId: string, maxResults = 20): Observable<Email[]> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId)\r\n+      .set('maxResults', maxResults.toString());\r\n+\r\n+    return this.http.get<Email[]>(`${this.apiUrl}/emails/sent`, { params });\r\n+  }\r\n+\r\n+  // Supprimer un email\r\n+  deleteEmail(accessToken: string, emailId: string, userId: string, permanent = false): Observable<any> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId)\r\n+      .set('permanent', permanent.toString());\r\n+\r\n+    return this.http.delete(`${this.apiUrl}/emails/${emailId}`, { params });\r\n+  }\r\n+\r\n+  // Marquer un email comme lu\r\n+  markAsRead(accessToken: string, emailId: string, userId: string): Observable<any> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId);\r\n+\r\n+    return this.http.patch(`${this.apiUrl}/emails/${emailId}/read`, {}, { params });\r\n+  }\r\n+\r\n+  // Gestion des brouillons\r\n+  createDraft(accessToken: string, draftData: EmailData, userId: string): Observable<any> {\r\n+    const headers = new HttpHeaders({\r\n+      'Authorization': `Bearer ${accessToken}`\r\n+    });\r\n+\r\n+    return this.http.post(`${this.apiUrl}/drafts`, {\r\n+      ...draftData,\r\n+      accessToken,\r\n+      userId\r\n+    }, { headers });\r\n+  }\r\n+\r\n+  getDrafts(accessToken: string, userId: string, maxResults = 10): Observable<any[]> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId)\r\n+      .set('maxResults', maxResults.toString());\r\n+\r\n+    return this.http.get<any[]>(`${this.apiUrl}/drafts`, { params });\r\n+  }\r\n+\r\n+  deleteDraft(accessToken: string, draftId: string, userId: string): Observable<any> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId);\r\n+\r\n+    return this.http.delete(`${this.apiUrl}/drafts/${draftId}`, { params });\r\n+  }\r\n+\r\n+  sendDraft(accessToken: string, draftId: string, userId: string): Observable<any> {\r\n+    const params = new HttpParams()\r\n+      .set('accessToken', accessToken)\r\n+      .set('userId', userId);\r\n+\r\n+    return this.http.post(`${this.apiUrl}/drafts/${draftId}/send`, {}, { params });\r\n+  }\r\n+\r\n     \r\n       private getApiHeaders(): HttpHeaders {\r\n          const token = this.authService.getAccessToken();\r\n          return new HttpHeaders({\r\n"
                },
                {
                    "date": 1748650662029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \r\n     return this.http.post(`${this.apiUrl}/emails/send`, formData, { headers });\r\n   }\r\n \r\n-getEmail(accessToken: string, emailId: string, userId: string, includeAttachments = false): Observable<Email> {\r\n+getEmail(accessToken: string, emailId: string, userId: string, includeAttachments = false): Observable<any> {\r\n     const params = new HttpParams()\r\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('includeAttachments', includeAttachments.toString());\r\n"
                },
                {
                    "date": 1748650670679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \r\n     return this.http.get<any>(`${this.apiUrl}/emails/${emailId}`, { params });\r\n   }\r\n // Obtenir les emails reÃ§us\r\n-  getInboxEmails(accessToken: string, userId: string, maxResults = 20): Observable<Email[]> {\r\n+  getInboxEmails(accessToken: string, userId: string, maxResults = 20): Observable<any[]> {\r\n     const params = new HttpParams()\r\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('maxResults', maxResults.toString());\r\n@@ -55,9 +55,9 @@\n     return this.http.get<Email[]>(`${this.apiUrl}/emails/inbox`, { params });\r\n   }\r\n \r\n   // Obtenir les emails envoyÃ©s\r\n-  getSentEmails(accessToken: string, userId: string, maxResults = 20): Observable<Email[]> {\r\n+  getSentEmails(accessToken: string, userId: string, maxResults = 20): Observable<any[]> {\r\n     const params = new HttpParams()\r\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('maxResults', maxResults.toString());\r\n"
                },
                {
                    "date": 1748650677710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('maxResults', maxResults.toString());\r\n \r\n-    return this.http.get<Email[]>(`${this.apiUrl}/emails/inbox`, { params });\r\n+    return this.http.get<any[]>(`${this.apiUrl}/emails/inbox`, { params });\r\n   }\r\n \r\n   // Obtenir les emails envoyÃ©s\r\n   getSentEmails(accessToken: string, userId: string, maxResults = 20): Observable<any[]> {\r\n@@ -61,9 +61,9 @@\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('maxResults', maxResults.toString());\r\n \r\n-    return this.http.get<Email[]>(`${this.apiUrl}/emails/sent`, { params });\r\n+    return this.http.get<any[]>(`${this.apiUrl}/emails/sent`, { params });\r\n   }\r\n \r\n   // Supprimer un email\r\n   deleteEmail(accessToken: string, emailId: string, userId: string, permanent = false): Observable<any> {\r\n"
                },
                {
                    "date": 1748650742697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,9 @@\n     \r\n     constructor(private http: HttpClient, private authService: AuthService) { }\r\n \r\n sendEmail(accessToken: string, emailData: any, userId: string): Observable<any> {\r\n-    const headers = new HttpHeaders({\r\n-      'Authorization': `Bearer ${accessToken}`\r\n-    });\r\n+    const headers = this.getApiHeaders()\r\n \r\n     const formData = new FormData();\r\n     formData.append('accessToken', accessToken);\r\n     formData.append('from', emailData.from);\r\n@@ -84,9 +82,9 @@\n     return this.http.patch(`${this.apiUrl}/emails/${emailId}/read`, {}, { params });\r\n   }\r\n \r\n   // Gestion des brouillons\r\n-  createDraft(accessToken: string, draftData: EmailData, userId: string): Observable<any> {\r\n+  createDraft(accessToken: string, draftData: any, userId: string): Observable<any> {\r\n     const headers = new HttpHeaders({\r\n       'Authorization': `Bearer ${accessToken}`\r\n     });\r\n \r\n"
                },
                {
                    "date": 1748650754198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,11 +83,9 @@\n   }\r\n \r\n   // Gestion des brouillons\r\n   createDraft(accessToken: string, draftData: any, userId: string): Observable<any> {\r\n-    const headers = new HttpHeaders({\r\n-      'Authorization': `Bearer ${accessToken}`\r\n-    });\r\n+    const headers = this.getApiHeaders()\r\n \r\n     return this.http.post(`${this.apiUrl}/drafts`, {\r\n       ...draftData,\r\n       accessToken,\r\n"
                },
                {
                    "date": 1748650846092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,10 @@\n     return this.http.post(`${this.apiUrl}/emails/send`, formData, { headers });\r\n   }\r\n \r\n getEmail(accessToken: string, emailId: string, userId: string, includeAttachments = false): Observable<any> {\r\n-    const params = new HttpParams()\r\n+    const params = new HttpParams();\r\n+    const headers = this.getApiHeaders()\r\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('includeAttachments', includeAttachments.toString());\r\n \r\n"
                },
                {
                    "date": 1748650854293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,8 @@\n   }\r\n \r\n getEmail(accessToken: string, emailId: string, userId: string, includeAttachments = false): Observable<any> {\r\n     const params = new HttpParams();\r\n-    \r\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('includeAttachments', includeAttachments.toString());\r\n \r\n"
                },
                {
                    "date": 1748650933728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       .set('accessToken', accessToken)\r\n       .set('userId', userId)\r\n       .set('maxResults', maxResults.toString());\r\n     const headers = this.getApiHeaders()\r\n-    return this.http.get<any[]>(`${this.apiUrl}/emails/inbox`, { params });\r\n+    return this.http.get<any[]>(`${this.apiUrl}/emails/inbox`, { params, headers });\r\n   }\r\n \r\n   // Obtenir les emails envoyÃ©s\r\n   getSentEmails(accessToken: string, userId: string, maxResults = 20): Observable<any[]> {\r\n"
                }
            ],
            "date": 1748650251441,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { catchError, forkJoin, map, Observable, switchMap, tap, throwError } from 'rxjs';\r\nimport { UserService } from './UserService';\r\nimport { AuthService } from './auth.service';\r\nimport { CommentResponse, TaskHistory } from '../models/activity.interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})"
        }
    ]
}