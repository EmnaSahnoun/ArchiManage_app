{
    "sourceFile": "src/app/services/User.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744990611053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744990663282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,167 @@\n import { Injectable } from '@angular/core';\r\n import { HttpClient, HttpHeaders } from '@angular/common/http';\r\n-import { Observable, catchError, forkJoin, map, mergeMap, of, throwError } from 'rxjs';\n\\ No newline at end of file\n+import { Observable, catchError, forkJoin, map, mergeMap, of, throwError } from 'rxjs';\r\n+\r\n+@Injectable({\r\n+  providedIn: 'root'\r\n+})\r\n+export class KeycloakService {\r\n+  private keycloakUrl = 'https://esmm.systeo.tn';\r\n+  private realm = 'systeodigital';\r\n+  private accessToken: string | null = null;\r\n+\r\n+  constructor(private http: HttpClient) { }\r\n+\r\n+  // Authentification pour obtenir le token\r\n+  login(clientId: string, username: string, password: string): Observable<any> {\r\n+    const body = new URLSearchParams();\r\n+    body.set('client_id', clientId);\r\n+    body.set('username', username);\r\n+    body.set('password', password);\r\n+    body.set('grant_type', 'password');\r\n+\r\n+    const headers = new HttpHeaders({\r\n+      'Content-Type': 'application/x-www-form-urlencoded'\r\n+    });\r\n+\r\n+    return this.http.post(\r\n+      `${this.keycloakUrl}/realms/${this.realm}/protocol/openid-connect/token`,\r\n+      body.toString(),\r\n+      { headers }\r\n+    ).pipe(\r\n+      map((response: any) => {\r\n+        this.accessToken = response.access_token;\r\n+        return response;\r\n+      }),\r\n+      catchError(error => {\r\n+        console.error('Login error:', error);\r\n+        return throwError(() => error);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  // Créer un nouvel utilisateur\r\n+  createUser(userData: any): Observable<any> {\r\n+    if (!this.accessToken) {\r\n+      return throwError(() => new Error('Token non disponible. Veuillez vous authentifier d\\'abord.'));\r\n+    }\r\n+\r\n+    const headers = new HttpHeaders({\r\n+      'Content-Type': 'application/json',\r\n+      'Authorization': `Bearer ${this.accessToken}`\r\n+    });\r\n+\r\n+    const userPayload = {\r\n+      username: userData.email, // ou userData.name selon votre besoin\r\n+      email: userData.email,\r\n+      enabled: true,\r\n+      credentials: [{\r\n+        type: 'password',\r\n+        value: userData.password,\r\n+        temporary: false\r\n+      }]\r\n+    };\r\n+\r\n+    return this.http.post(\r\n+      `${this.keycloakUrl}/admin/realms/${this.realm}/users`,\r\n+      userPayload,\r\n+      { headers }\r\n+    ).pipe(\r\n+      catchError(error => {\r\n+        console.error('Erreur création utilisateur:', error);\r\n+        return throwError(() => error);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  // Récupérer tous les rôles disponibles\r\n+  getRoles(): Observable<any[]> {\r\n+    if (!this.accessToken) {\r\n+      return throwError(() => new Error('Token non disponible. Veuillez vous authentifier d\\'abord.'));\r\n+    }\r\n+\r\n+    const headers = new HttpHeaders({\r\n+      'Authorization': `Bearer ${this.accessToken}`\r\n+    });\r\n+\r\n+    return this.http.get<any[]>(\r\n+      `${this.keycloakUrl}/admin/realms/${this.realm}/roles`,\r\n+      { headers }\r\n+    ).pipe(\r\n+      catchError(error => {\r\n+        console.error('Erreur récupération rôles:', error);\r\n+        return throwError(() => error);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  // Assigner un rôle à un utilisateur\r\n+  assignRoleToUser(userId: string, roleName: string): Observable<any> {\r\n+    if (!this.accessToken) {\r\n+      return throwError(() => new Error('Token non disponible. Veuillez vous authentifier d\\'abord.'));\r\n+    }\r\n+\r\n+    return this.getRoles().pipe(\r\n+      mergeMap(roles => {\r\n+        const role = roles.find(r => r.name === roleName);\r\n+        if (!role) {\r\n+          return throwError(() => new Error(`Rôle ${roleName} non trouvé`));\r\n+        }\r\n+\r\n+        const headers = new HttpHeaders({\r\n+          'Content-Type': 'application/json',\r\n+          'Authorization': `Bearer ${this.accessToken}`\r\n+        });\r\n+\r\n+        return this.http.post(\r\n+          `${this.keycloakUrl}/admin/realms/${this.realm}/users/${userId}/role-mappings/realm`,\r\n+          [role],\r\n+          { headers }\r\n+        );\r\n+      }),\r\n+      catchError(error => {\r\n+        console.error('Erreur assignation rôle:', error);\r\n+        return throwError(() => error);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  // Trouver un utilisateur par email\r\n+  findUserByEmail(email: string): Observable<any> {\r\n+    if (!this.accessToken) {\r\n+      return throwError(() => new Error('Token non disponible. Veuillez vous authentifier d\\'abord.'));\r\n+    }\r\n+\r\n+    const headers = new HttpHeaders({\r\n+      'Authorization': `Bearer ${this.accessToken}`\r\n+    });\r\n+\r\n+    return this.http.get<any[]>(\r\n+      `${this.keycloakUrl}/admin/realms/${this.realm}/users?email=${encodeURIComponent(email)}`,\r\n+      { headers }\r\n+    ).pipe(\r\n+      map(users => users.length > 0 ? users[0] : null),\r\n+      catchError(error => {\r\n+        console.error('Erreur recherche utilisateur:', error);\r\n+        return throwError(() => error);\r\n+      })\r\n+    );\r\n+  }\r\n+\r\n+  // Méthode complète pour créer un utilisateur et lui assigner un rôle\r\n+  createUserWithRole(userData: any): Observable<any> {\r\n+    return this.createUser(userData).pipe(\r\n+      mergeMap(() => this.findUserByEmail(userData.email)),\r\n+      mergeMap(user => {\r\n+        if (!user || !user.id) {\r\n+          return throwError(() => new Error('Utilisateur créé mais non trouvé pour assignation de rôle'));\r\n+        }\r\n+        return this.assignRoleToUser(user.id, userData.role);\r\n+      }),\r\n+      catchError(error => {\r\n+        console.error('Erreur dans createUserWithRole:', error);\r\n+        return throwError(() => error);\r\n+      })\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1744990611053,
            "name": "Commit-0",
            "content": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, catchError, forkJoin, map, mergeMap, of, throwError } from 'rxjs';"
        }
    ]
}