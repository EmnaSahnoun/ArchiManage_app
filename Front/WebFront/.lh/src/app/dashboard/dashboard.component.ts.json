{
    "sourceFile": "src/app/dashboard/dashboard.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 114,
            "patches": [
                {
                    "date": 1741610369439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741610386887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { Component } from '@angular/core';\r\n+import Chart from 'chart.js/auto';\r\n \r\n @Component({\r\n   selector: 'app-dashboard',\r\n   templateUrl: './dashboard.component.html',\r\n"
                },
                {
                    "date": 1741681964011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,40 @@\n   templateUrl: './dashboard.component.html',\r\n   styleUrl: './dashboard.component.scss'\r\n })\r\n export class DashboardComponent {\r\n-  ngAfterViewInit() {\r\n-    new Chart(\"chart\", {\r\n-      type: 'bar',\r\n-      data: {\r\n-        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\r\n-        datasets: [{\r\n-          label: 'Flights',\r\n-          data: [30, 45, 60, 50, 75, 90],\r\n-          backgroundColor: '#2787C0'\r\n-        }]\r\n-      }\r\n-    });\r\n+  ngAfterViewInit(): void {\r\n+    this.createChart();\r\n   }\r\n+\r\n+  createChart() {\r\n+    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n+    if (ctx) {\r\n+      new Chart(ctx, {\r\n+        type: 'line',\r\n+        data: {\r\n+          labels: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n+          datasets: [{\r\n+            label: 'Task Activity',\r\n+            data: [12, 15, 8, 18, 10, 14, 9],\r\n+            borderColor: '#ffdb58',\r\n+            backgroundColor: 'rgba(255, 215, 88, 0.2)',\r\n+            fill: true,\r\n+            pointBackgroundColor: '#ffdb58',\r\n+            pointBorderColor: '#ffdb58',\r\n+            pointHoverRadius: 5\r\n+          }]\r\n+        },\r\n+        options: {\r\n+          responsive: true,\r\n+          plugins: {\r\n+            legend: { display: false }\r\n+          },\r\n+          scales: {\r\n+            x: { grid: { display: false } },\r\n+            y: { grid: { display: true, color: '#eee' }, beginAtZero: true }\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1741682445561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n           datasets: [{\r\n             label: 'Task Activity',\r\n             data: [12, 15, 8, 18, 10, 14, 9],\r\n             borderColor: '#ffdb58',\r\n-            backgroundColor: 'rgba(255, 215, 88, 0.2)',\r\n+            backgroundColor: 'rgba(44, 34, 0, 0.2)',\r\n             fill: true,\r\n             pointBackgroundColor: '#ffdb58',\r\n             pointBorderColor: '#ffdb58',\r\n             pointHoverRadius: 5\r\n"
                },
                {
                    "date": 1741682464779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n           datasets: [{\r\n             label: 'Task Activity',\r\n             data: [12, 15, 8, 18, 10, 14, 9],\r\n             borderColor: '#ffdb58',\r\n-            backgroundColor: 'rgba(44, 34, 0, 0.2)',\r\n+            backgroundColor: 'rgb(185, 160, 160)rgba(44, 34, 0, 0.2)',\r\n             fill: true,\r\n             pointBackgroundColor: '#ffdb58',\r\n             pointBorderColor: '#ffdb58',\r\n             pointHoverRadius: 5\r\n"
                },
                {
                    "date": 1741682472802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n           datasets: [{\r\n             label: 'Task Activity',\r\n             data: [12, 15, 8, 18, 10, 14, 9],\r\n             borderColor: '#ffdb58',\r\n-            backgroundColor: 'rgb(185, 160, 160)rgba(44, 34, 0, 0.2)',\r\n+            backgroundColor: 'rgb(185, 160, 160)',\r\n             fill: true,\r\n             pointBackgroundColor: '#ffdb58',\r\n             pointBorderColor: '#ffdb58',\r\n             pointHoverRadius: 5\r\n"
                },
                {
                    "date": 1741682483878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n           datasets: [{\r\n             label: 'Task Activity',\r\n             data: [12, 15, 8, 18, 10, 14, 9],\r\n             borderColor: '#ffdb58',\r\n-            backgroundColor: 'rgb(185, 160, 160)',\r\n+            backgroundColor: 'rgb(240, 205, 205)',\r\n             fill: true,\r\n             pointBackgroundColor: '#ffdb58',\r\n             pointBorderColor: '#ffdb58',\r\n             pointHoverRadius: 5\r\n"
                },
                {
                    "date": 1741683373230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,30 +14,23 @@\n   createChart() {\r\n     const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n     if (ctx) {\r\n       new Chart(ctx, {\r\n-        type: 'line',\r\n+        type: 'bar',\r\n         data: {\r\n-          labels: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n+          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n           datasets: [{\r\n-            label: 'Task Activity',\r\n-            data: [12, 15, 8, 18, 10, 14, 9],\r\n-            borderColor: '#ffdb58',\r\n-            backgroundColor: 'rgb(240, 205, 205)',\r\n-            fill: true,\r\n-            pointBackgroundColor: '#ffdb58',\r\n-            pointBorderColor: '#ffdb58',\r\n-            pointHoverRadius: 5\r\n+            label: 'Tâches complétées',\r\n+            data: [50, 60, 75, 90, 110, 130],\r\n+            backgroundColor: '#3498db',\r\n+            borderColor: '#2980b9',\r\n+            borderWidth: 1\r\n           }]\r\n         },\r\n         options: {\r\n           responsive: true,\r\n-          plugins: {\r\n-            legend: { display: false }\r\n-          },\r\n           scales: {\r\n-            x: { grid: { display: false } },\r\n-            y: { grid: { display: true, color: '#eee' }, beginAtZero: true }\r\n+            y: { beginAtZero: true }\r\n           }\r\n         }\r\n       });\r\n     }\r\n"
                },
                {
                    "date": 1745433746107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n+\r\n+\r\n+\r\n import { Component } from '@angular/core';\r\n import Chart from 'chart.js/auto';\r\n \r\n @Component({\r\n"
                },
                {
                    "date": 1745433771161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,206 @@\n+import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n+import Chart from 'chart.js/auto'; // Import Chart.js\r\n \r\n+// Interface pour la structure des données de projet (basée sur le HTML)\r\n+export interface Project {\r\n+  id: number; // Ajout d'un ID pour la gestion\r\n+  name: string;\r\n+  statusClass: string; // Classe CSS pour le badge (ex: 'in-progress', 'completed')\r\n+  statusText: string;  // Texte du badge (ex: 'En cours', 'Terminé')\r\n+  progress: number;    // Pourcentage de progression\r\n+}\r\n \r\n+// Interface pour la structure des données utilisateur (basée sur le HTML)\r\n+export interface User {\r\n+  id: number; // Ajout d'un ID\r\n+  fullName: string;\r\n+  email: string;\r\n+  roleClass: string; // Classe CSS pour le badge de rôle (ex: 'super-admin', 'admin', 'user')\r\n+  roleText: string;  // Texte du badge de rôle\r\n+  statusClass: string; // Classe CSS pour le badge de statut (ex: 'active', 'inactive')\r\n+  statusText: string;  // Texte du badge de statut\r\n+}\r\n \r\n-import { Component } from '@angular/core';\r\n-import Chart from 'chart.js/auto';\r\n \r\n @Component({\r\n   selector: 'app-dashboard',\r\n   templateUrl: './dashboard.component.html',\r\n+  styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n+})\r\n+export class DashboardComponent implements OnInit, AfterViewInit {\r\n+\r\n+  // --- Variables pour les statistiques (à lier dynamiquement depuis un service) ---\r\n+  pendingProjectCount: number = 12;\r\n+  inProgressProjectCount: number = 64;\r\n+  completedProjectCount: number = 105;\r\n+\r\n+  totalTasks: number = 56;\r\n+  assignedMembers: number = 8;\r\n+  relatedProjects: number = 30; // Ou peut-être le nombre de projets actifs ?\r\n+\r\n+  // --- Données d'exemple pour les tableaux ---\r\n+  // (Vous devrez utiliser *ngFor dans le HTML pour afficher ces données)\r\n+  projects: Project[] = [\r\n+    { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n+    { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n+    { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n+  ];\r\n+\r\n+  users: User[] = [\r\n+    { id: 101, fullName: 'Emna Sahnoun', email: 'sahnounemna03@gmail.com', roleClass: 'super-admin', roleText: 'SUPER-ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n+    { id: 102, fullName: 'John Doe', email: 'john.doe@example.com', roleClass: 'admin', roleText: 'ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n+    { id: 103, fullName: 'Jane Smith', email: 'jane.smith@example.com', roleClass: 'user', roleText: 'USER', statusClass: 'inactive', statusText: 'Inactif' },\r\n+  ];\r\n+\r\n+  // --- Chart Instance ---\r\n+  public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n+\r\n+  constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n+    // Exemple: this.loadDashboardData();\r\n+  }\r\n+\r\n+  ngAfterViewInit(): void {\r\n+    // Créer le graphique une fois que la vue est initialisée\r\n+    this.createChart();\r\n+  }\r\n+\r\n+  // --- Méthode pour créer le graphique ---\r\n+  createChart(): void {\r\n+    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n+    if (ctx) {\r\n+      // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n+      if (this.chart) {\r\n+        this.chart.destroy();\r\n+      }\r\n+\r\n+      this.chart = new Chart(ctx, {\r\n+        type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n+        data: {\r\n+          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n+          datasets: [{\r\n+            label: 'Tâches complétées', // Légende du dataset\r\n+            data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n+            backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n+            borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n+            borderWidth: 1\r\n+          }]\r\n+        },\r\n+        options: {\r\n+          responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n+          maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n+          scales: {\r\n+            y: {\r\n+              beginAtZero: true, // L'axe Y commence à 0\r\n+              title: {\r\n+                display: true,\r\n+                text: 'Nombre de tâches' // Titre de l'axe Y\r\n+              }\r\n+            },\r\n+            x: {\r\n+              title: {\r\n+                display: true,\r\n+                text: 'Mois' // Titre de l'axe X\r\n+              }\r\n+            }\r\n+          },\r\n+          plugins: {\r\n+            legend: {\r\n+              display: true, // Afficher la légende\r\n+              position: 'top', // Position de la légende\r\n+            },\r\n+            tooltip: {\r\n+              enabled: true // Activer les infobulles au survol\r\n+            }\r\n+          }\r\n+        }\r\n+      });\r\n+    } else {\r\n+      console.error(\"L'élément Canvas avec l'ID 'taskChart' n'a pas été trouvé.\");\r\n+    }\r\n+  }\r\n+\r\n+  // --- Méthodes pour les actions (placeholders) ---\r\n+\r\n+  addNewProject(): void {\r\n+    console.log('Action: Ajouter un nouveau projet');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewProject(project: Project): void {\r\n+    console.log('Action: Voir le projet', project);\r\n+    // Logique pour afficher les détails du projet (modal, navigation)\r\n+  }\r\n+\r\n+  editProject(project: Project): void {\r\n+    console.log('Action: Modifier le projet', project);\r\n+    // Logique pour ouvrir le formulaire d'édition du projet\r\n+  }\r\n+\r\n+  deleteProject(project: Project): void {\r\n+    console.warn('Action: Supprimer le projet', project);\r\n+    // Logique pour confirmer et supprimer le projet (appel API)\r\n+    // Pensez à mettre à jour this.projects après suppression\r\n+  }\r\n+\r\n+  addNewUser(): void {\r\n+    console.log('Action: Ajouter un nouvel utilisateur');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewUser(user: User): void {\r\n+    console.log('Action: Voir l\\'utilisateur', user);\r\n+     // Logique pour afficher les détails de l'utilisateur\r\n+  }\r\n+\r\n+  editUser(user: User): void {\r\n+    console.log('Action: Modifier l\\'utilisateur', user);\r\n+     // Logique pour ouvrir le formulaire d'édition de l'utilisateur\r\n+  }\r\n+\r\n+  deleteUser(user: User): void {\r\n+    console.warn('Action: Supprimer l\\'utilisateur', user);\r\n+    // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n+    // Pensez à mettre à jour this.users après suppression\r\n+  }\r\n+\r\n+  // --- Méthode pour charger les données (exemple) ---\r\n+  /*\r\n+  loadDashboardData(): void {\r\n+    // Simuler un appel API ou utiliser vos services\r\n+    this.myProjectService.getProjectStats().subscribe(stats => {\r\n+      this.pendingProjectCount = stats.pending;\r\n+      this.inProgressProjectCount = stats.inProgress;\r\n+      this.completedProjectCount = stats.completed;\r\n+    });\r\n+\r\n+    this.myTaskService.getTaskStats().subscribe(stats => {\r\n+       this.totalTasks = stats.total;\r\n+       this.assignedMembers = stats.members;\r\n+       this.relatedProjects = stats.activeProjects;\r\n+    });\r\n+\r\n+    this.myProjectService.getProjects().subscribe(projects => {\r\n+      this.projects = projects;\r\n+      // Si vous utilisez MatTableDataSource: this.projectDataSource.data = projects;\r\n+    });\r\n+\r\n+     this.myUserService.getUsers().subscribe(users => {\r\n+      this.users = users;\r\n+      // Si vous utilisez MatTableDataSource: this.userDataSource.data = users;\r\n+    });\r\n+  }\r\n+  */\r\n+\r\n+}\r\n+\r\n+\r\n+@Component({\r\n+  selector: 'app-dashboard',\r\n+  templateUrl: './dashboard.component.html',\r\n   styleUrl: './dashboard.component.scss'\r\n })\r\n export class DashboardComponent {\r\n   ngAfterViewInit(): void {\r\n"
                },
                {
                    "date": 1745433781520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,33 +202,6 @@\n   templateUrl: './dashboard.component.html',\r\n   styleUrl: './dashboard.component.scss'\r\n })\r\n export class DashboardComponent {\r\n-  ngAfterViewInit(): void {\r\n-    this.createChart();\r\n-  }\r\n-\r\n-  createChart() {\r\n-    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n-    if (ctx) {\r\n-      new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n-          datasets: [{\r\n-            label: 'Tâches complétées',\r\n-            data: [50, 60, 75, 90, 110, 130],\r\n-            backgroundColor: '#3498db',\r\n-            borderColor: '#2980b9',\r\n-            borderWidth: 1\r\n-          }]\r\n-        },\r\n-        options: {\r\n-          responsive: true,\r\n-          scales: {\r\n-            y: { beginAtZero: true }\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-  }\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1745433792380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,36 @@\n   ngOnInit(): void {\r\n     // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n     // Exemple: this.loadDashboardData();\r\n   }\r\n+  ngAfterViewInit(): void {\r\n+    this.createChart();\r\n+  }\r\n \r\n+  createChart() {\r\n+    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n+    if (ctx) {\r\n+      new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n+          datasets: [{\r\n+            label: 'Tâches complétées',\r\n+            data: [50, 60, 75, 90, 110, 130],\r\n+            backgroundColor: '#3498db',\r\n+            borderColor: '#2980b9',\r\n+            borderWidth: 1\r\n+          }]\r\n+        },\r\n+        options: {\r\n+          responsive: true,\r\n+          scales: {\r\n+            y: { beginAtZero: true }\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+  }\r\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n     this.createChart();\r\n   }\r\n@@ -201,7 +228,5 @@\n   selector: 'app-dashboard',\r\n   templateUrl: './dashboard.component.html',\r\n   styleUrl: './dashboard.component.scss'\r\n })\r\n-export class DashboardComponent {\r\n-  \r\n-}\r\n+\r\n"
                },
                {
                    "date": 1745433804297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,36 +60,9 @@\n   ngOnInit(): void {\r\n     // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n     // Exemple: this.loadDashboardData();\r\n   }\r\n-  ngAfterViewInit(): void {\r\n-    this.createChart();\r\n-  }\r\n \r\n-  createChart() {\r\n-    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n-    if (ctx) {\r\n-      new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n-          datasets: [{\r\n-            label: 'Tâches complétées',\r\n-            data: [50, 60, 75, 90, 110, 130],\r\n-            backgroundColor: '#3498db',\r\n-            borderColor: '#2980b9',\r\n-            borderWidth: 1\r\n-          }]\r\n-        },\r\n-        options: {\r\n-          responsive: true,\r\n-          scales: {\r\n-            y: { beginAtZero: true }\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-  }\r\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n     this.createChart();\r\n   }\r\n@@ -223,10 +196,5 @@\n \r\n }\r\n \r\n \r\n-@Component({\r\n-  selector: 'app-dashboard',\r\n-  templateUrl: './dashboard.component.html',\r\n-  styleUrl: './dashboard.component.scss'\r\n-})\r\n \r\n"
                },
                {
                    "date": 1745434005112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n+import { MatTableDataSource } from '@angular/material/table';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n"
                },
                {
                    "date": 1745434033241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,15 @@\n   templateUrl: './dashboard.component.html',\r\n   styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n-\r\n+// --- Variables pour les statistiques ---\r\n+pendingProjectCount: number = 12;\r\n+inProgressProjectCount: number = 64;\r\n+completedProjectCount: number = 105;\r\n+totalTasks: number = 56;\r\n+assignedMembers: number = 8;\r\n+relatedProjects: number = 30;\r\n   // --- Variables pour les statistiques (à lier dynamiquement depuis un service) ---\r\n   pendingProjectCount: number = 12;\r\n   inProgressProjectCount: number = 64;\r\n   completedProjectCount: number = 105;\r\n"
                },
                {
                    "date": 1745434038927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n+import Chart from 'chart.js/auto'; // Import Chart.js\r\n+import { MatTableDataSource } from '@angular/material/table';\r\n+\r\n+// Interface pour la structure des données de projet (basée sur le HTML)\r\n+export interface Project {\r\n+  id: number; // Ajout d'un ID pour la gestion\r\n+  name: string;\r\n+  statusClass: string; // Classe CSS pour le badge (ex: 'in-progress', 'completed')\r\n+  statusText: string;  // Texte du badge (ex: 'En cours', 'Terminé')\r\n+  progress: number;    // Pourcentage de progression\r\n+}\r\n+\r\n+// Interface pour la structure des données utilisateur (basée sur le HTML)\r\n+export interface User {\r\n+  id: number; // Ajout d'un ID\r\n+  fullName: string;\r\n+  email: string;\r\n+  roleClass: string; // Classe CSS pour le badge de rôle (ex: 'super-admin', 'admin', 'user')\r\n+  roleText: string;  // Texte du badge de rôle\r\n+  statusClass: string; // Classe CSS pour le badge de statut (ex: 'active', 'inactive')\r\n+  statusText: string;  // Texte du badge de statut\r\n+}\r\n+\r\n+\r\n+@Component({\r\n+  selector: 'app-dashboard',\r\n+  templateUrl: './dashboard.component.html',\r\n+  styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n+})\r\n+export class DashboardComponent implements OnInit, AfterViewInit {\r\n+// --- Variables pour les statistiques ---\r\n+pendingProjectCount: number = 12;\r\n+inProgressProjectCount: number = 64;\r\n+completedProjectCount: number = 105;\r\n+totalTasks: number = 56;\r\n+assignedMembers: number = 8;\r\n+relatedProjects: number = 30;\r\n+\r\n+\r\n+  // --- Données d'exemple pour les tableaux ---\r\n+  // (Vous devrez utiliser *ngFor dans le HTML pour afficher ces données)\r\n+  projects: Project[] = [\r\n+    { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n+    { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n+    { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n+  ];\r\n+\r\n+  users: User[] = [\r\n+    { id: 101, fullName: 'Emna Sahnoun', email: 'sahnounemna03@gmail.com', roleClass: 'super-admin', roleText: 'SUPER-ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n+    { id: 102, fullName: 'John Doe', email: 'john.doe@example.com', roleClass: 'admin', roleText: 'ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n+    { id: 103, fullName: 'Jane Smith', email: 'jane.smith@example.com', roleClass: 'user', roleText: 'USER', statusClass: 'inactive', statusText: 'Inactif' },\r\n+  ];\r\n+\r\n+  // --- Chart Instance ---\r\n+  public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n+\r\n+  constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n+    // Exemple: this.loadDashboardData();\r\n+  }\r\n+\r\n+  ngAfterViewInit(): void {\r\n+    // Créer le graphique une fois que la vue est initialisée\r\n+    this.createChart();\r\n+  }\r\n+\r\n+  // --- Méthode pour créer le graphique ---\r\n+  createChart(): void {\r\n+    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n+    if (ctx) {\r\n+      // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n+      if (this.chart) {\r\n+        this.chart.destroy();\r\n+      }\r\n+\r\n+      this.chart = new Chart(ctx, {\r\n+        type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n+        data: {\r\n+          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n+          datasets: [{\r\n+            label: 'Tâches complétées', // Légende du dataset\r\n+            data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n+            backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n+            borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n+            borderWidth: 1\r\n+          }]\r\n+        },\r\n+        options: {\r\n+          responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n+          maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n+          scales: {\r\n+            y: {\r\n+              beginAtZero: true, // L'axe Y commence à 0\r\n+              title: {\r\n+                display: true,\r\n+                text: 'Nombre de tâches' // Titre de l'axe Y\r\n+              }\r\n+            },\r\n+            x: {\r\n+              title: {\r\n+                display: true,\r\n+                text: 'Mois' // Titre de l'axe X\r\n+              }\r\n+            }\r\n+          },\r\n+          plugins: {\r\n+            legend: {\r\n+              display: true, // Afficher la légende\r\n+              position: 'top', // Position de la légende\r\n+            },\r\n+            tooltip: {\r\n+              enabled: true // Activer les infobulles au survol\r\n+            }\r\n+          }\r\n+        }\r\n+      });\r\n+    } else {\r\n+      console.error(\"L'élément Canvas avec l'ID 'taskChart' n'a pas été trouvé.\");\r\n+    }\r\n+  }\r\n+\r\n+  // --- Méthodes pour les actions (placeholders) ---\r\n+\r\n+  addNewProject(): void {\r\n+    console.log('Action: Ajouter un nouveau projet');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewProject(project: Project): void {\r\n+    console.log('Action: Voir le projet', project);\r\n+    // Logique pour afficher les détails du projet (modal, navigation)\r\n+  }\r\n+\r\n+  editProject(project: Project): void {\r\n+    console.log('Action: Modifier le projet', project);\r\n+    // Logique pour ouvrir le formulaire d'édition du projet\r\n+  }\r\n+\r\n+  deleteProject(project: Project): void {\r\n+    console.warn('Action: Supprimer le projet', project);\r\n+    // Logique pour confirmer et supprimer le projet (appel API)\r\n+    // Pensez à mettre à jour this.projects après suppression\r\n+  }\r\n+\r\n+  addNewUser(): void {\r\n+    console.log('Action: Ajouter un nouvel utilisateur');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewUser(user: User): void {\r\n+    console.log('Action: Voir l\\'utilisateur', user);\r\n+     // Logique pour afficher les détails de l'utilisateur\r\n+  }\r\n+\r\n+  editUser(user: User): void {\r\n+    console.log('Action: Modifier l\\'utilisateur', user);\r\n+     // Logique pour ouvrir le formulaire d'édition de l'utilisateur\r\n+  }\r\n+\r\n+  deleteUser(user: User): void {\r\n+    console.warn('Action: Supprimer l\\'utilisateur', user);\r\n+    // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n+    // Pensez à mettre à jour this.users après suppression\r\n+  }\r\n+\r\n+  // --- Méthode pour charger les données (exemple) ---\r\n+  /*\r\n+  loadDashboardData(): void {\r\n+    // Simuler un appel API ou utiliser vos services\r\n+    this.myProjectService.getProjectStats().subscribe(stats => {\r\n+      this.pendingProjectCount = stats.pending;\r\n+      this.inProgressProjectCount = stats.inProgress;\r\n+      this.completedProjectCount = stats.completed;\r\n+    });\r\n+\r\n+    this.myTaskService.getTaskStats().subscribe(stats => {\r\n+       this.totalTasks = stats.total;\r\n+       this.assignedMembers = stats.members;\r\n+       this.relatedProjects = stats.activeProjects;\r\n+    });\r\n+\r\n+    this.myProjectService.getProjects().subscribe(projects => {\r\n+      this.projects = projects;\r\n+      // Si vous utilisez MatTableDataSource: this.projectDataSource.data = projects;\r\n+    });\r\n+\r\n+     this.myUserService.getUsers().subscribe(users => {\r\n+      this.users = users;\r\n+      // Si vous utilisez MatTableDataSource: this.userDataSource.data = users;\r\n+    });\r\n+  }\r\n+  */\r\n+\r\n+}\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1745434054825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,217 +35,17 @@\n completedProjectCount: number = 105;\r\n totalTasks: number = 56;\r\n assignedMembers: number = 8;\r\n relatedProjects: number = 30;\r\n+projectDataSource = new MatTableDataSource<Project>();\r\n+  userDataSource = new MatTableDataSource<User>();\r\n \r\n+  // --- Déclaration des colonnes affichées (doivent correspondre aux matColumnDef) ---\r\n+  projectDisplayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n+  userDisplayedColumns: string[] = ['fullName', 'email', 'role', 'status', 'actions'];\r\n \r\n-  // --- Données d'exemple pour les tableaux ---\r\n-  // (Vous devrez utiliser *ngFor dans le HTML pour afficher ces données)\r\n-  projects: Project[] = [\r\n-    { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n-    { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n-    { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n-  ];\r\n \r\n-  users: User[] = [\r\n-    { id: 101, fullName: 'Emna Sahnoun', email: 'sahnounemna03@gmail.com', roleClass: 'super-admin', roleText: 'SUPER-ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n-    { id: 102, fullName: 'John Doe', email: 'john.doe@example.com', roleClass: 'admin', roleText: 'ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n-    { id: 103, fullName: 'Jane Smith', email: 'jane.smith@example.com', roleClass: 'user', roleText: 'USER', statusClass: 'inactive', statusText: 'Inactif' },\r\n-  ];\r\n \r\n-  // --- Chart Instance ---\r\n-  public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n-\r\n-  constructor() { }\r\n-\r\n-  ngOnInit(): void {\r\n-    // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n-    // Exemple: this.loadDashboardData();\r\n-  }\r\n-\r\n-  ngAfterViewInit(): void {\r\n-    // Créer le graphique une fois que la vue est initialisée\r\n-    this.createChart();\r\n-  }\r\n-\r\n-  // --- Méthode pour créer le graphique ---\r\n-  createChart(): void {\r\n-    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n-    if (ctx) {\r\n-      // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n-      if (this.chart) {\r\n-        this.chart.destroy();\r\n-      }\r\n-\r\n-      this.chart = new Chart(ctx, {\r\n-        type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n-        data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n-          datasets: [{\r\n-            label: 'Tâches complétées', // Légende du dataset\r\n-            data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n-            backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n-            borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n-            borderWidth: 1\r\n-          }]\r\n-        },\r\n-        options: {\r\n-          responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n-          maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n-          scales: {\r\n-            y: {\r\n-              beginAtZero: true, // L'axe Y commence à 0\r\n-              title: {\r\n-                display: true,\r\n-                text: 'Nombre de tâches' // Titre de l'axe Y\r\n-              }\r\n-            },\r\n-            x: {\r\n-              title: {\r\n-                display: true,\r\n-                text: 'Mois' // Titre de l'axe X\r\n-              }\r\n-            }\r\n-          },\r\n-          plugins: {\r\n-            legend: {\r\n-              display: true, // Afficher la légende\r\n-              position: 'top', // Position de la légende\r\n-            },\r\n-            tooltip: {\r\n-              enabled: true // Activer les infobulles au survol\r\n-            }\r\n-          }\r\n-        }\r\n-      });\r\n-    } else {\r\n-      console.error(\"L'élément Canvas avec l'ID 'taskChart' n'a pas été trouvé.\");\r\n-    }\r\n-  }\r\n-\r\n-  // --- Méthodes pour les actions (placeholders) ---\r\n-\r\n-  addNewProject(): void {\r\n-    console.log('Action: Ajouter un nouveau projet');\r\n-    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n-  }\r\n-\r\n-  viewProject(project: Project): void {\r\n-    console.log('Action: Voir le projet', project);\r\n-    // Logique pour afficher les détails du projet (modal, navigation)\r\n-  }\r\n-\r\n-  editProject(project: Project): void {\r\n-    console.log('Action: Modifier le projet', project);\r\n-    // Logique pour ouvrir le formulaire d'édition du projet\r\n-  }\r\n-\r\n-  deleteProject(project: Project): void {\r\n-    console.warn('Action: Supprimer le projet', project);\r\n-    // Logique pour confirmer et supprimer le projet (appel API)\r\n-    // Pensez à mettre à jour this.projects après suppression\r\n-  }\r\n-\r\n-  addNewUser(): void {\r\n-    console.log('Action: Ajouter un nouvel utilisateur');\r\n-    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n-  }\r\n-\r\n-  viewUser(user: User): void {\r\n-    console.log('Action: Voir l\\'utilisateur', user);\r\n-     // Logique pour afficher les détails de l'utilisateur\r\n-  }\r\n-\r\n-  editUser(user: User): void {\r\n-    console.log('Action: Modifier l\\'utilisateur', user);\r\n-     // Logique pour ouvrir le formulaire d'édition de l'utilisateur\r\n-  }\r\n-\r\n-  deleteUser(user: User): void {\r\n-    console.warn('Action: Supprimer l\\'utilisateur', user);\r\n-    // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n-    // Pensez à mettre à jour this.users après suppression\r\n-  }\r\n-\r\n-  // --- Méthode pour charger les données (exemple) ---\r\n-  /*\r\n-  loadDashboardData(): void {\r\n-    // Simuler un appel API ou utiliser vos services\r\n-    this.myProjectService.getProjectStats().subscribe(stats => {\r\n-      this.pendingProjectCount = stats.pending;\r\n-      this.inProgressProjectCount = stats.inProgress;\r\n-      this.completedProjectCount = stats.completed;\r\n-    });\r\n-\r\n-    this.myTaskService.getTaskStats().subscribe(stats => {\r\n-       this.totalTasks = stats.total;\r\n-       this.assignedMembers = stats.members;\r\n-       this.relatedProjects = stats.activeProjects;\r\n-    });\r\n-\r\n-    this.myProjectService.getProjects().subscribe(projects => {\r\n-      this.projects = projects;\r\n-      // Si vous utilisez MatTableDataSource: this.projectDataSource.data = projects;\r\n-    });\r\n-\r\n-     this.myUserService.getUsers().subscribe(users => {\r\n-      this.users = users;\r\n-      // Si vous utilisez MatTableDataSource: this.userDataSource.data = users;\r\n-    });\r\n-  }\r\n-  */\r\n-\r\n-}\r\n-\r\n-\r\n-\r\n-import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n-import Chart from 'chart.js/auto'; // Import Chart.js\r\n-import { MatTableDataSource } from '@angular/material/table';\r\n-\r\n-// Interface pour la structure des données de projet (basée sur le HTML)\r\n-export interface Project {\r\n-  id: number; // Ajout d'un ID pour la gestion\r\n-  name: string;\r\n-  statusClass: string; // Classe CSS pour le badge (ex: 'in-progress', 'completed')\r\n-  statusText: string;  // Texte du badge (ex: 'En cours', 'Terminé')\r\n-  progress: number;    // Pourcentage de progression\r\n-}\r\n-\r\n-// Interface pour la structure des données utilisateur (basée sur le HTML)\r\n-export interface User {\r\n-  id: number; // Ajout d'un ID\r\n-  fullName: string;\r\n-  email: string;\r\n-  roleClass: string; // Classe CSS pour le badge de rôle (ex: 'super-admin', 'admin', 'user')\r\n-  roleText: string;  // Texte du badge de rôle\r\n-  statusClass: string; // Classe CSS pour le badge de statut (ex: 'active', 'inactive')\r\n-  statusText: string;  // Texte du badge de statut\r\n-}\r\n-\r\n-\r\n-@Component({\r\n-  selector: 'app-dashboard',\r\n-  templateUrl: './dashboard.component.html',\r\n-  styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n-})\r\n-export class DashboardComponent implements OnInit, AfterViewInit {\r\n-// --- Variables pour les statistiques ---\r\n-pendingProjectCount: number = 12;\r\n-inProgressProjectCount: number = 64;\r\n-completedProjectCount: number = 105;\r\n-totalTasks: number = 56;\r\n-assignedMembers: number = 8;\r\n-relatedProjects: number = 30;\r\n-  // --- Variables pour les statistiques (à lier dynamiquement depuis un service) ---\r\n-  pendingProjectCount: number = 12;\r\n-  inProgressProjectCount: number = 64;\r\n-  completedProjectCount: number = 105;\r\n-\r\n-  totalTasks: number = 56;\r\n-  assignedMembers: number = 8;\r\n-  relatedProjects: number = 30; // Ou peut-être le nombre de projets actifs ?\r\n-\r\n   // --- Données d'exemple pour les tableaux ---\r\n   // (Vous devrez utiliser *ngFor dans le HTML pour afficher ces données)\r\n   projects: Project[] = [\r\n     { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n"
                },
                {
                    "date": 1745437074278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,61 +74,65 @@\n     this.createChart();\r\n   }\r\n \r\n   // --- Méthode pour créer le graphique ---\r\n-  createChart(): void {\r\n-    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n-    if (ctx) {\r\n-      // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n-      if (this.chart) {\r\n-        this.chart.destroy();\r\n-      }\r\n-\r\n-      this.chart = new Chart(ctx, {\r\n-        type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n-        data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n-          datasets: [{\r\n-            label: 'Tâches complétées', // Légende du dataset\r\n-            data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n-            backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n-            borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n-            borderWidth: 1\r\n-          }]\r\n-        },\r\n-        options: {\r\n-          responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n-          maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n-          scales: {\r\n-            y: {\r\n-              beginAtZero: true, // L'axe Y commence à 0\r\n-              title: {\r\n-                display: true,\r\n-                text: 'Nombre de tâches' // Titre de l'axe Y\r\n+    // --- Méthode pour créer le graphique ---\r\n+    createChart(): void {\r\n+      // Correction : Utiliser l'ID 'taskChartDashboard' qui correspond à l'HTML\r\n+      const ctx = document.getElementById('taskChartDashboard') as HTMLCanvasElement;\r\n+      if (ctx) {\r\n+        // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n+        if (this.chart) {\r\n+          this.chart.destroy();\r\n+        }\r\n+  \r\n+        this.chart = new Chart(ctx, {\r\n+          type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n+          data: {\r\n+            labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n+            datasets: [{\r\n+              label: 'Tâches complétées', // Légende du dataset\r\n+              data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n+              backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n+              borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n+              borderWidth: 1\r\n+            }]\r\n+          },\r\n+          options: {\r\n+            responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n+            maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n+            scales: {\r\n+              y: {\r\n+                beginAtZero: true, // L'axe Y commence à 0\r\n+                title: {\r\n+                  display: true,\r\n+                  text: 'Nombre de tâches' // Titre de l'axe Y\r\n+                }\r\n+              },\r\n+              x: {\r\n+                title: {\r\n+                  display: true,\r\n+                  text: 'Mois' // Titre de l'axe X\r\n+                }\r\n               }\r\n             },\r\n-            x: {\r\n-              title: {\r\n-                display: true,\r\n-                text: 'Mois' // Titre de l'axe X\r\n+            plugins: {\r\n+              legend: {\r\n+                display: true, // Afficher la légende\r\n+                position: 'top', // Position de la légende\r\n+              },\r\n+              tooltip: {\r\n+                enabled: true // Activer les infobulles au survol\r\n               }\r\n             }\r\n-          },\r\n-          plugins: {\r\n-            legend: {\r\n-              display: true, // Afficher la légende\r\n-              position: 'top', // Position de la légende\r\n-            },\r\n-            tooltip: {\r\n-              enabled: true // Activer les infobulles au survol\r\n-            }\r\n           }\r\n-        }\r\n-      });\r\n-    } else {\r\n-      console.error(\"L'élément Canvas avec l'ID 'taskChart' n'a pas été trouvé.\");\r\n+        });\r\n+      } else {\r\n+        // Le message d'erreur sera maintenant correct si l'élément n'est toujours pas trouvé\r\n+        console.error(\"L'élément Canvas avec l'ID 'taskChartDashboard' n'a pas été trouvé.\");\r\n+      }\r\n     }\r\n-  }\r\n+  \r\n \r\n   // --- Méthodes pour les actions (placeholders) ---\r\n \r\n   addNewProject(): void {\r\n"
                },
                {
                    "date": 1745488627598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,8 @@\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n     this.createChart();\r\n   }\r\n-\r\n-  // --- Méthode pour créer le graphique ---\r\n-    // --- Méthode pour créer le graphique ---\r\n     createChart(): void {\r\n       // Correction : Utiliser l'ID 'taskChartDashboard' qui correspond à l'HTML\r\n       const ctx = document.getElementById('taskChartDashboard') as HTMLCanvasElement;\r\n       if (ctx) {\r\n"
                },
                {
                    "date": 1745489173517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,36 +173,10 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n \r\n-  // --- Méthode pour charger les données (exemple) ---\r\n-  /*\r\n-  loadDashboardData(): void {\r\n-    // Simuler un appel API ou utiliser vos services\r\n-    this.myProjectService.getProjectStats().subscribe(stats => {\r\n-      this.pendingProjectCount = stats.pending;\r\n-      this.inProgressProjectCount = stats.inProgress;\r\n-      this.completedProjectCount = stats.completed;\r\n-    });\r\n+ \r\n \r\n-    this.myTaskService.getTaskStats().subscribe(stats => {\r\n-       this.totalTasks = stats.total;\r\n-       this.assignedMembers = stats.members;\r\n-       this.relatedProjects = stats.activeProjects;\r\n-    });\r\n-\r\n-    this.myProjectService.getProjects().subscribe(projects => {\r\n-      this.projects = projects;\r\n-      // Si vous utilisez MatTableDataSource: this.projectDataSource.data = projects;\r\n-    });\r\n-\r\n-     this.myUserService.getUsers().subscribe(users => {\r\n-      this.users = users;\r\n-      // Si vous utilisez MatTableDataSource: this.userDataSource.data = users;\r\n-    });\r\n-  }\r\n-  */\r\n-\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1745489179799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,68 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n \r\n+ loadUsers(): void {\r\n+     this.isLoadingUsers = true; // Set loading state\r\n+     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n  \r\n+     this.agenceService.getMembersByGroupName(this.agency.name).pipe(\r\n+       // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n+       finalize(() => this.isLoadingUsers = false),\r\n+       // Handle potential error from getMembersByGroupName itself\r\n+       catchError(err => {\r\n+         console.error('Failed to get group members', err);\r\n+         this.users = []; // Clear users on error\r\n+         // Optional: Show error message\r\n+         // this.toastr.error(`Erreur chargement membres: ${err.message || 'Erreur inconnue'}`);\r\n+         return of([]); // Return empty array to prevent breaking the stream\r\n+       }),\r\n+       // If members are found, proceed to get roles\r\n+       mergeMap(users => {\r\n+         if (!users || users.length === 0) {\r\n+           return of([]); // No users, return empty array observable\r\n+         }\r\n+         return from(users); // Process users one by one\r\n+       }),\r\n+       mergeMap(user => {\r\n+         // Fetch roles for each user\r\n+         return this.userService.getUserRoles(user.id).pipe(\r\n+           map(roles => {\r\n+             // Find the highest role based on the defined hierarchy\r\n+             const userRoles = roles.map(r => r.name.toUpperCase()); // Ensure case-insensitivity\r\n+             const highestRole = ROLE_HIERARCHY.find(role =>\r\n+               userRoles.includes(role)\r\n+             ) || 'USER'; // Default to 'USER' or 'Aucun rôle' if preferred\r\n+ \r\n+             return {\r\n+               ...user,\r\n+               role: highestRole // Add the determined role to the user object\r\n+             };\r\n+           }),\r\n+           // Handle errors fetching roles for a specific user\r\n+           catchError(() => of({\r\n+             ...user,\r\n+             role: 'Erreur Rôle' // Indicate role fetching error\r\n+           })),\r\n+           timeout(8000) // Add a slightly longer timeout for role fetching\r\n+         );\r\n+       }, 5), // Concurrency limit for fetching roles\r\n+       toArray() // Collect all processed users back into an array\r\n+     ).subscribe({\r\n+       next: (usersWithRoles) => {\r\n+         this.users = usersWithRoles;\r\n+         console.log(\"Users avec rôles:\", this.users);\r\n+       },\r\n+       error: (err) => {\r\n+         // This error would likely be from the final toArray or timeout\r\n+         console.error('Failed to load users with roles', err);\r\n+         \r\n+         this.users = []; // Clear users on final error\r\n+       }\r\n+       // No need for complete block if using finalize for loading state\r\n+     });\r\n+   }\r\n \r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1745489206178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,8 @@\n   projectDisplayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n   userDisplayedColumns: string[] = ['fullName', 'email', 'role', 'status', 'actions'];\r\n \r\n \r\n-\r\n-  // --- Données d'exemple pour les tableaux ---\r\n-  // (Vous devrez utiliser *ngFor dans le HTML pour afficher ces données)\r\n   projects: Project[] = [\r\n     { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n     { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n     { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n@@ -228,11 +225,11 @@\n        error: (err) => {\r\n          // This error would likely be from the final toArray or timeout\r\n          console.error('Failed to load users with roles', err);\r\n          \r\n-         this.users = []; // Clear users on final error\r\n+         this.users = []; \r\n        }\r\n-       // No need for complete block if using finalize for loading state\r\n+      \r\n      });\r\n    }\r\n \r\n }\r\n"
                },
                {
                    "date": 1745489215647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n relatedProjects: number = 30;\r\n projectDataSource = new MatTableDataSource<Project>();\r\n   userDataSource = new MatTableDataSource<User>();\r\n \r\n-  // --- Déclaration des colonnes affichées (doivent correspondre aux matColumnDef) ---\r\n   projectDisplayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n   userDisplayedColumns: string[] = ['fullName', 'email', 'role', 'status', 'actions'];\r\n \r\n \r\n@@ -50,11 +49,9 @@\n     { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n   ];\r\n \r\n   users: User[] = [\r\n-    { id: 101, fullName: 'Emna Sahnoun', email: 'sahnounemna03@gmail.com', roleClass: 'super-admin', roleText: 'SUPER-ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n-    { id: 102, fullName: 'John Doe', email: 'john.doe@example.com', roleClass: 'admin', roleText: 'ADMIN', statusClass: 'active', statusText: 'Actif' },\r\n-    { id: 103, fullName: 'Jane Smith', email: 'jane.smith@example.com', roleClass: 'user', roleText: 'USER', statusClass: 'inactive', statusText: 'Inactif' },\r\n+    \r\n   ];\r\n \r\n   // --- Chart Instance ---\r\n   public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n"
                },
                {
                    "date": 1745489220812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,9 @@\n     { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n     { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n   ];\r\n \r\n-  users: User[] = [\r\n-    \r\n-  ];\r\n+  users: User[] = [];\r\n \r\n   // --- Chart Instance ---\r\n   public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n \r\n"
                },
                {
                    "date": 1745489229054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,10 @@\n   templateUrl: './dashboard.component.html',\r\n   styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n+\r\n+  isLoadingUsers\r\n // --- Variables pour les statistiques ---\r\n pendingProjectCount: number = 12;\r\n inProgressProjectCount: number = 64;\r\n completedProjectCount: number = 105;\r\n"
                },
                {
                    "date": 1745489249711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,10 @@\n   styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n \r\n-  isLoadingUsers\r\n+  isLoadingUsers = false; // Flag for loading state\r\n+\r\n // --- Variables pour les statistiques ---\r\n pendingProjectCount: number = 12;\r\n inProgressProjectCount: number = 64;\r\n completedProjectCount: number = 105;\r\n@@ -55,9 +56,9 @@\n \r\n   // --- Chart Instance ---\r\n   public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n \r\n-  constructor() { }\r\n+  constructor( private) { }\r\n \r\n   ngOnInit(): void {\r\n     // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n     // Exemple: this.loadDashboardData();\r\n"
                },
                {
                    "date": 1745489255608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n+import { AgenceService } from '../services/agenceService';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n@@ -56,9 +57,9 @@\n \r\n   // --- Chart Instance ---\r\n   public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n \r\n-  constructor( private) { }\r\n+  constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n \r\n   ngOnInit(): void {\r\n     // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n     // Exemple: this.loadDashboardData();\r\n"
                },
                {
                    "date": 1745489264389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n+import { UserService } from '../services/UserService';\r\n+import { finalize } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n"
                },
                {
                    "date": 1745489271574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n import { UserService } from '../services/UserService';\r\n-import { finalize } from 'rxjs';\r\n+import { catchError, finalize } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n@@ -181,11 +181,9 @@\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n          console.error('Failed to get group members', err);\r\n-         this.users = []; // Clear users on error\r\n-         // Optional: Show error message\r\n-         // this.toastr.error(`Erreur chargement membres: ${err.message || 'Erreur inconnue'}`);\r\n+         this.users = []; \r\n          return of([]); // Return empty array to prevent breaking the stream\r\n        }),\r\n        // If members are found, proceed to get roles\r\n        mergeMap(users => {\r\n"
                },
                {
                    "date": 1745489277406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n import { UserService } from '../services/UserService';\r\n-import { catchError, finalize } from 'rxjs';\r\n+import { catchError, finalize, of } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n@@ -182,9 +182,9 @@\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n          console.error('Failed to get group members', err);\r\n          this.users = []; \r\n-         return of([]); // Return empty array to prevent breaking the stream\r\n+         return of([]); \r\n        }),\r\n        // If members are found, proceed to get roles\r\n        mergeMap(users => {\r\n          if (!users || users.length === 0) {\r\n"
                },
                {
                    "date": 1745489282943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n          console.error('Failed to get group members', err);\r\n          this.users = []; \r\n-         return of([]); \r\n+         return of([]); // Return empty array to prevent breaking the stream\r\n        }),\r\n        // If members are found, proceed to get roles\r\n        mergeMap(users => {\r\n          if (!users || users.length === 0) {\r\n"
                },
                {
                    "date": 1745489289142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n import { UserService } from '../services/UserService';\r\n-import { catchError, finalize, of } from 'rxjs';\r\n+import { catchError, finalize, from, mergeMap, of } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n"
                },
                {
                    "date": 1745489295536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n import { UserService } from '../services/UserService';\r\n-import { catchError, finalize, from, mergeMap, of } from 'rxjs';\r\n+import { catchError, finalize, from, map, mergeMap, of, timeout } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n"
                },
                {
                    "date": 1745489319713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n import { UserService } from '../services/UserService';\r\n-import { catchError, finalize, from, map, mergeMap, of, timeout } from 'rxjs';\r\n+import { catchError, finalize, from, map, mergeMap, of, timeout, toArray } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n@@ -174,9 +174,9 @@\n \r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n- \r\n+  \r\n      this.agenceService.getMembersByGroupName(this.agency.name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n"
                },
                {
                    "date": 1745489328145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(this.agency.name).pipe(\r\n+     this.agenceService.getMembersByGroupName(thi.name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745489336506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(thi.name).pipe(\r\n+     this.agenceService.getMembersByGroupName(this.get.name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745489342132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(this.get.name).pipe(\r\n+     this.agenceService.getMembersByGroupName(this.agenceService.name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745489349085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(this.agenceService.name).pipe(\r\n+     this.agenceService.getMembersByGroupName(this.agenceService.getAgenceByUser.name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745489354645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(this.agenceService.getAgenceByUser.name).pipe(\r\n+     this.agenceService.getMembersByGroupName(this.agenceService.getAgenceByUser().name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745489364961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(this.agenceService.getAgenceByUser().name).pipe(\r\n+     this.agenceService.getMembersByGroupName(.name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745489371777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(.name).pipe(\r\n+     this.agenceService.getMembersByGroupName(this.agency.name).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745489384755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n     console.warn('Action: Supprimer l\\'utilisateur', user);\r\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n-\r\n+getAgence\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n"
                },
                {
                    "date": 1745489397407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n     console.warn('Action: Supprimer l\\'utilisateur', user);\r\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n-getAgence\r\n+getAgence()\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n"
                },
                {
                    "date": 1745489405560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,11 @@\n     console.warn('Action: Supprimer l\\'utilisateur', user);\r\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n-getAgence()\r\n+getAgence():void{\r\n+  \r\n+}\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n"
                },
                {
                    "date": 1745489412366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  \r\n+  return\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489417789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return\r\n+  return this.agenceService.getAgence();\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489425331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgence();\r\n+  return this.agenceService.g\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489430878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.g\r\n+  return this.agenceService.get\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489438128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.get\r\n+  return this.agenceService.getAgenceByUser()\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489563316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser()\r\n+  return this.agenceService.getAgenceByUser(lo)\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489571191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser(lo)\r\n+  return this.agenceService.getAgenceByUser(localStorage.getItem('user_profile'))\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489586044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,10 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser(localStorage.getItem('user_profile'))\r\n+  return this.agenceService.getAgenceByUser(localStorage.getItem('user_profile').preferred_username\r\n+)\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489618908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,10 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser(localStorage.getItem('user_profile').preferred_username\r\n-)\r\n+  return this.agenceService.getAgenceByUser(localStorage.getItem('user_profile').preferred_username);\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489629899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser(localStorage.getItem('user_profile').preferred_username);\r\n+  return this.agenceService.getAgenceByUser(this.localStorage.getItem('user_profile').preferred_username);\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489636269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser(this.localStorage.getItem('user_profile').preferred_username);\r\n+  return this.agenceService.getAgenceByUser(this.agenceService localStorage.getItem('user_profile').preferred_username);\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489643752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser(this.agenceService localStorage.getItem('user_profile').preferred_username);\r\n+  return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername localStorage.getItem('user_profile').preferred_username);\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489654407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername localStorage.getItem('user_profile').preferred_username);\r\n+  return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745489887804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n \r\n   isLoadingUsers = false; // Flag for loading state\r\n+  isLoadingAgency = false;\r\n \r\n // --- Variables pour les statistiques ---\r\n pendingProjectCount: number = 12;\r\n inProgressProjectCount: number = 64;\r\n"
                },
                {
                    "date": 1745489926632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n \r\n-  isLoadingUsers = false; // Flag for loading state\r\n+  isLoadingUsers = false;\r\n   isLoadingAgency = false;\r\n \r\n // --- Variables pour les statistiques ---\r\n pendingProjectCount: number = 12;\r\n@@ -172,8 +172,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n+  \r\n   return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n"
                },
                {
                    "date": 1745489932501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n-  \r\n+  this.isLoadingAgency = true;\r\n   return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n"
                },
                {
                    "date": 1745489941930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,8 +173,10 @@\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n   this.isLoadingAgency = true;\r\n+  const username = localStorage.getItem('preferred_username'); // Adjust key if necessary\r\n+\r\n   return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n"
                },
                {
                    "date": 1745489953942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,10 @@\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n getAgence():void{\r\n   this.isLoadingAgency = true;\r\n-  const username = localStorage.getItem('preferred_username'); // Adjust key if necessary\r\n+  const username = localStorage.getItem('preferred_username'); \r\n+  \r\n \r\n   return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n }\r\n  loadUsers(): void {\r\n"
                },
                {
                    "date": 1745489964059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,15 @@\n   }\r\n getAgence():void{\r\n   this.isLoadingAgency = true;\r\n   const username = localStorage.getItem('preferred_username'); \r\n-  \r\n+  if (!username) {\r\n+    console.error(\"Nom d'utilisateur non trouvé dans le localStorage.\");\r\n+    this.isLoadingAgency = false;\r\n+    // Optionally: Show an error message to the user\r\n+    this.userDataSource.data = []; // Clear users table\r\n+    return;\r\n+  }\r\n \r\n   return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n }\r\n  loadUsers(): void {\r\n"
                },
                {
                    "date": 1745489969635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,10 +177,8 @@\n   const username = localStorage.getItem('preferred_username'); \r\n   if (!username) {\r\n     console.error(\"Nom d'utilisateur non trouvé dans le localStorage.\");\r\n     this.isLoadingAgency = false;\r\n-    // Optionally: Show an error message to the user\r\n-    this.userDataSource.data = []; // Clear users table\r\n     return;\r\n   }\r\n \r\n   return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n"
                },
                {
                    "date": 1745490010753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,53 @@\n     console.error(\"Nom d'utilisateur non trouvé dans le localStorage.\");\r\n     this.isLoadingAgency = false;\r\n     return;\r\n   }\r\n+  this.agenceService.getUserByUsername(username).pipe(\r\n+    takeUntil(this.destroy$), // Unsubscribe when component is destroyed\r\n+    switchMap(user => {\r\n+      if (!user || !user.id) {\r\n+        // Use throwError to propagate the error correctly\r\n+        return throwError(() => new Error(`Utilisateur Keycloak '${username}' introuvable ou ID manquant.`));\r\n+      }\r\n+      console.log('Utilisateur Keycloak trouvé:', user);\r\n+      // Fetch the groups (agencies) the user belongs to\r\n+      return this.agenceService.getAgenceByUser(user.id);\r\n+    }),\r\n+    map(groups => {\r\n+      // Assuming the user belongs to exactly one agency group in this context\r\n+      if (!groups || groups.length === 0) {\r\n+        throw new Error(\"L'utilisateur n'est associé à aucune agence/groupe.\");\r\n+      }\r\n+      if (groups.length > 1) {\r\n+        console.warn(\"L'utilisateur appartient à plusieurs groupes. Utilisation du premier groupe comme agence:\", groups[0].name);\r\n+      }\r\n+      // Return the first group found as the agency\r\n+      return groups[0];\r\n+    }),\r\n+    finalize(() => this.isLoadingAgency = false), // Ensure loading flag is turned off\r\n+    catchError(err => {\r\n+      console.error(\"Erreur lors de la récupération de l'agence:\", err);\r\n+      this.agency = null; // Reset agency on error\r\n+      this.userDataSource.data = []; // Clear users table\r\n+      // Optionally: Show error message to user\r\n+      return of(null); // Return null observable to gracefully handle the error in the subscription\r\n+    })\r\n+  ).subscribe(agencyDetails => {\r\n+    if (agencyDetails) {\r\n+      this.agency = agencyDetails;\r\n+      console.log('Agence récupérée:', this.agency);\r\n+      // Now that the agency is loaded, fetch its users\r\n+      this.loadUsers();\r\n+    } else {\r\n+      console.log(\"Impossible de charger les détails de l'agence.\");\r\n+      // Agency loading failed, users won't be loaded. Table is already cleared in catchError.\r\n+    }\r\n+  });\r\n+}\r\n \r\n+\r\n+\r\n   return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n"
                },
                {
                    "date": 1745490017267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n }\r\n \r\n \r\n \r\n-  return this.agenceService.getAgenceByUser(this.agenceService.getUserByUsername(localStorage.getItem('user_profile').preferred_username));\r\n+  \r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n"
                },
                {
                    "date": 1745490031010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n import { UserService } from '../services/UserService';\r\n-import { catchError, finalize, from, map, mergeMap, of, timeout, toArray } from 'rxjs';\r\n+import { catchError, finalize, from, map, mergeMap, of, takeUntil, timeout, toArray } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n"
                },
                {
                    "date": 1745490137783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,61 +171,24 @@\n     console.warn('Action: Supprimer l\\'utilisateur', user);\r\n     // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n     // Pensez à mettre à jour this.users après suppression\r\n   }\r\n-getAgence():void{\r\n-  this.isLoadingAgency = true;\r\n-  const username = localStorage.getItem('preferred_username'); \r\n-  if (!username) {\r\n-    console.error(\"Nom d'utilisateur non trouvé dans le localStorage.\");\r\n-    this.isLoadingAgency = false;\r\n-    return;\r\n+  loadAgence(): void {\r\n+    const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n+    if (userProfile?.preferred_username) {\r\n+      this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n+        mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n+      ).subscribe({\r\n+        next: (agence) => {\r\n+          this.currentAgence = agence;\r\n+          this.loadUsers();\r\n+        },\r\n+        error: (err) => console.error('Error loading agency:', err)\r\n+      });\r\n+    }\r\n   }\r\n-  this.agenceService.getUserByUsername(username).pipe(\r\n-    takeUntil(this.destroy$), // Unsubscribe when component is destroyed\r\n-    switchMap(user => {\r\n-      if (!user || !user.id) {\r\n-        // Use throwError to propagate the error correctly\r\n-        return throwError(() => new Error(`Utilisateur Keycloak '${username}' introuvable ou ID manquant.`));\r\n-      }\r\n-      console.log('Utilisateur Keycloak trouvé:', user);\r\n-      // Fetch the groups (agencies) the user belongs to\r\n-      return this.agenceService.getAgenceByUser(user.id);\r\n-    }),\r\n-    map(groups => {\r\n-      // Assuming the user belongs to exactly one agency group in this context\r\n-      if (!groups || groups.length === 0) {\r\n-        throw new Error(\"L'utilisateur n'est associé à aucune agence/groupe.\");\r\n-      }\r\n-      if (groups.length > 1) {\r\n-        console.warn(\"L'utilisateur appartient à plusieurs groupes. Utilisation du premier groupe comme agence:\", groups[0].name);\r\n-      }\r\n-      // Return the first group found as the agency\r\n-      return groups[0];\r\n-    }),\r\n-    finalize(() => this.isLoadingAgency = false), // Ensure loading flag is turned off\r\n-    catchError(err => {\r\n-      console.error(\"Erreur lors de la récupération de l'agence:\", err);\r\n-      this.agency = null; // Reset agency on error\r\n-      this.userDataSource.data = []; // Clear users table\r\n-      // Optionally: Show error message to user\r\n-      return of(null); // Return null observable to gracefully handle the error in the subscription\r\n-    })\r\n-  ).subscribe(agencyDetails => {\r\n-    if (agencyDetails) {\r\n-      this.agency = agencyDetails;\r\n-      console.log('Agence récupérée:', this.agency);\r\n-      // Now that the agency is loaded, fetch its users\r\n-      this.loadUsers();\r\n-    } else {\r\n-      console.log(\"Impossible de charger les détails de l'agence.\");\r\n-      // Agency loading failed, users won't be loaded. Table is already cleared in catchError.\r\n-    }\r\n-  });\r\n-}\r\n \r\n \r\n-\r\n   \r\n }\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n"
                },
                {
                    "date": 1745490172865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,9 @@\n   styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n \r\n-  isLoadingUsers = false;\r\n-  isLoadingAgency = false;\r\n+  currentAgence: any;\r\n \r\n // --- Variables pour les statistiques ---\r\n pendingProjectCount: number = 12;\r\n inProgressProjectCount: number = 64;\r\n"
                },
                {
                    "date": 1745490196748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n           this.currentAgence = agence;\r\n-          this.loadUsers();\r\n+          this.loadUsers(this.);\r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n       });\r\n     }\r\n"
                },
                {
                    "date": 1745490205477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n           this.currentAgence = agence;\r\n-          this.loadUsers(this.);\r\n+          this.loadUsers(this.currentAgence.i);\r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n       });\r\n     }\r\n"
                },
                {
                    "date": 1745490211802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n           this.currentAgence = agence;\r\n-          this.loadUsers(this.currentAgence.i);\r\n+          this.loadUsers(this.currentAgence.id);\r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n       });\r\n     }\r\n"
                },
                {
                    "date": 1745490229725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,10 @@\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n           this.currentAgence = agence;\r\n-          this.loadUsers(this.currentAgence.id);\r\n+          this.loadUsers();\r\n+          \r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n       });\r\n     }\r\n"
                },
                {
                    "date": 1745490235452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n-     this.agenceService.getMembersByGroupName(this.agency.name).pipe(\r\n+     this.agenceService.getMembersByGroupName(this.currentAgence.id).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n        finalize(() => this.isLoadingUsers = false),\r\n        // Handle potential error from getMembersByGroupName itself\r\n        catchError(err => {\r\n"
                },
                {
                    "date": 1745490242929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,11 +188,11 @@\n   }\r\n \r\n \r\n   \r\n-}\r\n+\r\n  loadUsers(): void {\r\n-     this.isLoadingUsers = true; // Set loading state\r\n+     \r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n      this.agenceService.getMembersByGroupName(this.currentAgence.id).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n"
                },
                {
                    "date": 1745490263849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,11 +188,11 @@\n   }\r\n \r\n \r\n   \r\n-\r\n+}\r\n  loadUsers(): void {\r\n-     \r\n+     this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n      this.agenceService.getMembersByGroupName(this.currentAgence.id).pipe(\r\n        // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n"
                },
                {
                    "date": 1745490273427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n \r\n   currentAgence: any;\r\n+  \r\n \r\n // --- Variables pour les statistiques ---\r\n pendingProjectCount: number = 12;\r\n inProgressProjectCount: number = 64;\r\n@@ -188,9 +189,9 @@\n   }\r\n \r\n \r\n   \r\n-}\r\n+\r\n  loadUsers(): void {\r\n      this.isLoadingUsers = true; // Set loading state\r\n      const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n   \r\n"
                },
                {
                    "date": 1745490370461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n })\r\n export class DashboardComponent implements OnInit, AfterViewInit {\r\n \r\n   currentAgence: any;\r\n-  \r\n+  isLoadingUsers: boolean = false;\r\n \r\n // --- Variables pour les statistiques ---\r\n pendingProjectCount: number = 12;\r\n inProgressProjectCount: number = 64;\r\n@@ -63,10 +63,9 @@\n \r\n   constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n \r\n   ngOnInit(): void {\r\n-    // Ici, vous chargeriez normalement les données réelles depuis vos services\r\n-    // Exemple: this.loadDashboardData();\r\n+    this\r\n   }\r\n \r\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n"
                },
                {
                    "date": 1745490402132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,9 @@\n   constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n \r\n   ngOnInit(): void {\r\n     this\r\n+    this.loadUsers();\r\n   }\r\n \r\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n"
                },
                {
                    "date": 1745490505046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,11 @@\n \r\n   constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n \r\n   ngOnInit(): void {\r\n-    this\r\n+    this.loadAgence();\r\n     this.loadUsers();\r\n+    console\r\n   }\r\n \r\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n"
                },
                {
                    "date": 1745490510932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \r\n   ngOnInit(): void {\r\n     this.loadAgence();\r\n     this.loadUsers();\r\n-    console\r\n+    console.log(this.us)\r\n   }\r\n \r\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n"
                },
                {
                    "date": 1745490521174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,10 @@\n \r\n   ngOnInit(): void {\r\n     this.loadAgence();\r\n     this.loadUsers();\r\n-    console.log(this.us)\r\n+    console.log(this.users);\r\n+    \r\n   }\r\n \r\n   ngAfterViewInit(): void {\r\n     // Créer le graphique une fois que la vue est initialisée\r\n"
                },
                {
                    "date": 1745490528700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \r\n   ngOnInit(): void {\r\n     this.loadAgence();\r\n     this.loadUsers();\r\n-    console.log(this.users);\r\n+    console.log('userss',this.users);\r\n     \r\n   }\r\n \r\n   ngAfterViewInit(): void {\r\n"
                },
                {
                    "date": 1745490681217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,68 +191,49 @@\n   }\r\n \r\n \r\n   \r\n+  loadUsers(): void {\r\n+    if (!this.currentAgence?.name) return;\r\n \r\n- loadUsers(): void {\r\n-     this.isLoadingUsers = true; // Set loading state\r\n-     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER']; // Define role hierarchy\r\n-  \r\n-     this.agenceService.getMembersByGroupName(this.currentAgence.id).pipe(\r\n-       // Use finalize to ensure isLoadingUsers is set to false regardless of success/error\r\n-       finalize(() => this.isLoadingUsers = false),\r\n-       // Handle potential error from getMembersByGroupName itself\r\n-       catchError(err => {\r\n-         console.error('Failed to get group members', err);\r\n-         this.users = []; \r\n-         return of([]); // Return empty array to prevent breaking the stream\r\n-       }),\r\n-       // If members are found, proceed to get roles\r\n-       mergeMap(users => {\r\n-         if (!users || users.length === 0) {\r\n-           return of([]); // No users, return empty array observable\r\n-         }\r\n-         return from(users); // Process users one by one\r\n-       }),\r\n-       mergeMap(user => {\r\n-         // Fetch roles for each user\r\n-         return this.userService.getUserRoles(user.id).pipe(\r\n-           map(roles => {\r\n-             // Find the highest role based on the defined hierarchy\r\n-             const userRoles = roles.map(r => r.name.toUpperCase()); // Ensure case-insensitivity\r\n-             const highestRole = ROLE_HIERARCHY.find(role =>\r\n-               userRoles.includes(role)\r\n-             ) || 'USER'; // Default to 'USER' or 'Aucun rôle' if preferred\r\n- \r\n-             return {\r\n-               ...user,\r\n-               role: highestRole // Add the determined role to the user object\r\n-             };\r\n-           }),\r\n-           // Handle errors fetching roles for a specific user\r\n-           catchError(() => of({\r\n-             ...user,\r\n-             role: 'Erreur Rôle' // Indicate role fetching error\r\n-           })),\r\n-           timeout(8000) // Add a slightly longer timeout for role fetching\r\n-         );\r\n-       }, 5), // Concurrency limit for fetching roles\r\n-       toArray() // Collect all processed users back into an array\r\n-     ).subscribe({\r\n-       next: (usersWithRoles) => {\r\n-         this.users = usersWithRoles;\r\n-         console.log(\"Users avec rôles:\", this.users);\r\n-       },\r\n-       error: (err) => {\r\n-         // This error would likely be from the final toArray or timeout\r\n-         console.error('Failed to load users with roles', err);\r\n-         \r\n-         this.users = []; \r\n-       }\r\n-      \r\n-     });\r\n-   }\r\n+    this.isLoadingUsers = true;\r\n+    const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n \r\n+    this.agenceService.getMembersByGroupName(this.currentAgence.name).pipe(\r\n+      catchError(err => {\r\n+        console.error('Failed to get group members', err);\r\n+        return of([]);\r\n+      }),\r\n+      mergeMap(users => users.length ? from(users) : of([])),\r\n+      mergeMap(user => this.processUserRoles(user, ROLE_HIERARCHY), 5),\r\n+      toArray(),\r\n+      finalize(() => this.isLoadingUsers = false)\r\n+    ).subscribe({\r\n+      next: (usersWithRoles) => this.users = usersWithRoles,\r\n+      error: (err) => console.error('Failed to load users with roles', err)\r\n+    });\r\n+  }\r\n+\r\n+  private processUserRoles(user: any, roleHierarchy: string[]) {\r\n+    return this.agenceService.getUserRoles(user.id).pipe(\r\n+      map(roles => ({\r\n+        ...user,\r\n+        role: this.getHighestRole(roles, roleHierarchy)\r\n+      })),\r\n+      catchError(() => of({\r\n+        ...user,\r\n+        role: 'Erreur Rôle'\r\n+      })),\r\n+      timeout(8000)\r\n+    );\r\n+  }\r\n+\r\n+  private getHighestRole(roles: any[], hierarchy: string[]): string {\r\n+    const roleNames = roles.map(r => r.name.toUpperCase());\r\n+    return hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n+  }\r\n }\r\n \r\n+}\r\n \r\n \r\n+\r\n"
                },
                {
                    "date": 1745490693354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,8 @@\n   constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n \r\n   ngOnInit(): void {\r\n     this.loadAgence();\r\n-    this.loadUsers();\r\n     console.log('userss',this.users);\r\n     \r\n   }\r\n \r\n"
                },
                {
                    "date": 1745490732852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n     });\r\n   }\r\n \r\n   private processUserRoles(user: any, roleHierarchy: string[]) {\r\n-    return this.agenceService.getUserRoles(user.id).pipe(\r\n+    return this.au.getUserRoles(user.id).pipe(\r\n       map(roles => ({\r\n         ...user,\r\n         role: this.getHighestRole(roles, roleHierarchy)\r\n       })),\r\n"
                },
                {
                    "date": 1745490738931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n     });\r\n   }\r\n \r\n   private processUserRoles(user: any, roleHierarchy: string[]) {\r\n-    return this.au.getUserRoles(user.id).pipe(\r\n+    return this.user.getUserRoles(user.id).pipe(\r\n       map(roles => ({\r\n         ...user,\r\n         role: this.getHighestRole(roles, roleHierarchy)\r\n       })),\r\n"
                },
                {
                    "date": 1745490745252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n     });\r\n   }\r\n \r\n   private processUserRoles(user: any, roleHierarchy: string[]) {\r\n-    return this.user.getUserRoles(user.id).pipe(\r\n+    return this.userService.getUserRoles(user.id).pipe(\r\n       map(roles => ({\r\n         ...user,\r\n         role: this.getHighestRole(roles, roleHierarchy)\r\n       })),\r\n@@ -231,8 +231,7 @@\n     return hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n   }\r\n }\r\n \r\n-}\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1745492711928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n \r\n   \r\n   loadUsers(): void {\r\n     if (!this.currentAgence?.name) return;\r\n-\r\n+    c\r\n     this.isLoadingUsers = true;\r\n     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n \r\n     this.agenceService.getMembersByGroupName(this.currentAgence.name).pipe(\r\n"
                },
                {
                    "date": 1745492721723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n \r\n   \r\n   loadUsers(): void {\r\n     if (!this.currentAgence?.name) return;\r\n-    c\r\n+    console.log('Loading users for agency:', this.currentAgence.name)\r\n     this.isLoadingUsers = true;\r\n     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n \r\n     this.agenceService.getMembersByGroupName(this.currentAgence.name).pipe(\r\n"
                },
                {
                    "date": 1745492776697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n \r\n   \r\n   loadUsers(): void {\r\n     if (!this.currentAgence?.name) return;\r\n-    console.log('Loading users for agency:', this.currentAgence.name)\r\n+\r\n     this.isLoadingUsers = true;\r\n     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n \r\n     this.agenceService.getMembersByGroupName(this.currentAgence.name).pipe(\r\n"
                },
                {
                    "date": 1745492788328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,8 +175,9 @@\n   }\r\n   loadAgence(): void {\r\n     const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n     if (userProfile?.preferred_username) {\r\n+      \r\n       this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n"
                },
                {
                    "date": 1745492798752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n   }\r\n   loadAgence(): void {\r\n     const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n     if (userProfile?.preferred_username) {\r\n-      \r\n+      console.log('preferred_username', this.currentAgence.name)\r\n       this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n"
                },
                {
                    "date": 1745492806325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n   }\r\n   loadAgence(): void {\r\n     const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n     if (userProfile?.preferred_username) {\r\n-      console.log('preferred_username', this.currentAgence.name)\r\n+      console.log('preferred_username', userProfile?.preferred_username)\r\n       this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n"
                },
                {
                    "date": 1745492838789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n   }\r\n   loadAgence(): void {\r\n     const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n     if (userProfile?.preferred_username) {\r\n-      console.log('preferred_username', userProfile?.preferred_username)\r\n+      \r\n       this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n"
                },
                {
                    "date": 1745492845144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,8 +180,9 @@\n       this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n+          \r\n           this.currentAgence = agence;\r\n           this.loadUsers();\r\n           \r\n         },\r\n"
                },
                {
                    "date": 1745492852540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n       this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n-          \r\n+          console.log('Agence chargée:', agence);\r\n           this.currentAgence = agence;\r\n           this.loadUsers();\r\n           \r\n         },\r\n"
                },
                {
                    "date": 1745493133369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n       this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n         mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n       ).subscribe({\r\n         next: (agence) => {\r\n-          console.log('Agence chargée:', agence);\r\n+          \r\n           this.currentAgence = agence;\r\n           this.loadUsers();\r\n           \r\n         },\r\n"
                },
                {
                    "date": 1745493140292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,9 @@\n       ).subscribe({\r\n         next: (agence) => {\r\n           \r\n           this.currentAgence = agence;\r\n+          console.log('Agence chargée:', this.currentAgence);\r\n           this.loadUsers();\r\n           \r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n"
                },
                {
                    "date": 1745493157873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n       ).subscribe({\r\n         next: (agence) => {\r\n           \r\n           this.currentAgence = agence;\r\n-          console.log('Agence chargée:', this.currentAgence);\r\n+          console.log('Agence chargée:', this.currentAgence.name);\r\n           this.loadUsers();\r\n           \r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n"
                },
                {
                    "date": 1745493173788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,240 @@\n+import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n+import Chart from 'chart.js/auto'; // Import Chart.js\r\n+import { MatTableDataSource } from '@angular/material/table';\r\n+import { AgenceService } from '../services/agenceService';\r\n+import { UserService } from '../services/UserService';\r\n+import { catchError, finalize, from, map, mergeMap, of, takeUntil, timeout, toArray } from 'rxjs';\r\n+\r\n+// Interface pour la structure des données de projet (basée sur le HTML)\r\n+export interface Project {\r\n+  id: number; // Ajout d'un ID pour la gestion\r\n+  name: string;\r\n+  statusClass: string; // Classe CSS pour le badge (ex: 'in-progress', 'completed')\r\n+  statusText: string;  // Texte du badge (ex: 'En cours', 'Terminé')\r\n+  progress: number;    // Pourcentage de progression\r\n+}\r\n+\r\n+// Interface pour la structure des données utilisateur (basée sur le HTML)\r\n+export interface User {\r\n+  id: number; // Ajout d'un ID\r\n+  fullName: string;\r\n+  email: string;\r\n+  roleClass: string; // Classe CSS pour le badge de rôle (ex: 'super-admin', 'admin', 'user')\r\n+  roleText: string;  // Texte du badge de rôle\r\n+  statusClass: string; // Classe CSS pour le badge de statut (ex: 'active', 'inactive')\r\n+  statusText: string;  // Texte du badge de statut\r\n+}\r\n+\r\n+\r\n+@Component({\r\n+  selector: 'app-dashboard',\r\n+  templateUrl: './dashboard.component.html',\r\n+  styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n+})\r\n+export class DashboardComponent implements OnInit, AfterViewInit {\r\n+\r\n+  currentAgence: any;\r\n+  isLoadingUsers: boolean = false;\r\n+\r\n+// --- Variables pour les statistiques ---\r\n+pendingProjectCount: number = 12;\r\n+inProgressProjectCount: number = 64;\r\n+completedProjectCount: number = 105;\r\n+totalTasks: number = 56;\r\n+assignedMembers: number = 8;\r\n+relatedProjects: number = 30;\r\n+projectDataSource = new MatTableDataSource<Project>();\r\n+  userDataSource = new MatTableDataSource<User>();\r\n+\r\n+  projectDisplayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n+  userDisplayedColumns: string[] = ['fullName', 'email', 'role', 'status', 'actions'];\r\n+\r\n+\r\n+  projects: Project[] = [\r\n+    { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n+    { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n+    { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n+  ];\r\n+\r\n+  users: User[] = [];\r\n+\r\n+  // --- Chart Instance ---\r\n+  public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n+\r\n+  constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.loadAgence();\r\n+    console.log('userss',this.users);\r\n+    \r\n+  }\r\n+\r\n+  ngAfterViewInit(): void {\r\n+    // Créer le graphique une fois que la vue est initialisée\r\n+    this.createChart();\r\n+  }\r\n+    createChart(): void {\r\n+      // Correction : Utiliser l'ID 'taskChartDashboard' qui correspond à l'HTML\r\n+      const ctx = document.getElementById('taskChartDashboard') as HTMLCanvasElement;\r\n+      if (ctx) {\r\n+        // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n+        if (this.chart) {\r\n+          this.chart.destroy();\r\n+        }\r\n+  \r\n+        this.chart = new Chart(ctx, {\r\n+          type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n+          data: {\r\n+            labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n+            datasets: [{\r\n+              label: 'Tâches complétées', // Légende du dataset\r\n+              data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n+              backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n+              borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n+              borderWidth: 1\r\n+            }]\r\n+          },\r\n+          options: {\r\n+            responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n+            maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n+            scales: {\r\n+              y: {\r\n+                beginAtZero: true, // L'axe Y commence à 0\r\n+                title: {\r\n+                  display: true,\r\n+                  text: 'Nombre de tâches' // Titre de l'axe Y\r\n+                }\r\n+              },\r\n+              x: {\r\n+                title: {\r\n+                  display: true,\r\n+                  text: 'Mois' // Titre de l'axe X\r\n+                }\r\n+              }\r\n+            },\r\n+            plugins: {\r\n+              legend: {\r\n+                display: true, // Afficher la légende\r\n+                position: 'top', // Position de la légende\r\n+              },\r\n+              tooltip: {\r\n+                enabled: true // Activer les infobulles au survol\r\n+              }\r\n+            }\r\n+          }\r\n+        });\r\n+      } else {\r\n+        // Le message d'erreur sera maintenant correct si l'élément n'est toujours pas trouvé\r\n+        console.error(\"L'élément Canvas avec l'ID 'taskChartDashboard' n'a pas été trouvé.\");\r\n+      }\r\n+    }\r\n+  \r\n+\r\n+  // --- Méthodes pour les actions (placeholders) ---\r\n+\r\n+  addNewProject(): void {\r\n+    console.log('Action: Ajouter un nouveau projet');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewProject(project: Project): void {\r\n+    console.log('Action: Voir le projet', project);\r\n+    // Logique pour afficher les détails du projet (modal, navigation)\r\n+  }\r\n+\r\n+  editProject(project: Project): void {\r\n+    console.log('Action: Modifier le projet', project);\r\n+    // Logique pour ouvrir le formulaire d'édition du projet\r\n+  }\r\n+\r\n+  deleteProject(project: Project): void {\r\n+    console.warn('Action: Supprimer le projet', project);\r\n+    // Logique pour confirmer et supprimer le projet (appel API)\r\n+    // Pensez à mettre à jour this.projects après suppression\r\n+  }\r\n+\r\n+  addNewUser(): void {\r\n+    console.log('Action: Ajouter un nouvel utilisateur');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewUser(user: User): void {\r\n+    console.log('Action: Voir l\\'utilisateur', user);\r\n+     // Logique pour afficher les détails de l'utilisateur\r\n+  }\r\n+\r\n+  editUser(user: User): void {\r\n+    console.log('Action: Modifier l\\'utilisateur', user);\r\n+     // Logique pour ouvrir le formulaire d'édition de l'utilisateur\r\n+  }\r\n+\r\n+  deleteUser(user: User): void {\r\n+    console.warn('Action: Supprimer l\\'utilisateur', user);\r\n+    // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n+    // Pensez à mettre à jour this.users après suppression\r\n+  }\r\n+  loadAgence(): void {\r\n+    const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n+    if (userProfile?.preferred_username) {\r\n+      \r\n+      this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n+        mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n+      ).subscribe({\r\n+        next: (agence) => {\r\n+          \r\n+          this.currentAgence = agence;\r\n+          console.log('Agence chargée:', this.currentAgence);\r\n+          this.loadUsers();\r\n+          \r\n+        },\r\n+        error: (err) => console.error('Error loading agency:', err)\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  \r\n+  loadUsers(): void {\r\n+    if (!this.currentAgence?.name) return;\r\n+\r\n+    this.isLoadingUsers = true;\r\n+    const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n+\r\n+    this.agenceService.getMembersByGroupName(this.currentAgence.name).pipe(\r\n+      catchError(err => {\r\n+        console.error('Failed to get group members', err);\r\n+        return of([]);\r\n+      }),\r\n+      mergeMap(users => users.length ? from(users) : of([])),\r\n+      mergeMap(user => this.processUserRoles(user, ROLE_HIERARCHY), 5),\r\n+      toArray(),\r\n+      finalize(() => this.isLoadingUsers = false)\r\n+    ).subscribe({\r\n+      next: (usersWithRoles) => this.users = usersWithRoles,\r\n+      error: (err) => console.error('Failed to load users with roles', err)\r\n+    });\r\n+  }\r\n+\r\n+  private processUserRoles(user: any, roleHierarchy: string[]) {\r\n+    return this.userService.getUserRoles(user.id).pipe(\r\n+      map(roles => ({\r\n+        ...user,\r\n+        role: this.getHighestRole(roles, roleHierarchy)\r\n+      })),\r\n+      catchError(() => of({\r\n+        ...user,\r\n+        role: 'Erreur Rôle'\r\n+      })),\r\n+      timeout(8000)\r\n+    );\r\n+  }\r\n+\r\n+  private getHighestRole(roles: any[], hierarchy: string[]): string {\r\n+    const roleNames = roles.map(r => r.name.toUpperCase());\r\n+    return hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1745493194208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n       ).subscribe({\r\n         next: (agence) => {\r\n           \r\n           this.currentAgence = agence;\r\n-          console.log('Agence chargée:', this.currentAgence);\r\n+          console.log('Agence chargée:', this.currentAgence.);\r\n           this.loadUsers();\r\n           \r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n@@ -237,244 +237,4 @@\n \r\n \r\n \r\n \r\n-import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n-import Chart from 'chart.js/auto'; // Import Chart.js\r\n-import { MatTableDataSource } from '@angular/material/table';\r\n-import { AgenceService } from '../services/agenceService';\r\n-import { UserService } from '../services/UserService';\r\n-import { catchError, finalize, from, map, mergeMap, of, takeUntil, timeout, toArray } from 'rxjs';\r\n-\r\n-// Interface pour la structure des données de projet (basée sur le HTML)\r\n-export interface Project {\r\n-  id: number; // Ajout d'un ID pour la gestion\r\n-  name: string;\r\n-  statusClass: string; // Classe CSS pour le badge (ex: 'in-progress', 'completed')\r\n-  statusText: string;  // Texte du badge (ex: 'En cours', 'Terminé')\r\n-  progress: number;    // Pourcentage de progression\r\n-}\r\n-\r\n-// Interface pour la structure des données utilisateur (basée sur le HTML)\r\n-export interface User {\r\n-  id: number; // Ajout d'un ID\r\n-  fullName: string;\r\n-  email: string;\r\n-  roleClass: string; // Classe CSS pour le badge de rôle (ex: 'super-admin', 'admin', 'user')\r\n-  roleText: string;  // Texte du badge de rôle\r\n-  statusClass: string; // Classe CSS pour le badge de statut (ex: 'active', 'inactive')\r\n-  statusText: string;  // Texte du badge de statut\r\n-}\r\n-\r\n-\r\n-@Component({\r\n-  selector: 'app-dashboard',\r\n-  templateUrl: './dashboard.component.html',\r\n-  styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n-})\r\n-export class DashboardComponent implements OnInit, AfterViewInit {\r\n-\r\n-  currentAgence: any;\r\n-  isLoadingUsers: boolean = false;\r\n-\r\n-// --- Variables pour les statistiques ---\r\n-pendingProjectCount: number = 12;\r\n-inProgressProjectCount: number = 64;\r\n-completedProjectCount: number = 105;\r\n-totalTasks: number = 56;\r\n-assignedMembers: number = 8;\r\n-relatedProjects: number = 30;\r\n-projectDataSource = new MatTableDataSource<Project>();\r\n-  userDataSource = new MatTableDataSource<User>();\r\n-\r\n-  projectDisplayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n-  userDisplayedColumns: string[] = ['fullName', 'email', 'role', 'status', 'actions'];\r\n-\r\n-\r\n-  projects: Project[] = [\r\n-    { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n-    { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n-    { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n-  ];\r\n-\r\n-  users: User[] = [];\r\n-\r\n-  // --- Chart Instance ---\r\n-  public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n-\r\n-  constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n-\r\n-  ngOnInit(): void {\r\n-    this.loadAgence();\r\n-    console.log('userss',this.users);\r\n-    \r\n-  }\r\n-\r\n-  ngAfterViewInit(): void {\r\n-    // Créer le graphique une fois que la vue est initialisée\r\n-    this.createChart();\r\n-  }\r\n-    createChart(): void {\r\n-      // Correction : Utiliser l'ID 'taskChartDashboard' qui correspond à l'HTML\r\n-      const ctx = document.getElementById('taskChartDashboard') as HTMLCanvasElement;\r\n-      if (ctx) {\r\n-        // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n-        if (this.chart) {\r\n-          this.chart.destroy();\r\n-        }\r\n-  \r\n-        this.chart = new Chart(ctx, {\r\n-          type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n-          data: {\r\n-            labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n-            datasets: [{\r\n-              label: 'Tâches complétées', // Légende du dataset\r\n-              data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n-              backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n-              borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n-              borderWidth: 1\r\n-            }]\r\n-          },\r\n-          options: {\r\n-            responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n-            maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n-            scales: {\r\n-              y: {\r\n-                beginAtZero: true, // L'axe Y commence à 0\r\n-                title: {\r\n-                  display: true,\r\n-                  text: 'Nombre de tâches' // Titre de l'axe Y\r\n-                }\r\n-              },\r\n-              x: {\r\n-                title: {\r\n-                  display: true,\r\n-                  text: 'Mois' // Titre de l'axe X\r\n-                }\r\n-              }\r\n-            },\r\n-            plugins: {\r\n-              legend: {\r\n-                display: true, // Afficher la légende\r\n-                position: 'top', // Position de la légende\r\n-              },\r\n-              tooltip: {\r\n-                enabled: true // Activer les infobulles au survol\r\n-              }\r\n-            }\r\n-          }\r\n-        });\r\n-      } else {\r\n-        // Le message d'erreur sera maintenant correct si l'élément n'est toujours pas trouvé\r\n-        console.error(\"L'élément Canvas avec l'ID 'taskChartDashboard' n'a pas été trouvé.\");\r\n-      }\r\n-    }\r\n-  \r\n-\r\n-  // --- Méthodes pour les actions (placeholders) ---\r\n-\r\n-  addNewProject(): void {\r\n-    console.log('Action: Ajouter un nouveau projet');\r\n-    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n-  }\r\n-\r\n-  viewProject(project: Project): void {\r\n-    console.log('Action: Voir le projet', project);\r\n-    // Logique pour afficher les détails du projet (modal, navigation)\r\n-  }\r\n-\r\n-  editProject(project: Project): void {\r\n-    console.log('Action: Modifier le projet', project);\r\n-    // Logique pour ouvrir le formulaire d'édition du projet\r\n-  }\r\n-\r\n-  deleteProject(project: Project): void {\r\n-    console.warn('Action: Supprimer le projet', project);\r\n-    // Logique pour confirmer et supprimer le projet (appel API)\r\n-    // Pensez à mettre à jour this.projects après suppression\r\n-  }\r\n-\r\n-  addNewUser(): void {\r\n-    console.log('Action: Ajouter un nouvel utilisateur');\r\n-    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n-  }\r\n-\r\n-  viewUser(user: User): void {\r\n-    console.log('Action: Voir l\\'utilisateur', user);\r\n-     // Logique pour afficher les détails de l'utilisateur\r\n-  }\r\n-\r\n-  editUser(user: User): void {\r\n-    console.log('Action: Modifier l\\'utilisateur', user);\r\n-     // Logique pour ouvrir le formulaire d'édition de l'utilisateur\r\n-  }\r\n-\r\n-  deleteUser(user: User): void {\r\n-    console.warn('Action: Supprimer l\\'utilisateur', user);\r\n-    // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n-    // Pensez à mettre à jour this.users après suppression\r\n-  }\r\n-  loadAgence(): void {\r\n-    const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n-    if (userProfile?.preferred_username) {\r\n-      \r\n-      this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n-        mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n-      ).subscribe({\r\n-        next: (agence) => {\r\n-          \r\n-          this.currentAgence = agence;\r\n-          console.log('Agence chargée:', this.currentAgence.name);\r\n-          this.loadUsers();\r\n-          \r\n-        },\r\n-        error: (err) => console.error('Error loading agency:', err)\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  \r\n-  loadUsers(): void {\r\n-    if (!this.currentAgence?.name) return;\r\n-\r\n-    this.isLoadingUsers = true;\r\n-    const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n-\r\n-    this.agenceService.getMembersByGroupName(this.currentAgence.name).pipe(\r\n-      catchError(err => {\r\n-        console.error('Failed to get group members', err);\r\n-        return of([]);\r\n-      }),\r\n-      mergeMap(users => users.length ? from(users) : of([])),\r\n-      mergeMap(user => this.processUserRoles(user, ROLE_HIERARCHY), 5),\r\n-      toArray(),\r\n-      finalize(() => this.isLoadingUsers = false)\r\n-    ).subscribe({\r\n-      next: (usersWithRoles) => this.users = usersWithRoles,\r\n-      error: (err) => console.error('Failed to load users with roles', err)\r\n-    });\r\n-  }\r\n-\r\n-  private processUserRoles(user: any, roleHierarchy: string[]) {\r\n-    return this.userService.getUserRoles(user.id).pipe(\r\n-      map(roles => ({\r\n-        ...user,\r\n-        role: this.getHighestRole(roles, roleHierarchy)\r\n-      })),\r\n-      catchError(() => of({\r\n-        ...user,\r\n-        role: 'Erreur Rôle'\r\n-      })),\r\n-      timeout(8000)\r\n-    );\r\n-  }\r\n-\r\n-  private getHighestRole(roles: any[], hierarchy: string[]): string {\r\n-    const roleNames = roles.map(r => r.name.toUpperCase());\r\n-    return hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n-  }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1745493199681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n       ).subscribe({\r\n         next: (agence) => {\r\n           \r\n           this.currentAgence = agence;\r\n-          console.log('Agence chargée:', this.currentAgence.);\r\n+          console.log('Agence chargée:', this.currentAgence.0.name);\r\n           this.loadUsers();\r\n           \r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n"
                },
                {
                    "date": 1745493205701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n       ).subscribe({\r\n         next: (agence) => {\r\n           \r\n           this.currentAgence = agence;\r\n-          console.log('Agence chargée:', this.currentAgence.0.name);\r\n+          console.log('Agence chargée:', this.currentAgence[0.name);\r\n           this.loadUsers();\r\n           \r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n"
                },
                {
                    "date": 1745493218895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n       ).subscribe({\r\n         next: (agence) => {\r\n           \r\n           this.currentAgence = agence;\r\n-          console.log('Agence chargée:', this.currentAgence[0.name);\r\n+         \r\n           this.loadUsers();\r\n           \r\n         },\r\n         error: (err) => console.error('Error loading agency:', err)\r\n"
                },
                {
                    "date": 1745493225920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \r\n \r\n   \r\n   loadUsers(): void {\r\n-    if (!this.currentAgence?.name) return;\r\n+    if (!this.currentAgence[0]?.name) return;\r\n \r\n     this.isLoadingUsers = true;\r\n     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n \r\n"
                },
                {
                    "date": 1745493277118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n \r\n     this.isLoadingUsers = true;\r\n     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n \r\n-    this.agenceService.getMembersByGroupName(this.currentAgence.name).pipe(\r\n+    this.agenceService.getMembersByGroupName(this.currentAgence[].name).pipe(\r\n       catchError(err => {\r\n         console.error('Failed to get group members', err);\r\n         return of([]);\r\n       }),\r\n"
                },
                {
                    "date": 1745493485837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,28 +194,88 @@\n \r\n \r\n   \r\n   loadUsers(): void {\r\n-    if (!this.currentAgence[0]?.name) return;\r\n+    if (!this.currentAgence[0]?.name) {\r\n+        console.log('Aucune agence sélectionnée - arrêt du chargement des utilisateurs');\r\n+        return;\r\n+    }\r\n \r\n+    const agencyName = this.currentAgence[0].name;\r\n+    console.log(`Début du chargement des utilisateurs pour l'agence: ${agencyName}`);\r\n+    \r\n     this.isLoadingUsers = true;\r\n     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n+    console.log('Hiérarchie des rôles définie:', ROLE_HIERARCHY);\r\n \r\n-    this.agenceService.getMembersByGroupName(this.currentAgence[].name).pipe(\r\n-      catchError(err => {\r\n-        console.error('Failed to get group members', err);\r\n-        return of([]);\r\n-      }),\r\n-      mergeMap(users => users.length ? from(users) : of([])),\r\n-      mergeMap(user => this.processUserRoles(user, ROLE_HIERARCHY), 5),\r\n-      toArray(),\r\n-      finalize(() => this.isLoadingUsers = false)\r\n+    this.agenceService.getMembersByGroupName(agencyName).pipe(\r\n+        tap(users => console.log(`Réponse brute de getMembersByGroupName:`, users)),\r\n+        catchError(err => {\r\n+            console.error('Échec de récupération des membres du groupe:', err);\r\n+            return of([]);\r\n+        }),\r\n+        mergeMap(users => {\r\n+            console.log(`Nombre d'utilisateurs trouvés: ${users.length}`);\r\n+            return users.length ? from(users) : of([]);\r\n+        }),\r\n+        mergeMap(user => {\r\n+            console.log(`Traitement de l'utilisateur: ${user.username || user.id}`);\r\n+            return this.processUserRoles(user, ROLE_HIERARCHY);\r\n+        }, 5), // Limite de concurrence\r\n+        tap(userWithRole => {\r\n+            console.log(`Utilisateur traité:`, {\r\n+                username: userWithRole.username,\r\n+                role: userWithRole.role\r\n+            });\r\n+        }),\r\n+        toArray(),\r\n+        finalize(() => {\r\n+            console.log('Chargement terminé - arrêt du spinner');\r\n+            this.isLoadingUsers = false;\r\n+        })\r\n     ).subscribe({\r\n-      next: (usersWithRoles) => this.users = usersWithRoles,\r\n-      error: (err) => console.error('Failed to load users with roles', err)\r\n+        next: (usersWithRoles) => {\r\n+            console.log('Liste finale des utilisateurs avec rôles:', usersWithRoles);\r\n+            this.users = usersWithRoles;\r\n+        },\r\n+        error: (err) => {\r\n+            console.error('Erreur globale dans le flux:', err);\r\n+            this.users = [];\r\n+        }\r\n     });\r\n-  }\r\n+}\r\n \r\n+private processUserRoles(user: any, roleHierarchy: string[]) {\r\n+    console.log(`Récupération des rôles pour l'utilisateur ${user.id}`);\r\n+    \r\n+    return this.agenceService.getUserRoles(user.id).pipe(\r\n+        tap(roles => console.log(`Rôles bruts reçus pour ${user.username}:`, roles)),\r\n+        map(roles => ({\r\n+            ...user,\r\n+            role: this.getHighestRole(roles, roleHierarchy)\r\n+        })),\r\n+        catchError((err) => {\r\n+            console.error(`Erreur lors de la récupération des rôles pour ${user.id}:`, err);\r\n+            return of({\r\n+                ...user,\r\n+                role: 'ERREUR_RÔLE'\r\n+            });\r\n+        }),\r\n+        timeout(8000),\r\n+        finalize(() => console.log(`Terminé le traitement des rôles pour ${user.id}`))\r\n+    );\r\n+}\r\n+\r\n+private getHighestRole(roles: any[], hierarchy: string[]): string {\r\n+    const roleNames = roles.map(r => r.name?.toUpperCase());\r\n+    console.log(`Noms de rôles normalisés: ${roleNames}`);\r\n+    \r\n+    const foundRole = hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n+    console.log(`Rôle le plus élevé trouvé: ${foundRole}`);\r\n+    \r\n+    return foundRole;\r\n+}\r\n+\r\n   private processUserRoles(user: any, roleHierarchy: string[]) {\r\n     return this.userService.getUserRoles(user.id).pipe(\r\n       map(roles => ({\r\n         ...user,\r\n"
                },
                {
                    "date": 1745493492994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,240 @@\n+import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n+import Chart from 'chart.js/auto'; // Import Chart.js\r\n+import { MatTableDataSource } from '@angular/material/table';\r\n+import { AgenceService } from '../services/agenceService';\r\n+import { UserService } from '../services/UserService';\r\n+import { catchError, finalize, from, map, mergeMap, of, takeUntil, timeout, toArray } from 'rxjs';\r\n+\r\n+// Interface pour la structure des données de projet (basée sur le HTML)\r\n+export interface Project {\r\n+  id: number; // Ajout d'un ID pour la gestion\r\n+  name: string;\r\n+  statusClass: string; // Classe CSS pour le badge (ex: 'in-progress', 'completed')\r\n+  statusText: string;  // Texte du badge (ex: 'En cours', 'Terminé')\r\n+  progress: number;    // Pourcentage de progression\r\n+}\r\n+\r\n+// Interface pour la structure des données utilisateur (basée sur le HTML)\r\n+export interface User {\r\n+  id: number; // Ajout d'un ID\r\n+  fullName: string;\r\n+  email: string;\r\n+  roleClass: string; // Classe CSS pour le badge de rôle (ex: 'super-admin', 'admin', 'user')\r\n+  roleText: string;  // Texte du badge de rôle\r\n+  statusClass: string; // Classe CSS pour le badge de statut (ex: 'active', 'inactive')\r\n+  statusText: string;  // Texte du badge de statut\r\n+}\r\n+\r\n+\r\n+@Component({\r\n+  selector: 'app-dashboard',\r\n+  templateUrl: './dashboard.component.html',\r\n+  styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n+})\r\n+export class DashboardComponent implements OnInit, AfterViewInit {\r\n+\r\n+  currentAgence: any;\r\n+  isLoadingUsers: boolean = false;\r\n+\r\n+// --- Variables pour les statistiques ---\r\n+pendingProjectCount: number = 12;\r\n+inProgressProjectCount: number = 64;\r\n+completedProjectCount: number = 105;\r\n+totalTasks: number = 56;\r\n+assignedMembers: number = 8;\r\n+relatedProjects: number = 30;\r\n+projectDataSource = new MatTableDataSource<Project>();\r\n+  userDataSource = new MatTableDataSource<User>();\r\n+\r\n+  projectDisplayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n+  userDisplayedColumns: string[] = ['fullName', 'email', 'role', 'status', 'actions'];\r\n+\r\n+\r\n+  projects: Project[] = [\r\n+    { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n+    { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n+    { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n+  ];\r\n+\r\n+  users: User[] = [];\r\n+\r\n+  // --- Chart Instance ---\r\n+  public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n+\r\n+  constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.loadAgence();\r\n+    console.log('userss',this.users);\r\n+    \r\n+  }\r\n+\r\n+  ngAfterViewInit(): void {\r\n+    // Créer le graphique une fois que la vue est initialisée\r\n+    this.createChart();\r\n+  }\r\n+    createChart(): void {\r\n+      // Correction : Utiliser l'ID 'taskChartDashboard' qui correspond à l'HTML\r\n+      const ctx = document.getElementById('taskChartDashboard') as HTMLCanvasElement;\r\n+      if (ctx) {\r\n+        // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n+        if (this.chart) {\r\n+          this.chart.destroy();\r\n+        }\r\n+  \r\n+        this.chart = new Chart(ctx, {\r\n+          type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n+          data: {\r\n+            labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n+            datasets: [{\r\n+              label: 'Tâches complétées', // Légende du dataset\r\n+              data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n+              backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n+              borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n+              borderWidth: 1\r\n+            }]\r\n+          },\r\n+          options: {\r\n+            responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n+            maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n+            scales: {\r\n+              y: {\r\n+                beginAtZero: true, // L'axe Y commence à 0\r\n+                title: {\r\n+                  display: true,\r\n+                  text: 'Nombre de tâches' // Titre de l'axe Y\r\n+                }\r\n+              },\r\n+              x: {\r\n+                title: {\r\n+                  display: true,\r\n+                  text: 'Mois' // Titre de l'axe X\r\n+                }\r\n+              }\r\n+            },\r\n+            plugins: {\r\n+              legend: {\r\n+                display: true, // Afficher la légende\r\n+                position: 'top', // Position de la légende\r\n+              },\r\n+              tooltip: {\r\n+                enabled: true // Activer les infobulles au survol\r\n+              }\r\n+            }\r\n+          }\r\n+        });\r\n+      } else {\r\n+        // Le message d'erreur sera maintenant correct si l'élément n'est toujours pas trouvé\r\n+        console.error(\"L'élément Canvas avec l'ID 'taskChartDashboard' n'a pas été trouvé.\");\r\n+      }\r\n+    }\r\n+  \r\n+\r\n+  // --- Méthodes pour les actions (placeholders) ---\r\n+\r\n+  addNewProject(): void {\r\n+    console.log('Action: Ajouter un nouveau projet');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewProject(project: Project): void {\r\n+    console.log('Action: Voir le projet', project);\r\n+    // Logique pour afficher les détails du projet (modal, navigation)\r\n+  }\r\n+\r\n+  editProject(project: Project): void {\r\n+    console.log('Action: Modifier le projet', project);\r\n+    // Logique pour ouvrir le formulaire d'édition du projet\r\n+  }\r\n+\r\n+  deleteProject(project: Project): void {\r\n+    console.warn('Action: Supprimer le projet', project);\r\n+    // Logique pour confirmer et supprimer le projet (appel API)\r\n+    // Pensez à mettre à jour this.projects après suppression\r\n+  }\r\n+\r\n+  addNewUser(): void {\r\n+    console.log('Action: Ajouter un nouvel utilisateur');\r\n+    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n+  }\r\n+\r\n+  viewUser(user: User): void {\r\n+    console.log('Action: Voir l\\'utilisateur', user);\r\n+     // Logique pour afficher les détails de l'utilisateur\r\n+  }\r\n+\r\n+  editUser(user: User): void {\r\n+    console.log('Action: Modifier l\\'utilisateur', user);\r\n+     // Logique pour ouvrir le formulaire d'édition de l'utilisateur\r\n+  }\r\n+\r\n+  deleteUser(user: User): void {\r\n+    console.warn('Action: Supprimer l\\'utilisateur', user);\r\n+    // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n+    // Pensez à mettre à jour this.users après suppression\r\n+  }\r\n+  loadAgence(): void {\r\n+    const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n+    if (userProfile?.preferred_username) {\r\n+      \r\n+      this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n+        mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n+      ).subscribe({\r\n+        next: (agence) => {\r\n+          \r\n+          this.currentAgence = agence;\r\n+         \r\n+          this.loadUsers();\r\n+          \r\n+        },\r\n+        error: (err) => console.error('Error loading agency:', err)\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  \r\n+  loadUsers(): void {\r\n+    if (!this.currentAgence[0]?.name) return;\r\n+\r\n+    this.isLoadingUsers = true;\r\n+    const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n+\r\n+    this.agenceService.getMembersByGroupName(this.currentAgence[0].name).pipe(\r\n+      catchError(err => {\r\n+        console.error('Failed to get group members', err);\r\n+        return of([]);\r\n+      }),\r\n+      mergeMap(users => users.length ? from(users) : of([])),\r\n+      mergeMap(user => this.processUserRoles(user, ROLE_HIERARCHY), 5),\r\n+      toArray(),\r\n+      finalize(() => this.isLoadingUsers = false)\r\n+    ).subscribe({\r\n+      next: (usersWithRoles) => this.users = usersWithRoles,\r\n+      error: (err) => console.error('Failed to load users with roles', err)\r\n+    });\r\n+  }\r\n+\r\n+  private processUserRoles(user: any, roleHierarchy: string[]) {\r\n+    return this.userService.getUserRoles(user.id).pipe(\r\n+      map(roles => ({\r\n+        ...user,\r\n+        role: this.getHighestRole(roles, roleHierarchy)\r\n+      })),\r\n+      catchError(() => of({\r\n+        ...user,\r\n+        role: 'Erreur Rôle'\r\n+      })),\r\n+      timeout(8000)\r\n+    );\r\n+  }\r\n+\r\n+  private getHighestRole(roles: any[], hierarchy: string[]): string {\r\n+    const roleNames = roles.map(r => r.name.toUpperCase());\r\n+    return hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1745493510103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,248 +194,8 @@\n \r\n \r\n   \r\n   loadUsers(): void {\r\n-    if (!this.currentAgence[0]?.name) return;\r\n-\r\n-    this.isLoadingUsers = true;\r\n-    const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n-\r\n-    this.agenceService.getMembersByGroupName(this.currentAgence[0].name).pipe(\r\n-      catchError(err => {\r\n-        console.error('Failed to get group members', err);\r\n-        return of([]);\r\n-      }),\r\n-      mergeMap(users => users.length ? from(users) : of([])),\r\n-      mergeMap(user => this.processUserRoles(user, ROLE_HIERARCHY), 5),\r\n-      toArray(),\r\n-      finalize(() => this.isLoadingUsers = false)\r\n-    ).subscribe({\r\n-      next: (usersWithRoles) => this.users = usersWithRoles,\r\n-      error: (err) => console.error('Failed to load users with roles', err)\r\n-    });\r\n-  }\r\n-\r\n-  private processUserRoles(user: any, roleHierarchy: string[]) {\r\n-    return this.userService.getUserRoles(user.id).pipe(\r\n-      map(roles => ({\r\n-        ...user,\r\n-        role: this.getHighestRole(roles, roleHierarchy)\r\n-      })),\r\n-      catchError(() => of({\r\n-        ...user,\r\n-        role: 'Erreur Rôle'\r\n-      })),\r\n-      timeout(8000)\r\n-    );\r\n-  }\r\n-\r\n-  private getHighestRole(roles: any[], hierarchy: string[]): string {\r\n-    const roleNames = roles.map(r => r.name.toUpperCase());\r\n-    return hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n-  }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-import { Component, OnInit, AfterViewInit } from '@angular/core';\r\n-import Chart from 'chart.js/auto'; // Import Chart.js\r\n-import { MatTableDataSource } from '@angular/material/table';\r\n-import { AgenceService } from '../services/agenceService';\r\n-import { UserService } from '../services/UserService';\r\n-import { catchError, finalize, from, map, mergeMap, of, takeUntil, timeout, toArray } from 'rxjs';\r\n-\r\n-// Interface pour la structure des données de projet (basée sur le HTML)\r\n-export interface Project {\r\n-  id: number; // Ajout d'un ID pour la gestion\r\n-  name: string;\r\n-  statusClass: string; // Classe CSS pour le badge (ex: 'in-progress', 'completed')\r\n-  statusText: string;  // Texte du badge (ex: 'En cours', 'Terminé')\r\n-  progress: number;    // Pourcentage de progression\r\n-}\r\n-\r\n-// Interface pour la structure des données utilisateur (basée sur le HTML)\r\n-export interface User {\r\n-  id: number; // Ajout d'un ID\r\n-  fullName: string;\r\n-  email: string;\r\n-  roleClass: string; // Classe CSS pour le badge de rôle (ex: 'super-admin', 'admin', 'user')\r\n-  roleText: string;  // Texte du badge de rôle\r\n-  statusClass: string; // Classe CSS pour le badge de statut (ex: 'active', 'inactive')\r\n-  statusText: string;  // Texte du badge de statut\r\n-}\r\n-\r\n-\r\n-@Component({\r\n-  selector: 'app-dashboard',\r\n-  templateUrl: './dashboard.component.html',\r\n-  styleUrls: ['./dashboard.component.scss'] // Correction: utiliser styleUrls au lieu de styleUrl\r\n-})\r\n-export class DashboardComponent implements OnInit, AfterViewInit {\r\n-\r\n-  currentAgence: any;\r\n-  isLoadingUsers: boolean = false;\r\n-\r\n-// --- Variables pour les statistiques ---\r\n-pendingProjectCount: number = 12;\r\n-inProgressProjectCount: number = 64;\r\n-completedProjectCount: number = 105;\r\n-totalTasks: number = 56;\r\n-assignedMembers: number = 8;\r\n-relatedProjects: number = 30;\r\n-projectDataSource = new MatTableDataSource<Project>();\r\n-  userDataSource = new MatTableDataSource<User>();\r\n-\r\n-  projectDisplayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n-  userDisplayedColumns: string[] = ['fullName', 'email', 'role', 'status', 'actions'];\r\n-\r\n-\r\n-  projects: Project[] = [\r\n-    { id: 1, name: 'Projet Alpha - Rénovation Villa', statusClass: 'in-progress', statusText: 'En cours', progress: 60 },\r\n-    { id: 2, name: 'Projet Beta - Construction Immeuble', statusClass: 'completed', statusText: 'Terminé', progress: 100 },\r\n-    { id: 3, name: 'Projet Gamma - Étude Centre Commercial', statusClass: 'pending', statusText: 'En attente', progress: 15 },\r\n-  ];\r\n-\r\n-  users: User[] = [];\r\n-\r\n-  // --- Chart Instance ---\r\n-  public chart: Chart | undefined; // Pour stocker l'instance du graphique si besoin\r\n-\r\n-  constructor( private agenceService: AgenceService, private userService: UserService) { }\r\n-\r\n-  ngOnInit(): void {\r\n-    this.loadAgence();\r\n-    console.log('userss',this.users);\r\n-    \r\n-  }\r\n-\r\n-  ngAfterViewInit(): void {\r\n-    // Créer le graphique une fois que la vue est initialisée\r\n-    this.createChart();\r\n-  }\r\n-    createChart(): void {\r\n-      // Correction : Utiliser l'ID 'taskChartDashboard' qui correspond à l'HTML\r\n-      const ctx = document.getElementById('taskChartDashboard') as HTMLCanvasElement;\r\n-      if (ctx) {\r\n-        // Détruire l'ancien graphique s'il existe pour éviter les doublons\r\n-        if (this.chart) {\r\n-          this.chart.destroy();\r\n-        }\r\n-  \r\n-        this.chart = new Chart(ctx, {\r\n-          type: 'bar', // Type de graphique (bar, line, pie, etc.)\r\n-          data: {\r\n-            labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Labels pour l'axe X\r\n-            datasets: [{\r\n-              label: 'Tâches complétées', // Légende du dataset\r\n-              data: [50, 60, 75, 90, 110, 130], // Données pour chaque label\r\n-              backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur de fond des barres (utilise --primary-color avec transparence)\r\n-              borderColor: 'rgba(74, 144, 226, 1)', // Couleur de bordure des barres\r\n-              borderWidth: 1\r\n-            }]\r\n-          },\r\n-          options: {\r\n-            responsive: true, // Le graphique s'adapte à la taille du conteneur\r\n-            maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n-            scales: {\r\n-              y: {\r\n-                beginAtZero: true, // L'axe Y commence à 0\r\n-                title: {\r\n-                  display: true,\r\n-                  text: 'Nombre de tâches' // Titre de l'axe Y\r\n-                }\r\n-              },\r\n-              x: {\r\n-                title: {\r\n-                  display: true,\r\n-                  text: 'Mois' // Titre de l'axe X\r\n-                }\r\n-              }\r\n-            },\r\n-            plugins: {\r\n-              legend: {\r\n-                display: true, // Afficher la légende\r\n-                position: 'top', // Position de la légende\r\n-              },\r\n-              tooltip: {\r\n-                enabled: true // Activer les infobulles au survol\r\n-              }\r\n-            }\r\n-          }\r\n-        });\r\n-      } else {\r\n-        // Le message d'erreur sera maintenant correct si l'élément n'est toujours pas trouvé\r\n-        console.error(\"L'élément Canvas avec l'ID 'taskChartDashboard' n'a pas été trouvé.\");\r\n-      }\r\n-    }\r\n-  \r\n-\r\n-  // --- Méthodes pour les actions (placeholders) ---\r\n-\r\n-  addNewProject(): void {\r\n-    console.log('Action: Ajouter un nouveau projet');\r\n-    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n-  }\r\n-\r\n-  viewProject(project: Project): void {\r\n-    console.log('Action: Voir le projet', project);\r\n-    // Logique pour afficher les détails du projet (modal, navigation)\r\n-  }\r\n-\r\n-  editProject(project: Project): void {\r\n-    console.log('Action: Modifier le projet', project);\r\n-    // Logique pour ouvrir le formulaire d'édition du projet\r\n-  }\r\n-\r\n-  deleteProject(project: Project): void {\r\n-    console.warn('Action: Supprimer le projet', project);\r\n-    // Logique pour confirmer et supprimer le projet (appel API)\r\n-    // Pensez à mettre à jour this.projects après suppression\r\n-  }\r\n-\r\n-  addNewUser(): void {\r\n-    console.log('Action: Ajouter un nouvel utilisateur');\r\n-    // Logique pour ouvrir un formulaire ou naviguer vers la page de création\r\n-  }\r\n-\r\n-  viewUser(user: User): void {\r\n-    console.log('Action: Voir l\\'utilisateur', user);\r\n-     // Logique pour afficher les détails de l'utilisateur\r\n-  }\r\n-\r\n-  editUser(user: User): void {\r\n-    console.log('Action: Modifier l\\'utilisateur', user);\r\n-     // Logique pour ouvrir le formulaire d'édition de l'utilisateur\r\n-  }\r\n-\r\n-  deleteUser(user: User): void {\r\n-    console.warn('Action: Supprimer l\\'utilisateur', user);\r\n-    // Logique pour confirmer et supprimer l'utilisateur (appel API)\r\n-    // Pensez à mettre à jour this.users après suppression\r\n-  }\r\n-  loadAgence(): void {\r\n-    const userProfile = JSON.parse(localStorage.getItem('user_profile') || '{}');\r\n-    if (userProfile?.preferred_username) {\r\n-      \r\n-      this.agenceService.getUserByUsername(userProfile.preferred_username).pipe(\r\n-        mergeMap(user => this.agenceService.getAgenceByUser(user.id))\r\n-      ).subscribe({\r\n-        next: (agence) => {\r\n-          \r\n-          this.currentAgence = agence;\r\n-         \r\n-          this.loadUsers();\r\n-          \r\n-        },\r\n-        error: (err) => console.error('Error loading agency:', err)\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  \r\n-  loadUsers(): void {\r\n     if (!this.currentAgence[0]?.name) {\r\n         console.log('Aucune agence sélectionnée - arrêt du chargement des utilisateurs');\r\n         return;\r\n     }\r\n@@ -483,39 +243,9 @@\n         }\r\n     });\r\n }\r\n \r\n-private processUserRoles(user: any, roleHierarchy: string[]) {\r\n-    console.log(`Récupération des rôles pour l'utilisateur ${user.id}`);\r\n-    \r\n-    return this.agenceService.getUserRoles(user.id).pipe(\r\n-        tap(roles => console.log(`Rôles bruts reçus pour ${user.username}:`, roles)),\r\n-        map(roles => ({\r\n-            ...user,\r\n-            role: this.getHighestRole(roles, roleHierarchy)\r\n-        })),\r\n-        catchError((err) => {\r\n-            console.error(`Erreur lors de la récupération des rôles pour ${user.id}:`, err);\r\n-            return of({\r\n-                ...user,\r\n-                role: 'ERREUR_RÔLE'\r\n-            });\r\n-        }),\r\n-        timeout(8000),\r\n-        finalize(() => console.log(`Terminé le traitement des rôles pour ${user.id}`))\r\n-    );\r\n-}\r\n \r\n-private getHighestRole(roles: any[], hierarchy: string[]): string {\r\n-    const roleNames = roles.map(r => r.name?.toUpperCase());\r\n-    console.log(`Noms de rôles normalisés: ${roleNames}`);\r\n-    \r\n-    const foundRole = hierarchy.find(role => roleNames.includes(role)) || 'USER';\r\n-    console.log(`Rôle le plus élevé trouvé: ${foundRole}`);\r\n-    \r\n-    return foundRole;\r\n-}\r\n-\r\n   private processUserRoles(user: any, roleHierarchy: string[]) {\r\n     return this.userService.getUserRoles(user.id).pipe(\r\n       map(roles => ({\r\n         ...user,\r\n"
                },
                {
                    "date": 1745493521760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import Chart from 'chart.js/auto'; // Import Chart.js\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import { AgenceService } from '../services/agenceService';\r\n import { UserService } from '../services/UserService';\r\n-import { catchError, finalize, from, map, mergeMap, of, takeUntil, timeout, toArray } from 'rxjs';\r\n+import { catchError, finalize, from, map, mergeMap, of, takeUntil, tap, timeout, toArray } from 'rxjs';\r\n \r\n // Interface pour la structure des données de projet (basée sur le HTML)\r\n export interface Project {\r\n   id: number; // Ajout d'un ID pour la gestion\r\n"
                },
                {
                    "date": 1745493528048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n \r\n   \r\n   loadUsers(): void {\r\n     if (!this.currentAgence[0]?.name) {\r\n-        console.log('Aucune agence sélectionnée - arrêt du chargement des utilisateurs');\r\n+        \r\n         return;\r\n     }\r\n \r\n     const agencyName = this.currentAgence[0].name;\r\n"
                },
                {
                    "date": 1745493534497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,8 @@\n \r\n   \r\n   loadUsers(): void {\r\n     if (!this.currentAgence[0]?.name) {\r\n-        \r\n         return;\r\n     }\r\n \r\n     const agencyName = this.currentAgence[0].name;\r\n"
                },
                {
                    "date": 1745493542415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n         return;\r\n     }\r\n \r\n     const agencyName = this.currentAgence[0].name;\r\n-     \r\n+    \r\n     this.isLoadingUsers = true;\r\n     const ROLE_HIERARCHY = ['SUPER-ADMIN', 'ADMIN', 'USER'];\r\n     console.log('Hiérarchie des rôles définie:', ROLE_HIERARCHY);\r\n \r\n"
                },
                {
                    "date": 1745499004437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         },\r\n         error: (err) => {\r\n             console.error('Erreur globale dans le flux:', err);\r\n             \r\n-        }s\r\n+        }\r\n     });\r\n    \r\n }\r\n \r\n"
                }
            ],
            "date": 1741610369439,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.scss'\r\n})\r\nexport class DashboardComponent {\r\n  ngAfterViewInit() {\r\n    new Chart(\"chart\", {\r\n      type: 'bar',\r\n      data: {\r\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\r\n        datasets: [{\r\n          label: 'Flights',\r\n          data: [30, 45, 60, 50, 75, 90],\r\n          backgroundColor: '#2787C0'\r\n        }]\r\n      }\r\n    });\r\n  }\r\n}\r\n"
        }
    ]
}