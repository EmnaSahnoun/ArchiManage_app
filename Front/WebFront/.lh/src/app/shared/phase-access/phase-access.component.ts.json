{
    "sourceFile": "src/app/shared/phase-access/phase-access.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1746306825369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746306860755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,18 @@\n import { Component } from '@angular/core';\r\n+export interface ProjectAccessData {\r\n+  projectId: string;\r\n+  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n+  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n+}\r\n \r\n+// Interface pour représenter un utilisateur avec son état d'accès\r\n+export interface UserAccess {\r\n+  id: string;\r\n+  username: string; // Ou firstName + lastName\r\n+  email: string;\r\n+  canView: boolean;\r\n+}\r\n @Component({\r\n   selector: 'app-phase-access',\r\n   templateUrl: './phase-access.component.html',\r\n   styleUrl: './phase-access.component.scss'\r\n"
                },
                {
                    "date": 1746306867497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import { Component, Inject, Input, OnInit } from '@angular/core';\r\n+import { MatSnackBar } from '@angular/material/snack-bar';\r\n+import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n+import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n+import { forkJoin, map } from 'rxjs';\r\n+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n+export interface ProjectAccessData {\r\n+  projectId: string;\r\n+  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n+  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n+}\r\n+\r\n+// Interface pour représenter un utilisateur avec son état d'accès\r\n+export interface UserAccess {\r\n+  id: string;\r\n+  username: string; // Ou firstName + lastName\r\n+  email: string;\r\n+  canView: boolean;\r\n+}\r\n+@Component({\r\n+  selector: 'app-phase-access',\r\n+  templateUrl: './phase-access.component.html',\r\n+  styleUrl: './phase-access.component.scss'\r\n+})\r\n+export class PhaseAccessComponent {\r\n+isLoading = false;\r\n+  searchQuery = '';\r\n+  allUsers: UserAccess[] = []; \r\n+ \r\n+  filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n+  @Input() phase: any;\r\n+\r\n+  constructor(\r\n+    \r\n+    public activeModal: NgbActiveModal,\r\n+\r\n+    private agenceService: AgenceService,\r\n+    private projectService: ProjectService,\r\n+    private snackBar: MatSnackBar\r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    console.log('Phase:', this.phase);\r\n+    this.loadUsersAndAccess();\r\n+  }\r\n+\r\n+  loadUsersAndAccess(): void {\r\n+    this.isLoading = true;\r\n+        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n+      next: (phaseAccesses) => {\r\n+        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n+  \r\n+        // Créer un tableau pour stocker toutes les requêtes\r\n+        const userRequests = phaseAccesses.map(access => \r\n+          this.agenceService.getUserById(access.idUser).pipe(\r\n+            map(user => ({\r\n+              ...access, // Conserver les données d'accès originales\r\n+              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n+              username: user.username, // Ajouter le username\r\n+              email: user.email \r\n+            }))\r\n+          )\r\n+        );\r\n+  \r\n+        // Exécuter toutes les requêtes en parallèle\r\n+        forkJoin(userRequests).subscribe({\r\n+          next: (usersWithAccess) => {\r\n+            // Maintenant usersWithAccess contient les accès avec les usernames\r\n+            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n+            this.allUsers = usersWithAccess.map(u => ({\r\n+              id: u.idUser, // User ID\r\n+              username: u.username || 'N/A', // Provide fallback\r\n+              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n+              canView: u.canView // Get canView from the original access object\r\n+            }));\r\n+            console.log('Usernames:', this.allUsers);\r\n+            \r\n+            this.applyFilter();\r\n+            this.isLoading = false;\r\n+          },\r\n+          error: (err) => {\r\n+            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n+            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n+            this.isLoading = false;\r\n+          }\r\n+        });\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Erreur lors du chargement des accès:', err);\r\n+        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n+        this.isLoading = false;\r\n+        this.activeModal.dismiss();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  applyFilter(): void {\r\n+    \r\n+    if (!this.searchQuery) {\r\n+      this.filteredUsers = [...this.allUsers];\r\n+    } else {\r\n+      const query = this.searchQuery.toLowerCase();\r\n+      this.filteredUsers = this.allUsers.filter(user =>\r\n+        (user.username && user.username.toLowerCase().includes(query)) \r\n+     \r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  onSave(): void {\r\n+    this.isLoading = true;\r\n+    // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n+    const accessUpdates = this.allUsers.map(user => ({\r\n+      userId: user.id,\r\n+      canView: user.canView\r\n+    }));\r\n+    console.log(\"Updating access for phase:\", this.phase.id, \"with data:\", accessUpdates);\r\n+\r\n+    // Appeler le service pour mettre à jour les accès\r\n+   /*  this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n+      next: () => {\r\n+        this.isLoading = false;\r\n+        this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n+        this.activeModal.close(true);// Fermer et indiquer le succès\r\n+      },\r\n+      error: (err:any) => {\r\n+        this.isLoading = false;\r\n+        console.error('Erreur lors de la mise à jour des accès:', err);\r\n+        this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n+        // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n+      }\r\n+    }); */\r\n+  } \r\n+\r\n+  onCancel(): void {\r\n+    this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n+  }\r\n+\r\n+  // Optionnel: Pour suivre les éléments dans *ngFor pour de meilleures performances\r\n+  trackByUser(index: number, item: UserAccess): string {\r\n+    return item.id;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746307306668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,167 +108,73 @@\n   }\r\n \r\n   onSave(): void {\r\n     this.isLoading = true;\r\n-    // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n-    const accessUpdates = this.allUsers.map(user => ({\r\n-      userId: user.id,\r\n-      canView: user.canView\r\n-    }));\r\n-    console.log(\"Updating access for phase:\", this.phase.id, \"with data:\", accessUpdates);\r\n-\r\n-    // Appeler le service pour mettre à jour les accès\r\n-   /*  this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n-      next: () => {\r\n-        this.isLoading = false;\r\n-        this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n-        this.activeModal.close(true);// Fermer et indiquer le succès\r\n-      },\r\n-      error: (err:any) => {\r\n-        this.isLoading = false;\r\n-        console.error('Erreur lors de la mise à jour des accès:', err);\r\n-        this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n-        // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n-      }\r\n-    }); */\r\n-  } \r\n-\r\n-  onCancel(): void {\r\n-    this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n-  }\r\n-\r\n-  // Optionnel: Pour suivre les éléments dans *ngFor pour de meilleures performances\r\n-  trackByUser(index: number, item: UserAccess): string {\r\n-    return item.id;\r\n-  }\r\n-}\r\n-import { Component } from '@angular/core';\r\n-export interface ProjectAccessData {\r\n-  projectId: string;\r\n-  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n-  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n-}\r\n-\r\n-// Interface pour représenter un utilisateur avec son état d'accès\r\n-export interface UserAccess {\r\n-  id: string;\r\n-  username: string; // Ou firstName + lastName\r\n-  email: string;\r\n-  canView: boolean;\r\n-}\r\n-@Component({\r\n-  selector: 'app-phase-access',\r\n-  templateUrl: './phase-access.component.html',\r\n-  styleUrl: './phase-access.component.scss'\r\n-})\r\n-export class PhaseAccessComponent {\r\n-isLoading = false;\r\n-  searchQuery = '';\r\n-  allUsers: UserAccess[] = []; \r\n- \r\n-  filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n-  @Input() phase: any;\r\n-\r\n-  constructor(\r\n     \r\n-    public activeModal: NgbActiveModal,\r\n-\r\n-    private agenceService: AgenceService,\r\n-    private projectService: ProjectService,\r\n-    private snackBar: MatSnackBar\r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    console.log('Phase:', this.phase);\r\n-    this.loadUsersAndAccess();\r\n-  }\r\n-\r\n-  loadUsersAndAccess(): void {\r\n-    this.isLoading = true;\r\n-        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n-      next: (phaseAccesses) => {\r\n-        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n+    // Filtrer uniquement les utilisateurs dont l'accès a été modifié\r\n+    const modifiedUsers = this.allUsers.filter(user => \r\n+      user.hasOwnProperty('canView') && \r\n+      user.hasOwnProperty('originalCanView') && \r\n+      user.canView !== user.originalCanView\r\n+    );\r\n   \r\n-        // Créer un tableau pour stocker toutes les requêtes\r\n-        const userRequests = phaseAccesses.map(access => \r\n-          this.agenceService.getUserById(access.idUser).pipe(\r\n-            map(user => ({\r\n-              ...access, // Conserver les données d'accès originales\r\n-              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n-              username: user.username, // Ajouter le username\r\n-              email: user.email \r\n-            }))\r\n-          )\r\n-        );\r\n+    if (modifiedUsers.length === 0) {\r\n+      this.isLoading = false;\r\n+      this.snackBar.open('Aucune modification à sauvegarder', 'Fermer', { \r\n+        duration: 3000,\r\n+        panelClass: ['info-snackbar']\r\n+      });\r\n+      return;\r\n+    }\r\n   \r\n-        // Exécuter toutes les requêtes en parallèle\r\n-        forkJoin(userRequests).subscribe({\r\n-          next: (usersWithAccess) => {\r\n-            // Maintenant usersWithAccess contient les accès avec les usernames\r\n-            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.allUsers = usersWithAccess.map(u => ({\r\n-              id: u.idUser, // User ID\r\n-              username: u.username || 'N/A', // Provide fallback\r\n-              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n-              canView: u.canView // Get canView from the original access object\r\n-            }));\r\n-            console.log('Usernames:', this.allUsers);\r\n-            \r\n-            this.applyFilter();\r\n-            this.isLoading = false;\r\n-          },\r\n-          error: (err) => {\r\n-            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n-            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n-            this.isLoading = false;\r\n-          }\r\n-        });\r\n+    // Créer les requêtes de mise à jour\r\n+    const updateRequests = modifiedUsers.map(user => {\r\n+      return this.projectService.updatePhaseAccess(user.id, user.canView).pipe(\r\n+        map(() => ({ success: true, userId: user.id })),\r\n+        catchError(error => {\r\n+          console.error(`Erreur mise à jour accès utilisateur ${user.id}:`, error);\r\n+          return of({ \r\n+            success: false, \r\n+            userId: user.id,\r\n+            error: error.message || 'Erreur inconnue'\r\n+          });\r\n+        })\r\n+      );\r\n+    });\r\n+  \r\n+    // Exécuter les requêtes en parallèle\r\n+    forkJoin(updateRequests).subscribe({\r\n+      next: (results) => {\r\n+        this.isLoading = false;\r\n+        const failedUpdates = results.filter(r => !r.success);\r\n+        \r\n+        if (failedUpdates.length === 0) {\r\n+          // Mettre à jour les originalCanView après succès\r\n+          modifiedUsers.forEach(user => user.originalCanView = user.canView);\r\n+          \r\n+          this.snackBar.open('Modifications sauvegardées avec succès', 'Fermer', {\r\n+            duration: 3000,\r\n+            panelClass: ['success-snackbar']\r\n+          });\r\n+          this.dialogRef.close(true);\r\n+        } else {\r\n+          console.error('Échecs partiels:', failedUpdates);\r\n+          this.snackBar.open(\r\n+            `${failedUpdates.length} erreur(s) lors de la sauvegarde`,\r\n+            'Fermer',\r\n+            { duration: 5000, panelClass: ['error-snackbar'] }\r\n+          );\r\n+        }\r\n       },\r\n       error: (err) => {\r\n-        console.error('Erreur lors du chargement des accès:', err);\r\n-        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n         this.isLoading = false;\r\n-        this.activeModal.dismiss();\r\n+        console.error('Erreur globale:', err);\r\n+        this.snackBar.open('Erreur lors de la sauvegarde', 'Fermer', {\r\n+          duration: 5000,\r\n+          panelClass: ['error-snackbar']\r\n+        });\r\n       }\r\n     });\r\n-  }\r\n-\r\n-  applyFilter(): void {\r\n-    \r\n-    if (!this.searchQuery) {\r\n-      this.filteredUsers = [...this.allUsers];\r\n-    } else {\r\n-      const query = this.searchQuery.toLowerCase();\r\n-      this.filteredUsers = this.allUsers.filter(user =>\r\n-        (user.username && user.username.toLowerCase().includes(query)) \r\n-     \r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  onSave(): void {\r\n-    this.isLoading = true;\r\n-    // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n-    const accessUpdates = this.allUsers.map(user => ({\r\n-      userId: user.id,\r\n-      canView: user.canView\r\n-    }));\r\n-    console.log(\"Updating access for phase:\", this.phase.id, \"with data:\", accessUpdates);\r\n-\r\n-    // Appeler le service pour mettre à jour les accès\r\n-   /*  this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n-      next: () => {\r\n-        this.isLoading = false;\r\n-        this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n-        this.activeModal.close(true);// Fermer et indiquer le succès\r\n-      },\r\n-      error: (err:any) => {\r\n-        this.isLoading = false;\r\n-        console.error('Erreur lors de la mise à jour des accès:', err);\r\n-        this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n-        // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n-      }\r\n-    }); */\r\n   } \r\n \r\n   onCancel(): void {\r\n     this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n"
                },
                {
                    "date": 1746307587055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n export class PhaseAccessComponent {\r\n isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; \r\n- \r\n+  filteredUsers: UserAccess[] = [];\r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n"
                },
                {
                    "date": 1746307611780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n export class PhaseAccessComponent {\r\n isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; \r\n-  filteredUsers: UserAccess[] = [];\r\n+ \r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n@@ -45,52 +45,29 @@\n   }\r\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n-        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n+    \r\n+    this.projectService.getPhaseAccessByIdPhase(this.data.phase._id).subscribe({\r\n       next: (phaseAccesses) => {\r\n-        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n-  \r\n-        // Créer un tableau pour stocker toutes les requêtes\r\n-        const userRequests = phaseAccesses.map(access => \r\n-          this.agenceService.getUserById(access.idUser).pipe(\r\n-            map(user => ({\r\n-              ...access, // Conserver les données d'accès originales\r\n-              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n-              username: user.username, // Ajouter le username\r\n-              email: user.email \r\n-            }))\r\n-          )\r\n-        );\r\n-  \r\n-        // Exécuter toutes les requêtes en parallèle\r\n-        forkJoin(userRequests).subscribe({\r\n-          next: (usersWithAccess) => {\r\n-            // Maintenant usersWithAccess contient les accès avec les usernames\r\n-            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.allUsers = usersWithAccess.map(u => ({\r\n-              id: u.idUser, // User ID\r\n-              username: u.username || 'N/A', // Provide fallback\r\n-              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n-              canView: u.canView // Get canView from the original access object\r\n-            }));\r\n-            console.log('Usernames:', this.allUsers);\r\n-            \r\n-            this.applyFilter();\r\n-            this.isLoading = false;\r\n-          },\r\n-          error: (err) => {\r\n-            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n-            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n-            this.isLoading = false;\r\n-          }\r\n-        });\r\n+        this.allUsers = phaseAccesses.map(access => ({\r\n+          id: access.idUser,\r\n+          username: access.username || 'Utilisateur inconnu',\r\n+          email: access.emailUser,\r\n+          canView: access.canView,\r\n+          originalCanView: access.canView\r\n+        }));\r\n+        \r\n+        this.applyFilter();\r\n+        this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n-        console.error('Erreur lors du chargement des accès:', err);\r\n-        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n+        console.error('Erreur:', err);\r\n         this.isLoading = false;\r\n-        this.activeModal.dismiss();\r\n+        this.snackBar.open('Erreur de chargement des accès', 'Fermer', {\r\n+          duration: 3000,\r\n+          panelClass: ['error-snackbar']\r\n+        });\r\n       }\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746307644125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,29 +45,52 @@\n   }\r\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n-    \r\n-    this.projectService.getPhaseAccessByIdPhase(this.data.phase._id).subscribe({\r\n+        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n       next: (phaseAccesses) => {\r\n-        this.allUsers = phaseAccesses.map(access => ({\r\n-          id: access.idUser,\r\n-          username: access.username || 'Utilisateur inconnu',\r\n-          email: access.emailUser,\r\n-          canView: access.canView,\r\n-          originalCanView: access.canView\r\n-        }));\r\n-        \r\n-        this.applyFilter();\r\n-        this.isLoading = false;\r\n+        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n+  \r\n+        // Créer un tableau pour stocker toutes les requêtes\r\n+        const userRequests = phaseAccesses.map(access => \r\n+          this.agenceService.getUserById(access.idUser).pipe(\r\n+            map(user => ({\r\n+              ...access, // Conserver les données d'accès originales\r\n+              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n+              username: user.username, // Ajouter le username\r\n+              email: user.email \r\n+            }))\r\n+          )\r\n+        );\r\n+  \r\n+        // Exécuter toutes les requêtes en parallèle\r\n+        forkJoin(userRequests).subscribe({\r\n+          next: (usersWithAccess) => {\r\n+            // Maintenant usersWithAccess contient les accès avec les usernames\r\n+            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n+            this.allUsers = usersWithAccess.map(u => ({\r\n+              id: u.idUser, // User ID\r\n+              username: u.username || 'N/A', // Provide fallback\r\n+              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n+              canView: u.canView // Get canView from the original access object\r\n+            }));\r\n+            console.log('Usernames:', this.allUsers);\r\n+            \r\n+            this.applyFilter();\r\n+            this.isLoading = false;\r\n+          },\r\n+          error: (err) => {\r\n+            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n+            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n+            this.isLoading = false;\r\n+          }\r\n+        });\r\n       },\r\n       error: (err) => {\r\n-        console.error('Erreur:', err);\r\n+        console.error('Erreur lors du chargement des accès:', err);\r\n+        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n         this.isLoading = false;\r\n-        this.snackBar.open('Erreur de chargement des accès', 'Fermer', {\r\n-          duration: 3000,\r\n-          panelClass: ['error-snackbar']\r\n-        });\r\n+        this.activeModal.dismiss();\r\n       }\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746307661254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,11 @@\n             map(user => ({\r\n               ...access, // Conserver les données d'accès originales\r\n               id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n               username: user.username, // Ajouter le username\r\n-              email: user.email \r\n+              email: user.email ,\r\n+              canView: access.canView,\r\n+          originalCanView: access.canView\r\n             }))\r\n           )\r\n         );\r\n   \r\n"
                },
                {
                    "date": 1746307684627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n             this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n             this.isLoading = false;\r\n           }\r\n         });\r\n+        this.applyFilter\r\n       },\r\n       error: (err) => {\r\n         console.error('Erreur lors du chargement des accès:', err);\r\n         this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n"
                },
                {
                    "date": 1746307706015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,10 @@\n             this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n             this.isLoading = false;\r\n           }\r\n         });\r\n-        this.applyFilter\r\n+        this.applyFilter();\r\n+        this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n         console.error('Erreur lors du chargement des accès:', err);\r\n         this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n@@ -108,9 +109,12 @@\n      \r\n       );\r\n     }\r\n   }\r\n-\r\n+  onAccessChange(user: UserAccess, newValue: boolean): void {\r\n+    // Ici vous pouvez implémenter une sauvegarde immédiate si nécessaire\r\n+    console.log(`Accès modifié pour ${user.username}: ${newValue}`);\r\n+  }\r\n   onSave(): void {\r\n     this.isLoading = true;\r\n     \r\n     // Filtrer uniquement les utilisateurs dont l'accès a été modifié\r\n"
                },
                {
                    "date": 1746307797093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,76 +113,10 @@\n   onAccessChange(user: UserAccess, newValue: boolean): void {\r\n     // Ici vous pouvez implémenter une sauvegarde immédiate si nécessaire\r\n     console.log(`Accès modifié pour ${user.username}: ${newValue}`);\r\n   }\r\n-  onSave(): void {\r\n-    this.isLoading = true;\r\n-    \r\n-    // Filtrer uniquement les utilisateurs dont l'accès a été modifié\r\n-    const modifiedUsers = this.allUsers.filter(user => \r\n-      user.hasOwnProperty('canView') && \r\n-      user.hasOwnProperty('originalCanView') && \r\n-      user.canView !== user.originalCanView\r\n-    );\r\n   \r\n-    if (modifiedUsers.length === 0) {\r\n-      this.isLoading = false;\r\n-      this.snackBar.open('Aucune modification à sauvegarder', 'Fermer', { \r\n-        duration: 3000,\r\n-        panelClass: ['info-snackbar']\r\n-      });\r\n-      return;\r\n-    }\r\n   \r\n-    // Créer les requêtes de mise à jour\r\n-    const updateRequests = modifiedUsers.map(user => {\r\n-      return this.projectService.updatePhaseAccess(user.id, user.canView).pipe(\r\n-        map(() => ({ success: true, userId: user.id })),\r\n-        catchError(error => {\r\n-          console.error(`Erreur mise à jour accès utilisateur ${user.id}:`, error);\r\n-          return of({ \r\n-            success: false, \r\n-            userId: user.id,\r\n-            error: error.message || 'Erreur inconnue'\r\n-          });\r\n-        })\r\n-      );\r\n-    });\r\n-  \r\n-    // Exécuter les requêtes en parallèle\r\n-    forkJoin(updateRequests).subscribe({\r\n-      next: (results) => {\r\n-        this.isLoading = false;\r\n-        const failedUpdates = results.filter(r => !r.success);\r\n-        \r\n-        if (failedUpdates.length === 0) {\r\n-          // Mettre à jour les originalCanView après succès\r\n-          modifiedUsers.forEach(user => user.originalCanView = user.canView);\r\n-          \r\n-          this.snackBar.open('Modifications sauvegardées avec succès', 'Fermer', {\r\n-            duration: 3000,\r\n-            panelClass: ['success-snackbar']\r\n-          });\r\n-          this.dialogRef.close(true);\r\n-        } else {\r\n-          console.error('Échecs partiels:', failedUpdates);\r\n-          this.snackBar.open(\r\n-            `${failedUpdates.length} erreur(s) lors de la sauvegarde`,\r\n-            'Fermer',\r\n-            { duration: 5000, panelClass: ['error-snackbar'] }\r\n-          );\r\n-        }\r\n-      },\r\n-      error: (err) => {\r\n-        this.isLoading = false;\r\n-        console.error('Erreur globale:', err);\r\n-        this.snackBar.open('Erreur lors de la sauvegarde', 'Fermer', {\r\n-          duration: 5000,\r\n-          panelClass: ['error-snackbar']\r\n-        });\r\n-      }\r\n-    });\r\n-  } \r\n \r\n   onCancel(): void {\r\n     this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n   }\r\n"
                },
                {
                    "date": 1746307806691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,64 @@\n     // Ici vous pouvez implémenter une sauvegarde immédiate si nécessaire\r\n     console.log(`Accès modifié pour ${user.username}: ${newValue}`);\r\n   }\r\n   \r\n-  \r\n+  onSave(): void {\r\n+    this.isLoading = true;\r\n+    \r\n+    const modifiedUsers = this.allUsers.filter(user => \r\n+      user.canView !== user.originalCanView\r\n+    );\r\n \r\n+    if (modifiedUsers.length === 0) {\r\n+      this.isLoading = false;\r\n+      this.snackBar.open('Aucune modification à sauvegarder', 'Fermer', { \r\n+        duration: 3000,\r\n+        panelClass: ['info-snackbar']\r\n+      });\r\n+      return;\r\n+    }\r\n+\r\n+    const updateRequests = modifiedUsers.map(user => \r\n+      this.projectService.updatePhaseAccess(user.id, user.canView).pipe(\r\n+        map(() => ({ success: true, userId: user.id })),\r\n+        catchError(error => of({ \r\n+          success: false, \r\n+          userId: user.id,\r\n+          error: error.message \r\n+        }))\r\n+      );\r\n+\r\n+    forkJoin(updateRequests).subscribe({\r\n+      next: (results) => {\r\n+        const failedUpdates = results.filter(r => !r.success);\r\n+        \r\n+        if (failedUpdates.length === 0) {\r\n+          modifiedUsers.forEach(user => user.originalCanView = user.canView);\r\n+          this.snackBar.open('Modifications sauvegardées', 'Fermer', {\r\n+            duration: 3000,\r\n+            panelClass: ['success-snackbar']\r\n+          });\r\n+          this.activeModal.dismiss();\r\n+        } else {\r\n+          this.snackBar.open(\r\n+            `${failedUpdates.length} erreur(s) lors de la sauvegarde`,\r\n+            'Fermer',\r\n+            { duration: 5000, panelClass: ['error-snackbar'] }\r\n+          );\r\n+        }\r\n+        this.isLoading = false;\r\n+      },\r\n+      error: () => {\r\n+        this.isLoading = false;\r\n+        this.snackBar.open('Erreur lors de la sauvegarde', 'Fermer', {\r\n+          duration: 5000,\r\n+          panelClass: ['error-snackbar']\r\n+        });\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n   onCancel(): void {\r\n     this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746307814318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Component, Inject, Input, OnInit } from '@angular/core';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n-import { forkJoin, map } from 'rxjs';\r\n+import { catchError, forkJoin, map, of } from 'rxjs';\r\n import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n export interface ProjectAccessData {\r\n   projectId: string;\r\n   agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n"
                },
                {
                    "date": 1746307832420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n           success: false, \r\n           userId: user.id,\r\n           error: error.message \r\n         }))\r\n-      );\r\n+      )\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n         const failedUpdates = results.filter(r => !r.success);\r\n"
                },
                {
                    "date": 1746307841167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n           success: false, \r\n           userId: user.id,\r\n           error: error.message \r\n         }))\r\n-      )\r\n+      ),);\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n         const failedUpdates = results.filter(r => !r.success);\r\n"
                },
                {
                    "date": 1746307887851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,12 +23,13 @@\n   styleUrl: './phase-access.component.scss'\r\n })\r\n export class PhaseAccessComponent {\r\n isLoading = false;\r\n-  searchQuery = '';\r\n-  allUsers: UserAccess[] = []; \r\n- \r\n-  filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n+isLoading: boolean = false; // Pour gérer l'état de chargement\r\n+allUsers: any[] = []; // Liste complète des utilisateurs avec leurs accès\r\n+initialUserStates: Map<string, boolean> = new Map(); // Pour suivre les états initiaux\r\n+searchQuery: string = ''; // Pour la recherche/filtrage\r\n+filteredUsers: any[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n     \r\n"
                },
                {
                    "date": 1746309440920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n   styleUrl: './phase-access.component.scss'\r\n })\r\n export class PhaseAccessComponent {\r\n isLoading = false;\r\n-isLoading: boolean = false; // Pour gérer l'état de chargement\r\n allUsers: any[] = []; // Liste complète des utilisateurs avec leurs accès\r\n initialUserStates: Map<string, boolean> = new Map(); // Pour suivre les états initiaux\r\n searchQuery: string = ''; // Pour la recherche/filtrage\r\n filteredUsers: any[] = []; // Utilisateurs filtrés par la recherche\r\n@@ -70,8 +69,9 @@\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n             this.allUsers = usersWithAccess.map(u => ({\r\n+              \r\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView // Get canView from the original access object\r\n"
                },
                {
                    "date": 1746309447275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,13 @@\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n             this.allUsers = usersWithAccess.map(u => ({\r\n-              \r\n+\r\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n-              canView: u.canView // Get canView from the original access object\r\n+              canView: u.canView ,\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746309458867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n+              idPhaseA\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746309464919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n-              idPhaseA\r\n+              idPhaseAccess\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746309475437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n-              idPhaseAccess\r\n+              idPhaseAccess:u.id\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746309487327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n       return;\r\n     }\r\n \r\n     const updateRequests = modifiedUsers.map(user => \r\n-      this.projectService.updatePhaseAccess(user.id, user.canView).pipe(\r\n+      this.projectService.updatePhaseAccess(user.idPhaseAccess, user.canView).pipe(\r\n         map(() => ({ success: true, userId: user.id })),\r\n         catchError(error => of({ \r\n           success: false, \r\n           userId: user.id,\r\n"
                },
                {
                    "date": 1746309503070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n     }\r\n \r\n     const updateRequests = modifiedUsers.map(user => \r\n       this.projectService.updatePhaseAccess(user.idPhaseAccess, user.canView).pipe(\r\n-        map(() => ({ success: true, userId: user.id })),\r\n+        map(() => ({ success: true, userId: user.idPhaseAccess })),\r\n         catchError(error => of({ \r\n           success: false, \r\n           userId: user.id,\r\n           error: error.message \r\n"
                },
                {
                    "date": 1746309509077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,12 +134,12 @@\n     }\r\n \r\n     const updateRequests = modifiedUsers.map(user => \r\n       this.projectService.updatePhaseAccess(user.idPhaseAccess, user.canView).pipe(\r\n-        map(() => ({ success: true, userId: user.idPhaseAccess })),\r\n+        map(() => ({ success: true, idPhaseAccess: user.idPhaseAccess })),\r\n         catchError(error => of({ \r\n           success: false, \r\n-          userId: user.id,\r\n+          idPhaseAccess: user.id,\r\n           error: error.message \r\n         }))\r\n       ),);\r\n \r\n"
                },
                {
                    "date": 1746309603644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,11 +137,11 @@\n       this.projectService.updatePhaseAccess(user.idPhaseAccess, user.canView).pipe(\r\n         map(() => ({ success: true, idPhaseAccess: user.idPhaseAccess })),\r\n         catchError(error => of({ \r\n           success: false, \r\n-          idPhaseAccess: user.id,\r\n+          idPhaseAccess: user.idPhaseAccess,\r\n           error: error.message \r\n-        }))\r\n+        }));\r\n       ),);\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n"
                },
                {
                    "date": 1746309608771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n         catchError(error => of({ \r\n           success: false, \r\n           idPhaseAccess: user.idPhaseAccess,\r\n           error: error.message \r\n-        }));\r\n+        }))\r\n       ),);\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n"
                },
                {
                    "date": 1746309622303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,9 @@\n \r\n     const updateRequests = modifiedUsers.map(user => \r\n       this.projectService.updatePhaseAccess(user.idPhaseAccess, user.canView).pipe(\r\n         map(() => ({ success: true, idPhaseAccess: user.idPhaseAccess })),\r\n+        console.log()\r\n         catchError(error => of({ \r\n           success: false, \r\n           idPhaseAccess: user.idPhaseAccess,\r\n           error: error.message \r\n"
                },
                {
                    "date": 1746309629285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n \r\n     const updateRequests = modifiedUsers.map(user => \r\n       this.projectService.updatePhaseAccess(user.idPhaseAccess, user.canView).pipe(\r\n         map(() => ({ success: true, idPhaseAccess: user.idPhaseAccess })),\r\n-        console.log()\r\n+        console.log(\"idPhaseAccess\",)\r\n         catchError(error => of({ \r\n           success: false, \r\n           idPhaseAccess: user.idPhaseAccess,\r\n           error: error.message \r\n"
                },
                {
                    "date": 1746309643574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,14 +135,14 @@\n \r\n     const updateRequests = modifiedUsers.map(user => \r\n       this.projectService.updatePhaseAccess(user.idPhaseAccess, user.canView).pipe(\r\n         map(() => ({ success: true, idPhaseAccess: user.idPhaseAccess })),\r\n-        console.log(\"idPhaseAccess\",)\r\n+        \r\n         catchError(error => of({ \r\n           success: false, \r\n           idPhaseAccess: user.idPhaseAccess,\r\n           error: error.message \r\n-        }))\r\n+        }))console.log(\"idPhaseAccess\",user.idPhaseAccess);\r\n       ),);\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n"
                },
                {
                    "date": 1746309651961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,10 +140,12 @@\n         catchError(error => of({ \r\n           success: false, \r\n           idPhaseAccess: user.idPhaseAccess,\r\n           error: error.message \r\n-        }))console.log(\"idPhaseAccess\",user.idPhaseAccess);\r\n-      ),);\r\n+        }))\r\n+      ),console.log(\"idPhaseAccess\",user.idPhaseAccess);\r\n+    \r\n+    );\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n         const failedUpdates = results.filter(r => !r.success);\r\n"
                },
                {
                    "date": 1746309659803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,10 @@\n           error: error.message \r\n         }))\r\n       ),console.log(\"idPhaseAccess\",user.idPhaseAccess);\r\n     \r\n-    );\r\n+    )\r\n+    ;\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n         const failedUpdates = results.filter(r => !r.success);\r\n"
                },
                {
                    "date": 1746309667638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,12 +141,12 @@\n           success: false, \r\n           idPhaseAccess: user.idPhaseAccess,\r\n           error: error.message \r\n         }))\r\n-      ),console.log(\"idPhaseAccess\",user.idPhaseAccess);\r\n+      ),\r\n     \r\n     )\r\n-    ;\r\n+    ;console.log(\"idPhaseAccess\",user.idPhaseAccess);\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n         const failedUpdates = results.filter(r => !r.success);\r\n"
                },
                {
                    "date": 1746309697839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         }))\r\n       ),\r\n     \r\n     )\r\n-    ;console.log(\"idPhaseAccess\",user.idPhaseAccess);\r\n+    ;\r\n \r\n     forkJoin(updateRequests).subscribe({\r\n       next: (results) => {\r\n         const failedUpdates = results.filter(r => !r.success);\r\n"
                },
                {
                    "date": 1746309907041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n               email: user.email ,\r\n               canView: access.canView,\r\n           originalCanView: access.canView\r\n             }))\r\n-          )\r\n+          ),con\r\n         );\r\n   \r\n         // Exécuter toutes les requêtes en parallèle\r\n         forkJoin(userRequests).subscribe({\r\n"
                },
                {
                    "date": 1746309915357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n               email: user.email ,\r\n               canView: access.canView,\r\n           originalCanView: access.canView\r\n             }))\r\n-          ),con\r\n+          ),console.log(\"accessessss\")\r\n         );\r\n   \r\n         // Exécuter toutes les requêtes en parallèle\r\n         forkJoin(userRequests).subscribe({\r\n"
                },
                {
                    "date": 1746309923474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n               email: user.email ,\r\n               canView: access.canView,\r\n           originalCanView: access.canView\r\n             }))\r\n-          ),console.log(\"accessessss\")\r\n+          ),console.log(\"accessessss\",ac)\r\n         );\r\n   \r\n         // Exécuter toutes les requêtes en parallèle\r\n         forkJoin(userRequests).subscribe({\r\n"
                },
                {
                    "date": 1746309930871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n               email: user.email ,\r\n               canView: access.canView,\r\n           originalCanView: access.canView\r\n             }))\r\n-          ),console.log(\"accessessss\",ac)\r\n+          ),console.log(\"accessessss\",access)\r\n         );\r\n   \r\n         // Exécuter toutes les requêtes en parallèle\r\n         forkJoin(userRequests).subscribe({\r\n"
                },
                {
                    "date": 1746309951765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n       next: (phaseAccesses) => {\r\n         console.log('Utilisateurs avec accès:', phaseAccesses);\r\n   \r\n         // Créer un tableau pour stocker toutes les requêtes\r\n-        const userRequests = phaseAccesses.map(access => \r\n+        const userRequests = phaseAccesses.map(access:any => \r\n           this.agenceService.getUserById(access.idUser).pipe(\r\n             map(user => ({\r\n               ...access, // Conserver les données d'accès originales\r\n               id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n"
                },
                {
                    "date": 1746309960663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n       next: (phaseAccesses) => {\r\n         console.log('Utilisateurs avec accès:', phaseAccesses);\r\n   \r\n         // Créer un tableau pour stocker toutes les requêtes\r\n-        const userRequests = phaseAccesses.map(access:any => \r\n+        const userRequests = phaseAccesses.map((access:any) => \r\n           this.agenceService.getUserById(access.idUser).pipe(\r\n             map(user => ({\r\n               ...access, // Conserver les données d'accès originales\r\n               id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n@@ -60,9 +60,9 @@\n               email: user.email ,\r\n               canView: access.canView,\r\n           originalCanView: access.canView\r\n             }))\r\n-          ),console.log(\"accessessss\",access)\r\n+          )\r\n         );\r\n   \r\n         // Exécuter toutes les requêtes en parallèle\r\n         forkJoin(userRequests).subscribe({\r\n"
                },
                {
                    "date": 1746309991523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n-              idPhaseAccess:u.id\r\n+              idPhaseAccess:phaseAccesses.id\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746310016912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n-              idPhaseAccess:phaseAccesses.id\r\n+              idPhaseAccess:phaseAccesses.\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746310023764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n-              idPhaseAccess:phaseAccesses.\r\n+              idPhaseAccess:phaseAccesses\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746310105561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n-              idPhaseAccess:phaseAccesses\r\n+              idPhaseAccess:phaseAccesses[]\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746310111766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n               id: u.idUser, // User ID\r\n               username: u.username || 'N/A', // Provide fallback\r\n               email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n               canView: u.canView ,\r\n-              idPhaseAccess:phaseAccesses[]\r\n+              idPhaseAccess:phaseAccesses[0].id\r\n             }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746446220236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n }\r\n @Component({\r\n   selector: 'app-phase-access',\r\n   templateUrl: './phase-access.component.html',\r\n-  styleUrl: './phase-access.component.scss'\r\n+  styleUrl: './phase-access.component.scss',\r\n+  standalone: false\r\n })\r\n export class PhaseAccessComponent {\r\n isLoading = false;\r\n allUsers: any[] = []; // Liste complète des utilisateurs avec leurs accès\r\n"
                }
            ],
            "date": 1746306825369,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-phase-access',\r\n  templateUrl: './phase-access.component.html',\r\n  styleUrl: './phase-access.component.scss'\r\n})\r\nexport class PhaseAccessComponent {\r\nisLoading = false;\r\n  searchQuery = '';\r\n  allUsers: UserAccess[] = []; \r\n \r\n  filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n  @Input() phase: any;\r\n\r\n  constructor(\r\n    \r\n    public activeModal: NgbActiveModal,\r\n\r\n    private agenceService: AgenceService,\r\n    private projectService: ProjectService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    console.log('Phase:', this.phase);\r\n    this.loadUsersAndAccess();\r\n  }\r\n\r\n  loadUsersAndAccess(): void {\r\n    this.isLoading = true;\r\n        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n      next: (phaseAccesses) => {\r\n        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n  \r\n        // Créer un tableau pour stocker toutes les requêtes\r\n        const userRequests = phaseAccesses.map(access => \r\n          this.agenceService.getUserById(access.idUser).pipe(\r\n            map(user => ({\r\n              ...access, // Conserver les données d'accès originales\r\n              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n              username: user.username, // Ajouter le username\r\n              email: user.email \r\n            }))\r\n          )\r\n        );\r\n  \r\n        // Exécuter toutes les requêtes en parallèle\r\n        forkJoin(userRequests).subscribe({\r\n          next: (usersWithAccess) => {\r\n            // Maintenant usersWithAccess contient les accès avec les usernames\r\n            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n            this.allUsers = usersWithAccess.map(u => ({\r\n              id: u.idUser, // User ID\r\n              username: u.username || 'N/A', // Provide fallback\r\n              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n              canView: u.canView // Get canView from the original access object\r\n            }));\r\n            console.log('Usernames:', this.allUsers);\r\n            \r\n            this.applyFilter();\r\n            this.isLoading = false;\r\n          },\r\n          error: (err) => {\r\n            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n            this.isLoading = false;\r\n          }\r\n        });\r\n      },\r\n      error: (err) => {\r\n        console.error('Erreur lors du chargement des accès:', err);\r\n        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n        this.isLoading = false;\r\n        this.activeModal.dismiss();\r\n      }\r\n    });\r\n  }\r\n\r\n  applyFilter(): void {\r\n    \r\n    if (!this.searchQuery) {\r\n      this.filteredUsers = [...this.allUsers];\r\n    } else {\r\n      const query = this.searchQuery.toLowerCase();\r\n      this.filteredUsers = this.allUsers.filter(user =>\r\n        (user.username && user.username.toLowerCase().includes(query)) \r\n     \r\n      );\r\n    }\r\n  }\r\n\r\n  onSave(): void {\r\n    this.isLoading = true;\r\n    // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n    const accessUpdates = this.allUsers.map(user => ({\r\n      userId: user.id,\r\n      canView: user.canView\r\n    }));\r\n    console.log(\"Updating access for phase:\", this.phase.id, \"with data:\", accessUpdates);\r\n\r\n    // Appeler le service pour mettre à jour les accès\r\n   /*  this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n      next: () => {\r\n        this.isLoading = false;\r\n        this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n        this.activeModal.close(true);// Fermer et indiquer le succès\r\n      },\r\n      error: (err:any) => {\r\n        this.isLoading = false;\r\n        console.error('Erreur lors de la mise à jour des accès:', err);\r\n        this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n        // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n      }\r\n    }); */\r\n  } \r\n\r\n  onCancel(): void {\r\n    this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n  }\r\n\r\n  // Optionnel: Pour suivre les éléments dans *ngFor pour de meilleures performances\r\n  trackByUser(index: number, item: UserAccess): string {\r\n    return item.id;\r\n  }\r\n}\r\n"
        }
    ]
}