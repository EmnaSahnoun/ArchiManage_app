{
    "sourceFile": "src/app/shared/pipes/file-size.pipe.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1749048303273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749048316405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,11 @@\n+// file-size.pipe.ts\r\n import { Pipe, PipeTransform } from '@angular/core';\r\n \r\n-@Pipe({ \r\n-  name: 'fileSize' \r\n-})\r\n+@Pipe({ name: 'fileSize' })\r\n export class FileSizePipe implements PipeTransform {\r\n   transform(bytes: number = 0): string {\r\n-    if (isNaN(bytes) return '0 Bytes';\r\n-    if (bytes === 0) return '0 Bytes';\r\n+    if (isNaN(bytes)) return '0 Bytes';\r\n     \r\n     const k = 1024;\r\n     const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n     const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n"
                },
                {
                    "date": 1749048321999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,7 @@\n     const k = 1024;\r\n     const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n     const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n     \r\n-    return parseFloat((bytes / Math.pow(k, i)).toFixed(1) + ' ' + sizes[i]));\r\n+    return parseFloat((bytes / Math.pow(k, i)).toFixed(1) + ' ' + sizes[i]);\r\n   }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1749048303273,
            "name": "Commit-0",
            "content": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ \r\n  name: 'fileSize' \r\n})\r\nexport class FileSizePipe implements PipeTransform {\r\n  transform(bytes: number = 0): string {\r\n    if (isNaN(bytes) return '0 Bytes';\r\n    if (bytes === 0) return '0 Bytes';\r\n    \r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    \r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1) + ' ' + sizes[i];\r\n  }\r\n}"
        }
    ]
}