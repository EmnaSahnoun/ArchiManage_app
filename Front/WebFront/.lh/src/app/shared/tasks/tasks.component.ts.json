{
    "sourceFile": "src/app/shared/tasks/tasks.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 136,
            "patches": [
                {
                    "date": 1744707473598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744707480107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { Component } from '@angular/core';\r\n+import { Router } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-tasks',\r\n   templateUrl: './tasks.component.html',\r\n"
                },
                {
                    "date": 1744707486505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import { Component } from '@angular/core';\r\n-import { Router } from '@angular/router';\r\n+import { Component, Input } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-tasks',\r\n   templateUrl: './tasks.component.html',\r\n"
                },
                {
                    "date": 1744708395070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\n import { Component, Input } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n \r\n @Component({\r\n"
                },
                {
                    "date": 1744708402203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\n+import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n import { Component, Input } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n \r\n @Component({\r\n"
                },
                {
                    "date": 1744708469843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n+import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n import { Component, Input } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n \r\n @Component({\r\n@@ -61,5 +61,6 @@\n         status: 'todo'\r\n       });\r\n     }\r\n   }\r\n+  dep\r\n }\r\n"
                },
                {
                    "date": 1744708506282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,6 +61,6 @@\n         status: 'todo'\r\n       });\r\n     }\r\n   }\r\n-  dep\r\n+\r\n }\r\n"
                },
                {
                    "date": 1744708555374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,6 +61,22 @@\n         status: 'todo'\r\n       });\r\n     }\r\n   }\r\n-\r\n+// Ajoutez cette méthode dans votre classe TasksComponent\r\n+deleteTask(task: any, column: string) {\r\n+  // Demander confirmation avant suppression\r\n+  if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n+    switch (column) {\r\n+      case 'todo':\r\n+        this.todo = this.todo.filter(t => t.id !== task.id);\r\n+        break;\r\n+      case 'inProgress':\r\n+        this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n+        break;\r\n+      case 'done':\r\n+        this.done = this.done.filter(t => t.id !== task.id);\r\n+        break;\r\n+    }\r\n+  }\r\n }\r\n+}\r\n"
                },
                {
                    "date": 1744709193277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   selector: 'app-tasks',\r\n   templateUrl: './tasks.component.html',\r\n   styleUrl: './tasks.component.scss'\r\n })\r\n-export class TasksComponent {\r\n+export class TasksComponent implements OnInit{\r\n   @Input() phase: any;\r\n   \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n"
                },
                {
                    "date": 1744709200172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n-import { Component, Input } from '@angular/core';\r\n+import { Component, Input, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-tasks',\r\n   templateUrl: './tasks.component.html',\r\n   styleUrl: './tasks.component.scss'\r\n })\r\n export class TasksComponent implements OnInit{\r\n-  @Input() phase: any;\r\n+  phase: any;\r\n   \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n"
                },
                {
                    "date": 1744709226256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n+    this.phase = history.state.phase;\r\n     if (this.phase) {\r\n       // Initialiser les tâches (c'est un exemple, adaptez selon votre structure)\r\n       this.todo = this.phase.tasks.map((task: string) => ({\r\n         id: Math.random().toString(36).substring(2),\r\n"
                },
                {
                    "date": 1744709255977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n \r\n   ngOnInit(): void {\r\n     this.phase = history.state.phase;\r\n     if (this.phase) {\r\n-      // Initialiser les tâches (c'est un exemple, adaptez selon votre structure)\r\n       this.todo = this.phase.tasks.map((task: string) => ({\r\n         id: Math.random().toString(36).substring(2),\r\n         name: task,\r\n         status: 'todo'\r\n"
                },
                {
                    "date": 1744709944466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,10 @@\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n     this.phase = history.state.phase;\r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      console.log('Phase ID from URL:', phaseId);\r\n     if (this.phase) {\r\n       this.todo = this.phase.tasks.map((task: string) => ({\r\n         id: Math.random().toString(36).substring(2),\r\n         name: task,\r\n"
                },
                {
                    "date": 1744709966320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,12 @@\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n-  ngOnInit(): void {\r\n+  ngOnInit(): void {const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      console.log('Phase ID from URL:', phaseId);\r\n     this.phase = history.state.phase;\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n-      console.log('Phase ID from URL:', phaseId);\r\n+    \r\n     if (this.phase) {\r\n       this.todo = this.phase.tasks.map((task: string) => ({\r\n         id: Math.random().toString(36).substring(2),\r\n         name: task,\r\n"
                },
                {
                    "date": 1744709975023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,12 @@\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n-  ngOnInit(): void {const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n-      console.log('Phase ID from URL:', phaseId);\r\n+  ngOnInit(): void {\r\n+    if (!this.phase) {\r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      console.log('Phase ID from URL:', phaseId);}\r\n     this.phase = history.state.phase;\r\n     \r\n     if (this.phase) {\r\n       this.todo = this.phase.tasks.map((task: string) => ({\r\n"
                },
                {
                    "date": 1744709981209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n-  ngOnInit(): void {\r\n+  ngOnInit(): void { this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n     const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);}\r\n-    this.phase = history.state.phase;\r\n+   \r\n     \r\n     if (this.phase) {\r\n       this.todo = this.phase.tasks.map((task: string) => ({\r\n         id: Math.random().toString(36).substring(2),\r\n"
                },
                {
                    "date": 1744710005784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,20 +15,17 @@\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n-  ngOnInit(): void { this.phase = history.state.phase;\r\n+  ngOnInit(): void {\r\n+     this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n     const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);}\r\n    \r\n     \r\n     if (this.phase) {\r\n-      this.todo = this.phase.tasks.map((task: string) => ({\r\n-        id: Math.random().toString(36).substring(2),\r\n-        name: task,\r\n-        status: 'todo'\r\n-      }));\r\n+      this.initializeTasks();\r\n     }\r\n   }\r\n \r\n   drop(event: CdkDragDrop<any[]>) {\r\n"
                },
                {
                    "date": 1744712277363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   styleUrl: './tasks.component.scss'\r\n })\r\n export class TasksComponent implements OnInit{\r\n   phase: any;\r\n-  \r\n+  phases: any[] = []; \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n@@ -26,9 +26,15 @@\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     }\r\n   }\r\n-\r\n+  private initializeTasks() {\r\n+    this.todo = this.phase.tasks.map((task: string) => ({\r\n+      id: Math.random().toString(36).substring(2),\r\n+      name: task,\r\n+      status: 'todo'\r\n+    }));\r\n+  }\r\n   drop(event: CdkDragDrop<any[]>) {\r\n     if (event.previousContainer === event.container) {\r\n       moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n     } else {\r\n"
                },
                {
                    "date": 1744712320555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n })\r\n export class TasksComponent implements OnInit{\r\n   phase: any;\r\n   phases: any[] = []; \r\n+\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n@@ -20,9 +21,9 @@\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n     const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);}\r\n-   \r\n+   this.loadPhase(phaseId);\r\n     \r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     }\r\n"
                },
                {
                    "date": 1744712329723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);}\r\n    this.loadPhase(phaseId);\r\n     \r\n-    if (this.phase) {\r\n+    else{\r\n       this.initializeTasks();\r\n     }\r\n   }\r\n   private initializeTasks() {\r\n"
                },
                {
                    "date": 1744712337730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,12 @@\n   ngOnInit(): void {\r\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n     const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n-      console.log('Phase ID from URL:', phaseId);}\r\n+      console.log('Phase ID from URL:', phaseId);\r\n    this.loadPhase(phaseId);\r\n     \r\n-    else{\r\n+ }   else{\r\n       this.initializeTasks();\r\n     }\r\n   }\r\n   private initializeTasks() {\r\n"
                },
                {
                    "date": 1744712351313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n     \r\n  }   else{\r\n       this.initializeTasks();\r\n     }\r\n+    \r\n   }\r\n   private initializeTasks() {\r\n     this.todo = this.phase.tasks.map((task: string) => ({\r\n       id: Math.random().toString(36).substring(2),\r\n"
                },
                {
                    "date": 1744712487969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,40 @@\n     \r\n  }   else{\r\n       this.initializeTasks();\r\n     }\r\n+    this.loadAllPhases();\r\n+  }\r\n+  private loadPhase(phaseId: string) {\r\n+    // Simulation - remplacez par un appel à votre service\r\n+    const mockPhases = [\r\n+      {\r\n+        id: 1,\r\n+        name: 'Phase 1',\r\n+        description: 'Description de la phase 1',\r\n+        startDate: '01/01/2025',\r\n+        endDate: '01/03/2025',\r\n+        tasks: ['Tâche 1', 'Tâche 2'],\r\n+        members: [{ id: 1, name: \"Alice\", image: \"assets/images/alice.jpg\" }]\r\n+      },\r\n+      {\r\n+        id: 2,\r\n+        name: 'Phase 2',\r\n+        description: 'Description de la phase 2',\r\n+        startDate: '02/03/2025',\r\n+        endDate: '01/06/2025',\r\n+        tasks: ['Tâche 3', 'Tâche 4'],\r\n+        members: [{ name: \"Bob\", image: \"assets/images/bob.jpg\" }]\r\n+      }\r\n+    ];\r\n     \r\n+    this.phase = mockPhases.find(p => p.id === +phaseId);\r\n+    if (this.phase) {\r\n+      this.initializeTasks();\r\n+    } else {\r\n+      console.error('Phase not found');\r\n+      this.goBack();\r\n+    }\r\n   }\r\n   private initializeTasks() {\r\n     this.todo = this.phase.tasks.map((task: string) => ({\r\n       id: Math.random().toString(36).substring(2),\r\n"
                },
                {
                    "date": 1744712495170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n+  \r\n   private loadPhase(phaseId: string) {\r\n     // Simulation - remplacez par un appel à votre service\r\n     const mockPhases = [\r\n       {\r\n"
                },
                {
                    "date": 1744712513008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n-  \r\n   private loadPhase(phaseId: string) {\r\n     // Simulation - remplacez par un appel à votre service\r\n     const mockPhases = [\r\n       {\r\n"
                },
                {
                    "date": 1744712536392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,39 +28,9 @@\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n-  private loadPhase(phaseId: string) {\r\n-    // Simulation - remplacez par un appel à votre service\r\n-    const mockPhases = [\r\n-      {\r\n-        id: 1,\r\n-        name: 'Phase 1',\r\n-        description: 'Description de la phase 1',\r\n-        startDate: '01/01/2025',\r\n-        endDate: '01/03/2025',\r\n-        tasks: ['Tâche 1', 'Tâche 2'],\r\n-        members: [{ id: 1, name: \"Alice\", image: \"assets/images/alice.jpg\" }]\r\n-      },\r\n-      {\r\n-        id: 2,\r\n-        name: 'Phase 2',\r\n-        description: 'Description de la phase 2',\r\n-        startDate: '02/03/2025',\r\n-        endDate: '01/06/2025',\r\n-        tasks: ['Tâche 3', 'Tâche 4'],\r\n-        members: [{ name: \"Bob\", image: \"assets/images/bob.jpg\" }]\r\n-      }\r\n-    ];\r\n-    \r\n-    this.phase = mockPhases.find(p => p.id === +phaseId);\r\n-    if (this.phase) {\r\n-      this.initializeTasks();\r\n-    } else {\r\n-      console.error('Phase not found');\r\n-      this.goBack();\r\n-    }\r\n-  }\r\n+  \r\n   private initializeTasks() {\r\n     this.todo = this.phase.tasks.map((task: string) => ({\r\n       id: Math.random().toString(36).substring(2),\r\n       name: task,\r\n"
                },
                {
                    "date": 1744712560199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,13 @@\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n+\r\n+\r\n+\r\n   \r\n+  \r\n   private initializeTasks() {\r\n     this.todo = this.phase.tasks.map((task: string) => ({\r\n       id: Math.random().toString(36).substring(2),\r\n       name: task,\r\n"
                },
                {
                    "date": 1744712569250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,20 +21,72 @@\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n     const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);\r\n-   this.loadPhase(phaseId);\r\n+      this.loadPhase(phaseId);\r\n     \r\n  }   else{\r\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n \r\n \r\n+  private loadPhase(phaseId: string) {\r\n+    // Simulation - remplacez par un appel à votre service\r\n+    const mockPhases = [\r\n+      {\r\n+        id: 1,\r\n+        name: 'Phase 1',\r\n+        description: 'Description de la phase 1',\r\n+        startDate: '01/01/2025',\r\n+        endDate: '01/03/2025',\r\n+        tasks: ['Tâche 1', 'Tâche 2'],\r\n+        members: [{ id: 1, name: \"Alice\", image: \"assets/images/alice.jpg\" }]\r\n+      },\r\n+      {\r\n+        id: 2,\r\n+        name: 'Phase 2',\r\n+        description: 'Description de la phase 2',\r\n+        startDate: '02/03/2025',\r\n+        endDate: '01/06/2025',\r\n+        tasks: ['Tâche 3', 'Tâche 4'],\r\n+        members: [{ name: \"Bob\", image: \"assets/images/bob.jpg\" }]\r\n+      }\r\n+    ];\r\n+    \r\n+    this.phase = mockPhases.find(p => p.id === +phaseId);\r\n+    if (this.phase) {\r\n+      this.initializeTasks();\r\n+    } else {\r\n+      console.error('Phase not found');\r\n+      this.goBack();\r\n+    }\r\n+  }\r\n \r\n+  private loadAllPhases() {\r\n+    // Simulation - remplacez par un appel à votre service\r\n+    this.phases = [\r\n+      {\r\n+        id: 1,\r\n+        name: 'Phase 1',\r\n+        description: 'Description de la phase 1',\r\n+        tasks: ['Tâche 1', 'Tâche 2'],\r\n+        startDate: '01/01/2025',\r\n+        endDate: '01/03/2025'\r\n+      },\r\n+      {\r\n+        id: 2,\r\n+        name: 'Phase 2',\r\n+        description: 'Description de la phase 2',\r\n+        tasks: ['Tâche 3', 'Tâche 4'],\r\n+        startDate: '02/03/2025',\r\n+        endDate: '01/06/2025'\r\n+      }\r\n+    ];\r\n+  }\r\n+\r\n   \r\n-  \r\n   private initializeTasks() {\r\n     this.todo = this.phase.tasks.map((task: string) => ({\r\n       id: Math.random().toString(36).substring(2),\r\n       name: task,\r\n"
                },
                {
                    "date": 1744712585599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,14 +19,14 @@\n \r\n   ngOnInit(): void {\r\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);\r\n-      this.loadPhase(phaseId);\r\n+      \r\n     \r\n  }   else{\r\n-      this.initializeTasks();\r\n+      this.initializeTasks();this.loadPhase(phaseId);\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1744712599739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,12 @@\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);\r\n-      \r\n+      this.loadPhase(phaseId);\r\n     \r\n  }   else{\r\n-      this.initializeTasks();this.loadPhase(phaseId);\r\n+      this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1744712693996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \r\n   ngOnInit(): void {\r\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n-      const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+       phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       console.log('Phase ID from URL:', phaseId);\r\n       this.loadPhase(phaseId);\r\n     \r\n  }   else{\r\n"
                },
                {
                    "date": 1744712704703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,11 @@\n \r\n   ngOnInit(): void {\r\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n-       phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      const phaseId = this.route.snapshot.paramMap.get('phaseId');this.loadPhase(phaseId);\r\n       console.log('Phase ID from URL:', phaseId);\r\n-      this.loadPhase(phaseId);\r\n+      \r\n     \r\n  }   else{\r\n       this.initializeTasks();\r\n     }\r\n"
                },
                {
                    "date": 1744712715318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n \r\n   ngOnInit(): void {\r\n      this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n-      const phaseId = this.route.snapshot.paramMap.get('phaseId');this.loadPhase(phaseId);\r\n+      String phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      this.loadPhase(phaseId);\r\n       console.log('Phase ID from URL:', phaseId);\r\n       \r\n     \r\n  }   else{\r\n"
                },
                {
                    "date": 1744713105225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,16 +17,19 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-     this.phase = history.state.phase;\r\n+    this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n-      String phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n-      this.loadPhase(phaseId);\r\n-      console.log('Phase ID from URL:', phaseId);\r\n-      \r\n-    \r\n- }   else{\r\n+      const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      if (phaseId) {\r\n+        console.log('Phase ID from URL:', phaseId);\r\n+        this.loadPhase(phaseId);\r\n+      } else {\r\n+        console.error('No phase ID provided');\r\n+        this.goBack();\r\n+      }\r\n+    } else {\r\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n"
                },
                {
                    "date": 1744713131702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,16 @@\n     this.loadAllPhases();\r\n   }\r\n \r\n \r\n-  private loadPhase(phaseId: string) {\r\n-    // Simulation - remplacez par un appel à votre service\r\n+  private loadPhase(phaseId: string | null) {\r\n+    if (!phaseId) {\r\n+      console.error('No phase ID provided');\r\n+      this.goBack();\r\n+      return;\r\n+    }\r\n+  \r\n+    // Rest of your existing loadPhase code\r\n     const mockPhases = [\r\n       {\r\n         id: 1,\r\n         name: 'Phase 1',\r\n"
                },
                {
                    "date": 1744713165406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,15 +20,9 @@\n   ngOnInit(): void {\r\n     this.phase = history.state.phase;\r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n-      if (phaseId) {\r\n-        console.log('Phase ID from URL:', phaseId);\r\n-        this.loadPhase(phaseId);\r\n-      } else {\r\n-        console.error('No phase ID provided');\r\n-        this.goBack();\r\n-      }\r\n+      this.loadPhase(phaseId);\r\n     } else {\r\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n"
                },
                {
                    "date": 1744713433093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n       this.goBack();\r\n       return;\r\n     }\r\n   \r\n-    // Rest of your existing loadPhase code\r\n     const mockPhases = [\r\n       {\r\n         id: 1,\r\n         name: 'Phase 1',\r\n"
                },
                {
                    "date": 1744715025541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    this.phase = history.state.phase;\r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       this.loadPhase(phaseId);\r\n     } else {\r\n"
                },
                {
                    "date": 1744715070847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId');                                                                                                                                                                                                                                                                                                                                                          \r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       this.loadPhase(phaseId);\r\n     } else {\r\n"
                },
                {
                    "date": 1744715114236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId');                                                                                                                                                                                                                                                                                                                                                          \r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId');                                                                                                                                                                                                                                                                                                                    \r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       this.loadPhase(phaseId);\r\n     } else {\r\n"
                },
                {
                    "date": 1744715147456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,12 +17,16 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId');                                                                                                                                                                                                                                                                                                                    \r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId'); \r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n-      this.loadPhase(phaseId);\r\n+      if (phaseId) {\r\n+        this.loadPhase(phaseId);\r\n+      } else {\r\n+        this.goBack();\r\n+      }\r\n     } else {\r\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n"
                },
                {
                    "date": 1744715158191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         this.loadPhase(phaseId);\r\n       } else {\r\n         this.goBack();\r\n       }\r\n-    } else {\r\n+    } \r\n       this.initializeTasks();\r\n     }\r\n     this.loadAllPhases();\r\n   }\r\n"
                },
                {
                    "date": 1744715164249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n+import { Component, Input, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n+\r\n+@Component({\r\n+  selector: 'app-tasks',\r\n+  templateUrl: './tasks.component.html',\r\n+  styleUrl: './tasks.component.scss'\r\n+})\r\n+export class TasksComponent implements OnInit{\r\n+  phase: any;\r\n+  phases: any[] = []; \r\n+\r\n+  todo: any[] = [];\r\n+  inProgress: any[] = [];\r\n+  done: any[] = [];\r\n+\r\n+  constructor(private router: Router, private route: ActivatedRoute) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId'); \r\n+    if (!this.phase) {\r\n+      const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+      if (phaseId) {\r\n+        this.loadPhase(phaseId);\r\n+      } else {\r\n+        this.goBack();\r\n+      }\r\n+    } \r\n+      this.initializeTasks();\r\n+    this.loadAllPhases();\r\n+  }\r\n+\r\n+\r\n+  private loadPhase(phaseId: string | null) {\r\n+    if (!phaseId) {\r\n+      console.error('No phase ID provided');\r\n+      this.goBack();\r\n+      return;\r\n+    }\r\n+  \r\n+    const mockPhases = [\r\n+      {\r\n+        id: 1,\r\n+        name: 'Phase 1',\r\n+        description: 'Description de la phase 1',\r\n+        startDate: '01/01/2025',\r\n+        endDate: '01/03/2025',\r\n+        tasks: ['Tâche 1', 'Tâche 2'],\r\n+        members: [{ id: 1, name: \"Alice\", image: \"assets/images/alice.jpg\" }]\r\n+      },\r\n+      {\r\n+        id: 2,\r\n+        name: 'Phase 2',\r\n+        description: 'Description de la phase 2',\r\n+        startDate: '02/03/2025',\r\n+        endDate: '01/06/2025',\r\n+        tasks: ['Tâche 3', 'Tâche 4'],\r\n+        members: [{ name: \"Bob\", image: \"assets/images/bob.jpg\" }]\r\n+      }\r\n+    ];\r\n+    \r\n+    this.phase = mockPhases.find(p => p.id === +phaseId);\r\n+    if (this.phase) {\r\n+      this.initializeTasks();\r\n+    } else {\r\n+      console.error('Phase not found');\r\n+      this.goBack();\r\n+    }\r\n+  }\r\n+\r\n+  private loadAllPhases() {\r\n+    // Simulation - remplacez par un appel à votre service\r\n+    this.phases = [\r\n+      {\r\n+        id: 1,\r\n+        name: 'Phase 1',\r\n+        description: 'Description de la phase 1',\r\n+        tasks: ['Tâche 1', 'Tâche 2'],\r\n+        startDate: '01/01/2025',\r\n+        endDate: '01/03/2025'\r\n+      },\r\n+      {\r\n+        id: 2,\r\n+        name: 'Phase 2',\r\n+        description: 'Description de la phase 2',\r\n+        tasks: ['Tâche 3', 'Tâche 4'],\r\n+        startDate: '02/03/2025',\r\n+        endDate: '01/06/2025'\r\n+      }\r\n+    ];\r\n+  }\r\n+\r\n+  \r\n+  private initializeTasks() {\r\n+    this.todo = this.phase.tasks.map((task: string) => ({\r\n+      id: Math.random().toString(36).substring(2),\r\n+      name: task,\r\n+      status: 'todo'\r\n+    }));\r\n+  }\r\n+  drop(event: CdkDragDrop<any[]>) {\r\n+    if (event.previousContainer === event.container) {\r\n+      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n+    } else {\r\n+      transferArrayItem(\r\n+        event.previousContainer.data,\r\n+        event.container.data,\r\n+        event.previousIndex,\r\n+        event.currentIndex\r\n+      );\r\n+      // Mettre à jour le statut des tâches\r\n+      this.updateTaskStatus();\r\n+    }\r\n+  }\r\n+\r\n+  updateTaskStatus() {\r\n+    this.todo.forEach(task => task.status = 'todo');\r\n+    this.inProgress.forEach(task => task.status = 'inProgress');\r\n+    this.done.forEach(task => task.status = 'done');\r\n+  }\r\n+\r\n+  goBack() {\r\n+    this.router.navigate(['../'], { relativeTo: this.route });\r\n+  }\r\n+\r\n+  addTask() {\r\n+    const taskName = prompt('Entrez le nom de la nouvelle tâche:');\r\n+    if (taskName) {\r\n+      this.todo.push({\r\n+        id: Math.random().toString(36).substring(2),\r\n+        name: taskName,\r\n+        status: 'todo'\r\n+      });\r\n+    }\r\n+  }\r\n+// Ajoutez cette méthode dans votre classe TasksComponent\r\n+deleteTask(task: any, column: string) {\r\n+  // Demander confirmation avant suppression\r\n+  if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n+    switch (column) {\r\n+      case 'todo':\r\n+        this.todo = this.todo.filter(t => t.id !== task.id);\r\n+        break;\r\n+      case 'inProgress':\r\n+        this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n+        break;\r\n+      case 'done':\r\n+        this.done = this.done.filter(t => t.id !== task.id);\r\n+        break;\r\n+    }\r\n+  }\r\n+}\r\n+}\r\n"
                },
                {
                    "date": 1744715175917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,14 +26,14 @@\n       } else {\r\n         this.goBack();\r\n       }\r\n     } \r\n-      this.initializeTasks();\r\n+    this.initializeTasks();\r\n     this.loadAllPhases();\r\n   }\r\n \r\n \r\n-  private loadPhase(phaseId: string | null) {\r\n+  private loadPhase(phaseId: string ) {\r\n     if (!phaseId) {\r\n       console.error('No phase ID provided');\r\n       this.goBack();\r\n       return;\r\n@@ -151,159 +151,4 @@\n     }\r\n   }\r\n }\r\n }\r\n-import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n-import { Component, Input, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router } from '@angular/router';\r\n-\r\n-@Component({\r\n-  selector: 'app-tasks',\r\n-  templateUrl: './tasks.component.html',\r\n-  styleUrl: './tasks.component.scss'\r\n-})\r\n-export class TasksComponent implements OnInit{\r\n-  phase: any;\r\n-  phases: any[] = []; \r\n-\r\n-  todo: any[] = [];\r\n-  inProgress: any[] = [];\r\n-  done: any[] = [];\r\n-\r\n-  constructor(private router: Router, private route: ActivatedRoute) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId'); \r\n-    if (!this.phase) {\r\n-      const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n-      if (phaseId) {\r\n-        this.loadPhase(phaseId);\r\n-      } else {\r\n-        this.goBack();\r\n-      }\r\n-    } \r\n-      this.initializeTasks();\r\n-    }\r\n-    this.loadAllPhases();\r\n-  }\r\n-\r\n-\r\n-  private loadPhase(phaseId: string | null) {\r\n-    if (!phaseId) {\r\n-      console.error('No phase ID provided');\r\n-      this.goBack();\r\n-      return;\r\n-    }\r\n-  \r\n-    const mockPhases = [\r\n-      {\r\n-        id: 1,\r\n-        name: 'Phase 1',\r\n-        description: 'Description de la phase 1',\r\n-        startDate: '01/01/2025',\r\n-        endDate: '01/03/2025',\r\n-        tasks: ['Tâche 1', 'Tâche 2'],\r\n-        members: [{ id: 1, name: \"Alice\", image: \"assets/images/alice.jpg\" }]\r\n-      },\r\n-      {\r\n-        id: 2,\r\n-        name: 'Phase 2',\r\n-        description: 'Description de la phase 2',\r\n-        startDate: '02/03/2025',\r\n-        endDate: '01/06/2025',\r\n-        tasks: ['Tâche 3', 'Tâche 4'],\r\n-        members: [{ name: \"Bob\", image: \"assets/images/bob.jpg\" }]\r\n-      }\r\n-    ];\r\n-    \r\n-    this.phase = mockPhases.find(p => p.id === +phaseId);\r\n-    if (this.phase) {\r\n-      this.initializeTasks();\r\n-    } else {\r\n-      console.error('Phase not found');\r\n-      this.goBack();\r\n-    }\r\n-  }\r\n-\r\n-  private loadAllPhases() {\r\n-    // Simulation - remplacez par un appel à votre service\r\n-    this.phases = [\r\n-      {\r\n-        id: 1,\r\n-        name: 'Phase 1',\r\n-        description: 'Description de la phase 1',\r\n-        tasks: ['Tâche 1', 'Tâche 2'],\r\n-        startDate: '01/01/2025',\r\n-        endDate: '01/03/2025'\r\n-      },\r\n-      {\r\n-        id: 2,\r\n-        name: 'Phase 2',\r\n-        description: 'Description de la phase 2',\r\n-        tasks: ['Tâche 3', 'Tâche 4'],\r\n-        startDate: '02/03/2025',\r\n-        endDate: '01/06/2025'\r\n-      }\r\n-    ];\r\n-  }\r\n-\r\n-  \r\n-  private initializeTasks() {\r\n-    this.todo = this.phase.tasks.map((task: string) => ({\r\n-      id: Math.random().toString(36).substring(2),\r\n-      name: task,\r\n-      status: 'todo'\r\n-    }));\r\n-  }\r\n-  drop(event: CdkDragDrop<any[]>) {\r\n-    if (event.previousContainer === event.container) {\r\n-      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n-    } else {\r\n-      transferArrayItem(\r\n-        event.previousContainer.data,\r\n-        event.container.data,\r\n-        event.previousIndex,\r\n-        event.currentIndex\r\n-      );\r\n-      // Mettre à jour le statut des tâches\r\n-      this.updateTaskStatus();\r\n-    }\r\n-  }\r\n-\r\n-  updateTaskStatus() {\r\n-    this.todo.forEach(task => task.status = 'todo');\r\n-    this.inProgress.forEach(task => task.status = 'inProgress');\r\n-    this.done.forEach(task => task.status = 'done');\r\n-  }\r\n-\r\n-  goBack() {\r\n-    this.router.navigate(['../'], { relativeTo: this.route });\r\n-  }\r\n-\r\n-  addTask() {\r\n-    const taskName = prompt('Entrez le nom de la nouvelle tâche:');\r\n-    if (taskName) {\r\n-      this.todo.push({\r\n-        id: Math.random().toString(36).substring(2),\r\n-        name: taskName,\r\n-        status: 'todo'\r\n-      });\r\n-    }\r\n-  }\r\n-// Ajoutez cette méthode dans votre classe TasksComponent\r\n-deleteTask(task: any, column: string) {\r\n-  // Demander confirmation avant suppression\r\n-  if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n-    switch (column) {\r\n-      case 'todo':\r\n-        this.todo = this.todo.filter(t => t.id !== task.id);\r\n-        break;\r\n-      case 'inProgress':\r\n-        this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n-        break;\r\n-      case 'done':\r\n-        this.done = this.done.filter(t => t.id !== task.id);\r\n-        break;\r\n-    }\r\n-  }\r\n-}\r\n-}\r\n"
                },
                {
                    "date": 1744715213213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,27 +40,23 @@\n     }\r\n   \r\n     const mockPhases = [\r\n       {\r\n-        id: 1,\r\n-        name: 'Phase 1',\r\n-        description: 'Description de la phase 1',\r\n-        startDate: '01/01/2025',\r\n-        endDate: '01/03/2025',\r\n-        tasks: ['Tâche 1', 'Tâche 2'],\r\n-        members: [{ id: 1, name: \"Alice\", image: \"assets/images/alice.jpg\" }]\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        tasks: [\r\n+          { _id: \"1\", name: \"Analyse technique\", status: \"PENDING\" },\r\n+          { _id: \"2\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n+        ]\r\n       },\r\n       {\r\n-        id: 2,\r\n-        name: 'Phase 2',\r\n-        description: 'Description de la phase 2',\r\n-        startDate: '02/03/2025',\r\n-        endDate: '01/06/2025',\r\n-        tasks: ['Tâche 3', 'Tâche 4'],\r\n-        members: [{ name: \"Bob\", image: \"assets/images/bob.jpg\" }]\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        tasks: []\r\n       }\r\n     ];\r\n     \r\n+    \r\n     this.phase = mockPhases.find(p => p.id === +phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n"
                },
                {
                    "date": 1744715221871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       }\r\n     ];\r\n     \r\n     \r\n-    this.phase = mockPhases.find(p => p.id === +phaseId);\r\n+    this.phase = mockPhases.find(p => p._id === +phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n       console.error('Phase not found');\r\n"
                },
                {
                    "date": 1744715232467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       }\r\n     ];\r\n     \r\n     \r\n-    this.phase = mockPhases.find(p => p._id === +phaseId);\r\n+    this.phase = mockPhases.find(p:any => p._id === +phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n       console.error('Phase not found');\r\n"
                },
                {
                    "date": 1744715237885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       }\r\n     ];\r\n     \r\n     \r\n-    this.phase = mockPhases.find(p:any => p._id === +phaseId);\r\n+    this.phase = mockPhases.find((p:any) => p._id === +phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n       console.error('Phase not found');\r\n"
                },
                {
                    "date": 1744715256111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,22 +68,16 @@\n   private loadAllPhases() {\r\n     // Simulation - remplacez par un appel à votre service\r\n     this.phases = [\r\n       {\r\n-        id: 1,\r\n-        name: 'Phase 1',\r\n-        description: 'Description de la phase 1',\r\n-        tasks: ['Tâche 1', 'Tâche 2'],\r\n-        startDate: '01/01/2025',\r\n-        endDate: '01/03/2025'\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        taskCount: 2\r\n       },\r\n       {\r\n-        id: 2,\r\n-        name: 'Phase 2',\r\n-        description: 'Description de la phase 2',\r\n-        tasks: ['Tâche 3', 'Tâche 4'],\r\n-        startDate: '02/03/2025',\r\n-        endDate: '01/06/2025'\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        taskCount: 0\r\n       }\r\n     ];\r\n   }\r\n \r\n"
                },
                {
                    "date": 1744715272617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,13 +82,33 @@\n   }\r\n \r\n   \r\n   private initializeTasks() {\r\n-    this.todo = this.phase.tasks.map((task: string) => ({\r\n-      id: Math.random().toString(36).substring(2),\r\n-      name: task,\r\n-      status: 'todo'\r\n-    }));\r\n+    if (!this.phase?.tasks) return;\r\n+\r\n+    this.todo = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'PENDING')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'todo'\r\n+      }));\r\n+\r\n+    this.inProgress = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'IN_PROGRESS')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'inProgress'\r\n+      }));\r\n+\r\n+    this.done = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'COMPLETED')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'done'\r\n+      }));\r\n   }\r\n   drop(event: CdkDragDrop<any[]>) {\r\n     if (event.previousContainer === event.container) {\r\n       moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n"
                },
                {
                    "date": 1744715320064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,11 +124,11 @@\n     }\r\n   }\r\n \r\n   updateTaskStatus() {\r\n-    this.todo.forEach(task => task.status = 'todo');\r\n-    this.inProgress.forEach(task => task.status = 'inProgress');\r\n-    this.done.forEach(task => task.status = 'done');\r\n+    this.todo.forEach(task => task.status = 'PENDING');\r\n+    this.inProgress.forEach(task => task.status = 'IN_PROGRESS');\r\n+    this.done.forEach(task => task.status = 'COMPLETED');\r\n   }\r\n \r\n   goBack() {\r\n     this.router.navigate(['../'], { relativeTo: this.route });\r\n"
                },
                {
                    "date": 1744715342214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,15 +134,25 @@\n     this.router.navigate(['../'], { relativeTo: this.route });\r\n   }\r\n \r\n   addTask() {\r\n-    const taskName = prompt('Entrez le nom de la nouvelle tâche:');\r\n+    const taskName = prompt('Nom de la nouvelle tâche:');\r\n     if (taskName) {\r\n+      const newTask = {\r\n+        _id: Math.random().toString(36).substring(2),\r\n+        name: taskName,\r\n+        status: 'PENDING'\r\n+      };\r\n+      \r\n       this.todo.push({\r\n-        id: Math.random().toString(36).substring(2),\r\n-        name: taskName,\r\n+        id: newTask._id,\r\n+        name: newTask.name,\r\n         status: 'todo'\r\n       });\r\n+      \r\n+      // En production, ajouter la tâche via API\r\n+      if (!this.phase.tasks) this.phase.tasks = [];\r\n+      this.phase.tasks.push(newTask);\r\n     }\r\n   }\r\n // Ajoutez cette méthode dans votre classe TasksComponent\r\n deleteTask(task: any, column: string) {\r\n"
                },
                {
                    "date": 1744715421014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,20 @@\n         name: task.name,\r\n         status: 'done'\r\n       }));\r\n   }\r\n+  switchPhase(newPhase: any) {\r\n+    if (newPhase.id !== this.phase?.id) {\r\n+      // Naviguer vers la nouvelle phase\r\n+      this.router.navigate(['phase', newPhase.id], { \r\n+        relativeTo: this.route,\r\n+        state: { phase: newPhase }\r\n+      }).then(() => {\r\n+        this.phase = newPhase;\r\n+        this.initializeTasks();\r\n+      });\r\n+    }\r\n+  }\r\n   drop(event: CdkDragDrop<any[]>) {\r\n     if (event.previousContainer === event.container) {\r\n       moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n     } else {\r\n"
                },
                {
                    "date": 1744715488984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,8 +165,15 @@\n       if (!this.phase.tasks) this.phase.tasks = [];\r\n       this.phase.tasks.push(newTask);\r\n     }\r\n   }\r\n+  editTask(task: any) {\r\n+    const newName = prompt('Modifier le nom de la tâche:', task.name);\r\n+    if (newName && newName !== task.name) {\r\n+      task.name = newName;\r\n+      this.updatePhaseTasks();\r\n+    }\r\n+  }\r\n // Ajoutez cette méthode dans votre classe TasksComponent\r\n deleteTask(task: any, column: string) {\r\n   // Demander confirmation avant suppression\r\n   if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n"
                },
                {
                    "date": 1744715523251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,8 +172,21 @@\n       task.name = newName;\r\n       this.updatePhaseTasks();\r\n     }\r\n   }\r\n+  private updatePhaseTasks() {\r\n+    // Mettre à jour les tâches dans la phase actuelle\r\n+    if (this.phase) {\r\n+      this.phase.tasks = [\r\n+        ...this.todo.map(t => t.name),\r\n+        ...this.inProgress.map(t => t.name),\r\n+        ...this.done.map(t => t.name)\r\n+      ];\r\n+      \r\n+      // Ici, vous devriez normalement faire un appel API pour sauvegarder les modifications\r\n+      console.log('Phase updated:', this.phase);\r\n+    }\r\n+  }\r\n // Ajoutez cette méthode dans votre classe TasksComponent\r\n deleteTask(task: any, column: string) {\r\n   // Demander confirmation avant suppression\r\n   if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n"
                },
                {
                    "date": 1744716011268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n })\r\n export class TasksComponent implements OnInit{\r\n   phase: any;\r\n   phases: any[] = []; \r\n-\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n"
                },
                {
                    "date": 1744716140206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   templateUrl: './tasks.component.html',\r\n   styleUrl: './tasks.component.scss'\r\n })\r\n export class TasksComponent implements OnInit{\r\n-  phase: any;\r\n+  phaseId: any;\r\n   phases: any[] = []; \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n"
                },
                {
                    "date": 1744716149552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   templateUrl: './tasks.component.html',\r\n   styleUrl: './tasks.component.scss'\r\n })\r\n export class TasksComponent implements OnInit{\r\n-  phaseId: any;\r\n+  phaseId: string | null = null;\r\n   phases: any[] = []; \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n"
                },
                {
                    "date": 1744716181231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId'); \r\n+    const phaseId = this.route.snapshot.paramMap.get('_id'); \r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       if (phaseId) {\r\n         this.loadPhase(phaseId);\r\n"
                },
                {
                    "date": 1744716188076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('_id'); \r\n+    const phaseId = this.route.snapshot.paramMap.get('phaseId'); \r\n     if (!this.phase) {\r\n       const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n       if (phaseId) {\r\n         this.loadPhase(phaseId);\r\n"
                },
                {
                    "date": 1744716285637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,17 +16,16 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('phaseId'); \r\n-    if (!this.phase) {\r\n-      const phaseId = this.route.snapshot.paramMap.get('phaseId');\r\n+    const phaseId = this.route.snapshot.paramMap.get('_id'); \r\n+ \r\n       if (phaseId) {\r\n         this.loadPhase(phaseId);\r\n       } else {\r\n         this.goBack();\r\n       }\r\n-    } \r\n+    \r\n     this.initializeTasks();\r\n     this.loadAllPhases();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1744716379457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n+import { Component, Input, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n+\r\n+@Component({\r\n+  selector: 'app-tasks',\r\n+  templateUrl: './tasks.component.html',\r\n+  styleUrl: './tasks.component.scss'\r\n+})\r\n+export class TasksComponent implements OnInit{\r\n+  phaseId: string | null = null;\r\n+  phases: any[] = []; \r\n+  todo: any[] = [];\r\n+  inProgress: any[] = [];\r\n+  done: any[] = [];\r\n+\r\n+  constructor(private router: Router, private route: ActivatedRoute) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    const phaseId = this.route.snapshot.paramMap.get('_id'); \r\n+\r\n+      if (phaseId) {\r\n+        this.loadPhase(phaseId);\r\n+      } else {\r\n+        this.goBack();\r\n+      }\r\n+    \r\n+    this.initializeTasks();\r\n+    this.loadAllPhases();\r\n+  }\r\n+\r\n+\r\n+  private loadPhase(phaseId: string ) {\r\n+    if (!phaseId) {\r\n+      console.error('No phase ID provided');\r\n+      this.goBack();\r\n+      return;\r\n+    }\r\n+  \r\n+    const mockPhases = [\r\n+      {\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        tasks: [\r\n+          { _id: \"1\", name: \"Analyse technique\", status: \"PENDING\" },\r\n+          { _id: \"2\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n+        ]\r\n+      },\r\n+      {\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        tasks: []\r\n+      }\r\n+    ];\r\n+    \r\n+    \r\n+    this.phase = mockPhases.find((p:any) => p._id === +phaseId);\r\n+    if (this.phase) {\r\n+      this.initializeTasks();\r\n+    } else {\r\n+      console.error('Phase not found');\r\n+      this.goBack();\r\n+    }\r\n+  }\r\n+\r\n+  private loadAllPhases() {\r\n+    // Simulation - remplacez par un appel à votre service\r\n+    this.phases = [\r\n+      {\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        taskCount: 2\r\n+      },\r\n+      {\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        taskCount: 0\r\n+      }\r\n+    ];\r\n+  }\r\n+\r\n+  \r\n+  private initializeTasks() {\r\n+    if (!this.phase?.tasks) return;\r\n+\r\n+    this.todo = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'PENDING')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'todo'\r\n+      }));\r\n+\r\n+    this.inProgress = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'IN_PROGRESS')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'inProgress'\r\n+      }));\r\n+\r\n+    this.done = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'COMPLETED')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'done'\r\n+      }));\r\n+  }\r\n+  switchPhase(newPhase: any) {\r\n+    if (newPhase.id !== this.phase?.id) {\r\n+      // Naviguer vers la nouvelle phase\r\n+      this.router.navigate(['phase', newPhase.id], { \r\n+        relativeTo: this.route,\r\n+        state: { phase: newPhase }\r\n+      }).then(() => {\r\n+        this.phase = newPhase;\r\n+        this.initializeTasks();\r\n+      });\r\n+    }\r\n+  }\r\n+  drop(event: CdkDragDrop<any[]>) {\r\n+    if (event.previousContainer === event.container) {\r\n+      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n+    } else {\r\n+      transferArrayItem(\r\n+        event.previousContainer.data,\r\n+        event.container.data,\r\n+        event.previousIndex,\r\n+        event.currentIndex\r\n+      );\r\n+      // Mettre à jour le statut des tâches\r\n+      this.updateTaskStatus();\r\n+    }\r\n+  }\r\n+\r\n+  updateTaskStatus() {\r\n+    this.todo.forEach(task => task.status = 'PENDING');\r\n+    this.inProgress.forEach(task => task.status = 'IN_PROGRESS');\r\n+    this.done.forEach(task => task.status = 'COMPLETED');\r\n+  }\r\n+\r\n+  goBack() {\r\n+    this.router.navigate(['../'], { relativeTo: this.route });\r\n+  }\r\n+\r\n+  addTask() {\r\n+    const taskName = prompt('Nom de la nouvelle tâche:');\r\n+    if (taskName) {\r\n+      const newTask = {\r\n+        _id: Math.random().toString(36).substring(2),\r\n+        name: taskName,\r\n+        status: 'PENDING'\r\n+      };\r\n+      \r\n+      this.todo.push({\r\n+        id: newTask._id,\r\n+        name: newTask.name,\r\n+        status: 'todo'\r\n+      });\r\n+      \r\n+      // En production, ajouter la tâche via API\r\n+      if (!this.phase.tasks) this.phase.tasks = [];\r\n+      this.phase.tasks.push(newTask);\r\n+    }\r\n+  }\r\n+  editTask(task: any) {\r\n+    const newName = prompt('Modifier le nom de la tâche:', task.name);\r\n+    if (newName && newName !== task.name) {\r\n+      task.name = newName;\r\n+      this.updatePhaseTasks();\r\n+    }\r\n+  }\r\n+  private updatePhaseTasks() {\r\n+    // Mettre à jour les tâches dans la phase actuelle\r\n+    if (this.phase) {\r\n+      this.phase.tasks = [\r\n+        ...this.todo.map(t => t.name),\r\n+        ...this.inProgress.map(t => t.name),\r\n+        ...this.done.map(t => t.name)\r\n+      ];\r\n+      \r\n+      // Ici, vous devriez normalement faire un appel API pour sauvegarder les modifications\r\n+      console.log('Phase updated:', this.phase);\r\n+    }\r\n+  }\r\n+// Ajoutez cette méthode dans votre classe TasksComponent\r\n+deleteTask(task: any, column: string) {\r\n+  // Demander confirmation avant suppression\r\n+  if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n+    switch (column) {\r\n+      case 'todo':\r\n+        this.todo = this.todo.filter(t => t.id !== task.id);\r\n+        break;\r\n+      case 'inProgress':\r\n+        this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n+        break;\r\n+      case 'done':\r\n+        this.done = this.done.filter(t => t.id !== task.id);\r\n+        break;\r\n+    }\r\n+  }\r\n+}\r\n+}\r\n"
                },
                {
                    "date": 1744716384800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,212 +17,8 @@\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n     const phaseId = this.route.snapshot.paramMap.get('_id'); \r\n-\r\n-      if (phaseId) {\r\n-        this.loadPhase(phaseId);\r\n-      } else {\r\n-        this.goBack();\r\n-      }\r\n-    \r\n-    this.initializeTasks();\r\n-    this.loadAllPhases();\r\n-  }\r\n-\r\n-\r\n-  private loadPhase(phaseId: string ) {\r\n-    if (!phaseId) {\r\n-      console.error('No phase ID provided');\r\n-      this.goBack();\r\n-      return;\r\n-    }\r\n-  \r\n-    const mockPhases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        tasks: [\r\n-          { _id: \"1\", name: \"Analyse technique\", status: \"PENDING\" },\r\n-          { _id: \"2\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n-        ]\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        tasks: []\r\n-      }\r\n-    ];\r\n-    \r\n-    \r\n-    this.phase = mockPhases.find((p:any) => p._id === +phaseId);\r\n-    if (this.phase) {\r\n-      this.initializeTasks();\r\n-    } else {\r\n-      console.error('Phase not found');\r\n-      this.goBack();\r\n-    }\r\n-  }\r\n-\r\n-  private loadAllPhases() {\r\n-    // Simulation - remplacez par un appel à votre service\r\n-    this.phases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        taskCount: 2\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        taskCount: 0\r\n-      }\r\n-    ];\r\n-  }\r\n-\r\n-  \r\n-  private initializeTasks() {\r\n-    if (!this.phase?.tasks) return;\r\n-\r\n-    this.todo = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'PENDING')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'todo'\r\n-      }));\r\n-\r\n-    this.inProgress = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'IN_PROGRESS')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'inProgress'\r\n-      }));\r\n-\r\n-    this.done = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'COMPLETED')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'done'\r\n-      }));\r\n-  }\r\n-  switchPhase(newPhase: any) {\r\n-    if (newPhase.id !== this.phase?.id) {\r\n-      // Naviguer vers la nouvelle phase\r\n-      this.router.navigate(['phase', newPhase.id], { \r\n-        relativeTo: this.route,\r\n-        state: { phase: newPhase }\r\n-      }).then(() => {\r\n-        this.phase = newPhase;\r\n-        this.initializeTasks();\r\n-      });\r\n-    }\r\n-  }\r\n-  drop(event: CdkDragDrop<any[]>) {\r\n-    if (event.previousContainer === event.container) {\r\n-      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n-    } else {\r\n-      transferArrayItem(\r\n-        event.previousContainer.data,\r\n-        event.container.data,\r\n-        event.previousIndex,\r\n-        event.currentIndex\r\n-      );\r\n-      // Mettre à jour le statut des tâches\r\n-      this.updateTaskStatus();\r\n-    }\r\n-  }\r\n-\r\n-  updateTaskStatus() {\r\n-    this.todo.forEach(task => task.status = 'PENDING');\r\n-    this.inProgress.forEach(task => task.status = 'IN_PROGRESS');\r\n-    this.done.forEach(task => task.status = 'COMPLETED');\r\n-  }\r\n-\r\n-  goBack() {\r\n-    this.router.navigate(['../'], { relativeTo: this.route });\r\n-  }\r\n-\r\n-  addTask() {\r\n-    const taskName = prompt('Nom de la nouvelle tâche:');\r\n-    if (taskName) {\r\n-      const newTask = {\r\n-        _id: Math.random().toString(36).substring(2),\r\n-        name: taskName,\r\n-        status: 'PENDING'\r\n-      };\r\n-      \r\n-      this.todo.push({\r\n-        id: newTask._id,\r\n-        name: newTask.name,\r\n-        status: 'todo'\r\n-      });\r\n-      \r\n-      // En production, ajouter la tâche via API\r\n-      if (!this.phase.tasks) this.phase.tasks = [];\r\n-      this.phase.tasks.push(newTask);\r\n-    }\r\n-  }\r\n-  editTask(task: any) {\r\n-    const newName = prompt('Modifier le nom de la tâche:', task.name);\r\n-    if (newName && newName !== task.name) {\r\n-      task.name = newName;\r\n-      this.updatePhaseTasks();\r\n-    }\r\n-  }\r\n-  private updatePhaseTasks() {\r\n-    // Mettre à jour les tâches dans la phase actuelle\r\n-    if (this.phase) {\r\n-      this.phase.tasks = [\r\n-        ...this.todo.map(t => t.name),\r\n-        ...this.inProgress.map(t => t.name),\r\n-        ...this.done.map(t => t.name)\r\n-      ];\r\n-      \r\n-      // Ici, vous devriez normalement faire un appel API pour sauvegarder les modifications\r\n-      console.log('Phase updated:', this.phase);\r\n-    }\r\n-  }\r\n-// Ajoutez cette méthode dans votre classe TasksComponent\r\n-deleteTask(task: any, column: string) {\r\n-  // Demander confirmation avant suppression\r\n-  if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n-    switch (column) {\r\n-      case 'todo':\r\n-        this.todo = this.todo.filter(t => t.id !== task.id);\r\n-        break;\r\n-      case 'inProgress':\r\n-        this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n-        break;\r\n-      case 'done':\r\n-        this.done = this.done.filter(t => t.id !== task.id);\r\n-        break;\r\n-    }\r\n-  }\r\n-}\r\n-}\r\n-import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n-import { Component, Input, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router } from '@angular/router';\r\n-\r\n-@Component({\r\n-  selector: 'app-tasks',\r\n-  templateUrl: './tasks.component.html',\r\n-  styleUrl: './tasks.component.scss'\r\n-})\r\n-export class TasksComponent implements OnInit{\r\n-  phaseId: string | null = null;\r\n-  phases: any[] = []; \r\n-  todo: any[] = [];\r\n-  inProgress: any[] = [];\r\n-  done: any[] = [];\r\n-\r\n-  constructor(private router: Router, private route: ActivatedRoute) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('_id'); \r\n  \r\n       if (phaseId) {\r\n         this.loadPhase(phaseId);\r\n       } else {\r\n"
                },
                {
                    "date": 1744716396416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,12 @@\n       },\r\n       {\r\n         _id: \"67c852e7bae88e131703dd92\",\r\n         name: \"Conception Détaillée\",\r\n-        tasks: []\r\n+        tasks: [\r\n+          { _id: \"1\", name: \"Analyse technique\", status: \"PENDING\" },\r\n+          { _id: \"2\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n+        ]\r\n       }\r\n     ];\r\n     \r\n     \r\n"
                },
                {
                    "date": 1744716402135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,10 @@\n       {\r\n         _id: \"67c852e7bae88e131703dd92\",\r\n         name: \"Conception Détaillée\",\r\n         tasks: [\r\n-          { _id: \"1\", name: \"Analyse technique\", status: \"PENDING\" },\r\n-          { _id: \"2\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n+          { _id: \"3\", name: \"Analyse technique\", status: \"PENDING\" },\r\n+          { _id: \"4\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n         ]\r\n       }\r\n     ];\r\n     \r\n"
                },
                {
                    "date": 1744716470838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,41 +30,9 @@\n   }\r\n \r\n \r\n   private loadPhase(phaseId: string ) {\r\n-    if (!phaseId) {\r\n-      console.error('No phase ID provided');\r\n-      this.goBack();\r\n-      return;\r\n-    }\r\n-  \r\n-    const mockPhases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        tasks: [\r\n-          { _id: \"1\", name: \"Analyse technique\", status: \"PENDING\" },\r\n-          { _id: \"2\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n-        ]\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        tasks: [\r\n-          { _id: \"3\", name: \"Analyse technique\", status: \"PENDING\" },\r\n-          { _id: \"4\", name: \"Étude réglementaire\", status: \"PENDING\" }\r\n-        ]\r\n-      }\r\n-    ];\r\n     \r\n-    \r\n-    this.phase = mockPhases.find((p:any) => p._id === +phaseId);\r\n-    if (this.phase) {\r\n-      this.initializeTasks();\r\n-    } else {\r\n-      console.error('Phase not found');\r\n-      this.goBack();\r\n-    }\r\n   }\r\n \r\n   private loadAllPhases() {\r\n     // Simulation - remplacez par un appel à votre service\r\n"
                },
                {
                    "date": 1744716919108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,175 +0,0 @@\n-import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n-import { Component, Input, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router } from '@angular/router';\r\n-\r\n-@Component({\r\n-  selector: 'app-tasks',\r\n-  templateUrl: './tasks.component.html',\r\n-  styleUrl: './tasks.component.scss'\r\n-})\r\n-export class TasksComponent implements OnInit{\r\n-  phaseId: string | null = null;\r\n-  phases: any[] = []; \r\n-  todo: any[] = [];\r\n-  inProgress: any[] = [];\r\n-  done: any[] = [];\r\n-\r\n-  constructor(private router: Router, private route: ActivatedRoute) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    const phaseId = this.route.snapshot.paramMap.get('_id'); \r\n- \r\n-      if (phaseId) {\r\n-        this.loadPhase(phaseId);\r\n-      } else {\r\n-        this.goBack();\r\n-      }\r\n-    \r\n-    this.initializeTasks();\r\n-    this.loadAllPhases();\r\n-  }\r\n-\r\n-\r\n-  private loadPhase(phaseId: string ) {\r\n-    \r\n-  }\r\n-\r\n-  private loadAllPhases() {\r\n-    // Simulation - remplacez par un appel à votre service\r\n-    this.phases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        taskCount: 2\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        taskCount: 0\r\n-      }\r\n-    ];\r\n-  }\r\n-\r\n-  \r\n-  private initializeTasks() {\r\n-    if (!this.phase?.tasks) return;\r\n-\r\n-    this.todo = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'PENDING')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'todo'\r\n-      }));\r\n-\r\n-    this.inProgress = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'IN_PROGRESS')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'inProgress'\r\n-      }));\r\n-\r\n-    this.done = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'COMPLETED')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'done'\r\n-      }));\r\n-  }\r\n-  switchPhase(newPhase: any) {\r\n-    if (newPhase.id !== this.phase?.id) {\r\n-      // Naviguer vers la nouvelle phase\r\n-      this.router.navigate(['phase', newPhase.id], { \r\n-        relativeTo: this.route,\r\n-        state: { phase: newPhase }\r\n-      }).then(() => {\r\n-        this.phase = newPhase;\r\n-        this.initializeTasks();\r\n-      });\r\n-    }\r\n-  }\r\n-  drop(event: CdkDragDrop<any[]>) {\r\n-    if (event.previousContainer === event.container) {\r\n-      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n-    } else {\r\n-      transferArrayItem(\r\n-        event.previousContainer.data,\r\n-        event.container.data,\r\n-        event.previousIndex,\r\n-        event.currentIndex\r\n-      );\r\n-      // Mettre à jour le statut des tâches\r\n-      this.updateTaskStatus();\r\n-    }\r\n-  }\r\n-\r\n-  updateTaskStatus() {\r\n-    this.todo.forEach(task => task.status = 'PENDING');\r\n-    this.inProgress.forEach(task => task.status = 'IN_PROGRESS');\r\n-    this.done.forEach(task => task.status = 'COMPLETED');\r\n-  }\r\n-\r\n-  goBack() {\r\n-    this.router.navigate(['../'], { relativeTo: this.route });\r\n-  }\r\n-\r\n-  addTask() {\r\n-    const taskName = prompt('Nom de la nouvelle tâche:');\r\n-    if (taskName) {\r\n-      const newTask = {\r\n-        _id: Math.random().toString(36).substring(2),\r\n-        name: taskName,\r\n-        status: 'PENDING'\r\n-      };\r\n-      \r\n-      this.todo.push({\r\n-        id: newTask._id,\r\n-        name: newTask.name,\r\n-        status: 'todo'\r\n-      });\r\n-      \r\n-      // En production, ajouter la tâche via API\r\n-      if (!this.phase.tasks) this.phase.tasks = [];\r\n-      this.phase.tasks.push(newTask);\r\n-    }\r\n-  }\r\n-  editTask(task: any) {\r\n-    const newName = prompt('Modifier le nom de la tâche:', task.name);\r\n-    if (newName && newName !== task.name) {\r\n-      task.name = newName;\r\n-      this.updatePhaseTasks();\r\n-    }\r\n-  }\r\n-  private updatePhaseTasks() {\r\n-    // Mettre à jour les tâches dans la phase actuelle\r\n-    if (this.phase) {\r\n-      this.phase.tasks = [\r\n-        ...this.todo.map(t => t.name),\r\n-        ...this.inProgress.map(t => t.name),\r\n-        ...this.done.map(t => t.name)\r\n-      ];\r\n-      \r\n-      // Ici, vous devriez normalement faire un appel API pour sauvegarder les modifications\r\n-      console.log('Phase updated:', this.phase);\r\n-    }\r\n-  }\r\n-// Ajoutez cette méthode dans votre classe TasksComponent\r\n-deleteTask(task: any, column: string) {\r\n-  // Demander confirmation avant suppression\r\n-  if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n-    switch (column) {\r\n-      case 'todo':\r\n-        this.todo = this.todo.filter(t => t.id !== task.id);\r\n-        break;\r\n-      case 'inProgress':\r\n-        this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n-        break;\r\n-      case 'done':\r\n-        this.done = this.done.filter(t => t.id !== task.id);\r\n-        break;\r\n-    }\r\n-  }\r\n-}\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744717006838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,192 @@\n-\n+import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n+import { Component, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n+\r\n+@Component({\r\n+  selector: 'app-tasks',\r\n+  templateUrl: './tasks.component.html',\r\n+  styleUrls: ['./tasks.component.scss']\r\n+})\r\n+export class TasksComponent implements OnInit {\r\n+  phase: any;\r\n+  phases: any[] = [];\r\n+  \r\n+  todo: any[] = [];\r\n+  inProgress: any[] = [];\r\n+  done: any[] = [];\r\n+\r\n+  constructor(private router: Router, private route: ActivatedRoute) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    // Récupérer la phase depuis l'état de navigation\r\n+    this.phase = history.state.phase;\r\n+    \r\n+    if (!this.phase) {\r\n+      const phaseId = this.route.snapshot.paramMap.get('_id');\r\n+      if (phaseId) {\r\n+        this.loadPhase(phaseId);\r\n+      } else {\r\n+        this.goBack();\r\n+      }\r\n+    }\r\n+    \r\n+    this.initializeTasks();\r\n+    this.loadAllPhases();\r\n+  }\r\n+\r\n+  private loadPhase(phaseId: string) {\r\n+    // Simulation - remplacer par un appel API\r\n+    \r\n+    \r\n+    this.phase = mockPhases.find(p => p._id === phaseId);\r\n+    if (this.phase) {\r\n+      this.initializeTasks();\r\n+    } else {\r\n+      this.goBack();\r\n+    }\r\n+  }\r\n+\r\n+  private loadAllPhases() {\r\n+    // Simulation - remplacer par un appel API\r\n+    this.phases = [\r\n+      {\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        taskCount: 1\r\n+      },\r\n+      {\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        taskCount: 0\r\n+      }\r\n+    ];\r\n+  }\r\n+\r\n+  private initializeTasks() {\r\n+    if (!this.phase?.tasks) return;\r\n+\r\n+    this.todo = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'PENDING')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'todo',\r\n+        originalTask: task\r\n+      }));\r\n+\r\n+    this.inProgress = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'IN_PROGRESS')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'inProgress',\r\n+        originalTask: task\r\n+      }));\r\n+\r\n+    this.done = this.phase.tasks\r\n+      .filter((task: any) => task.status === 'COMPLETED')\r\n+      .map((task: any) => ({\r\n+        id: task._id,\r\n+        name: task.name,\r\n+        status: 'done',\r\n+        originalTask: task\r\n+      }));\r\n+  }\r\n+\r\n+  switchPhase(newPhase: any) {\r\n+    if (newPhase._id !== this.phase?._id) {\r\n+      this.router.navigate(['phase', newPhase._id], {\r\n+        relativeTo: this.route,\r\n+        state: { phase: newPhase }\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  drop(event: CdkDragDrop<any[]>) {\r\n+    if (event.previousContainer === event.container) {\r\n+      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n+    } else {\r\n+      transferArrayItem(\r\n+        event.previousContainer.data,\r\n+        event.container.data,\r\n+        event.previousIndex,\r\n+        event.currentIndex\r\n+      );\r\n+      this.updateTaskStatus();\r\n+    }\r\n+  }\r\n+\r\n+  updateTaskStatus() {\r\n+    // Mettre à jour les statuts des tâches originales\r\n+    this.todo.forEach(task => task.originalTask.status = 'PENDING');\r\n+    this.inProgress.forEach(task => task.originalTask.status = 'IN_PROGRESS');\r\n+    this.done.forEach(task => task.originalTask.status = 'COMPLETED');\r\n+    \r\n+    // Ici, vous devriez appeler votre API pour sauvegarder les changements\r\n+    console.log('Tasks updated:', {\r\n+      todo: this.todo,\r\n+      inProgress: this.inProgress,\r\n+      done: this.done\r\n+    });\r\n+  }\r\n+\r\n+  goBack() {\r\n+    this.router.navigate(['../'], { relativeTo: this.route });\r\n+  }\r\n+\r\n+  addTask() {\r\n+    const taskName = prompt('Entrez le nom de la nouvelle tâche:');\r\n+    if (taskName) {\r\n+      const newTask = {\r\n+        _id: Math.random().toString(36).substring(2),\r\n+        name: taskName,\r\n+        description: '',\r\n+        status: 'PENDING',\r\n+        priority: 'MEDIUM',\r\n+        startDate: new Date().toISOString(),\r\n+        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n+        subTasks: []\r\n+      };\r\n+\r\n+      this.todo.push({\r\n+        id: newTask._id,\r\n+        name: newTask.name,\r\n+        status: 'todo',\r\n+        originalTask: newTask\r\n+      });\r\n+\r\n+      if (!this.phase.tasks) this.phase.tasks = [];\r\n+      this.phase.tasks.push(newTask);\r\n+    }\r\n+  }\r\n+\r\n+  editTask(task: any) {\r\n+    const newName = prompt('Modifier le nom de la tâche:', task.name);\r\n+    if (newName && newName !== task.name) {\r\n+      task.name = newName;\r\n+      task.originalTask.name = newName;\r\n+    }\r\n+  }\r\n+\r\n+  deleteTask(task: any, column: string) {\r\n+    if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n+      // Supprimer de l'affichage\r\n+      switch (column) {\r\n+        case 'todo':\r\n+          this.todo = this.todo.filter(t => t.id !== task.id);\r\n+          break;\r\n+        case 'inProgress':\r\n+          this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n+          break;\r\n+        case 'done':\r\n+          this.done = this.done.filter(t => t.id !== task.id);\r\n+          break;\r\n+      }\r\n+      \r\n+      // Supprimer de la liste des tâches de la phase\r\n+      if (this.phase.tasks) {\r\n+        this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task.id);\r\n+      }\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744717012205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,33 @@\n   }\r\n \r\n   private loadPhase(phaseId: string) {\r\n     // Simulation - remplacer par un appel API\r\n+    const mockPhases = [\r\n+      {\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        description: \"Analyse des contraintes techniques et réglementaires.\",\r\n+        startDate: \"2025-01-10T00:00:00.000Z\",\r\n+        endDate: \"2025-02-10T00:00:00.000Z\",\r\n+        tasks: [\r\n+          {\r\n+            _id: \"67c8556dbae88e131703dda4\",\r\n+            name: \"Analyse des contraintes techniques\",\r\n+            status: \"PENDING\"\r\n+          }\r\n+        ]\r\n+      },\r\n+      {\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        description: \"Élaboration des plans détaillés.\",\r\n+        startDate: \"2025-02-15T00:00:00.000Z\",\r\n+        endDate: \"2025-03-20T00:00:00.000Z\",\r\n+        tasks: []\r\n+      }\r\n+    ];\r\n     \r\n-    \r\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n"
                },
                {
                    "date": 1744717023939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,33 @@\n   styleUrls: ['./tasks.component.scss']\r\n })\r\n export class TasksComponent implements OnInit {\r\n   phase: any;\r\n-  phases: any[] = [];\r\n+  phases: any[] = [\r\n+\r\n+    {\r\n+      _id: \"67c85299bae88e131703dd8e\",\r\n+      name: \"Étude de Faisabilité\",\r\n+      description: \"Analyse des contraintes techniques et réglementaires.\",\r\n+      startDate: \"2025-01-10T00:00:00.000Z\",\r\n+      endDate: \"2025-02-10T00:00:00.000Z\",\r\n+      tasks: [\r\n+        {\r\n+          _id: \"67c8556dbae88e131703dda4\",\r\n+          name: \"Analyse des contraintes techniques\",\r\n+          status: \"PENDING\"\r\n+        }\r\n+      ]\r\n+    },\r\n+    {\r\n+      _id: \"67c852e7bae88e131703dd92\",\r\n+      name: \"Conception Détaillée\",\r\n+      description: \"Élaboration des plans détaillés.\",\r\n+      startDate: \"2025-02-15T00:00:00.000Z\",\r\n+      endDate: \"2025-03-20T00:00:00.000Z\",\r\n+      tasks: []\r\n+    }\r\n+  ];\r\n   \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n@@ -36,30 +60,9 @@\n \r\n   private loadPhase(phaseId: string) {\r\n     // Simulation - remplacer par un appel API\r\n     const mockPhases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        description: \"Analyse des contraintes techniques et réglementaires.\",\r\n-        startDate: \"2025-01-10T00:00:00.000Z\",\r\n-        endDate: \"2025-02-10T00:00:00.000Z\",\r\n-        tasks: [\r\n-          {\r\n-            _id: \"67c8556dbae88e131703dda4\",\r\n-            name: \"Analyse des contraintes techniques\",\r\n-            status: \"PENDING\"\r\n-          }\r\n-        ]\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        description: \"Élaboration des plans détaillés.\",\r\n-        startDate: \"2025-02-15T00:00:00.000Z\",\r\n-        endDate: \"2025-03-20T00:00:00.000Z\",\r\n-        tasks: []\r\n-      }\r\n+      \r\n     ];\r\n     \r\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n     if (this.phase) {\r\n"
                },
                {
                    "date": 1744717031639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,13 +58,9 @@\n     this.loadAllPhases();\r\n   }\r\n \r\n   private loadPhase(phaseId: string) {\r\n-    // Simulation - remplacer par un appel API\r\n-    const mockPhases = [\r\n-      \r\n-    ];\r\n-    \r\n+       \r\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n"
                },
                {
                    "date": 1744717040723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   }\r\n \r\n   private loadPhase(phaseId: string) {\r\n        \r\n-    this.phase = mockPhases.find(p => p._id === phaseId);\r\n+    this.phase = this.ph.find(p => p._id === phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n       this.goBack();\r\n"
                },
                {
                    "date": 1744717047602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,9 @@\n     this.loadAllPhases();\r\n   }\r\n \r\n   private loadPhase(phaseId: string) {\r\n-       \r\n-    this.phase = this.ph.find(p => p._id === phaseId);\r\n+    this.phase = this.phases.find(p => p._id === phaseId);\r\n     if (this.phase) {\r\n       this.initializeTasks();\r\n     } else {\r\n       this.goBack();\r\n"
                },
                {
                    "date": 1744717067038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,23 +66,8 @@\n       this.goBack();\r\n     }\r\n   }\r\n \r\n-  private loadAllPhases() {\r\n-    // Simulation - remplacer par un appel API\r\n-    this.phases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        taskCount: 1\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        taskCount: 0\r\n-      }\r\n-    ];\r\n-  }\r\n \r\n   private initializeTasks() {\r\n     if (!this.phase?.tasks) return;\r\n \r\n"
                },
                {
                    "date": 1744717074526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,23 @@\n       this.goBack();\r\n     }\r\n   }\r\n \r\n+  private loadAllPhases() {\r\n+    // Simulation - remplacer par un appel API\r\n+    this.phases = [\r\n+      {\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        taskCount: 1\r\n+      },\r\n+      {\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        taskCount: 0\r\n+      }\r\n+    ];\r\n+  }\r\n \r\n   private initializeTasks() {\r\n     if (!this.phase?.tasks) return;\r\n \r\n"
                },
                {
                    "date": 1744717082170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,21 +67,9 @@\n     }\r\n   }\r\n \r\n   private loadAllPhases() {\r\n-    // Simulation - remplacer par un appel API\r\n-    this.phases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        taskCount: 1\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        taskCount: 0\r\n-      }\r\n-    ];\r\n+    return this.p\r\n   }\r\n \r\n   private initializeTasks() {\r\n     if (!this.phase?.tasks) return;\r\n"
                },
                {
                    "date": 1744718685928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,21 +41,19 @@\n \r\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n-    // Récupérer la phase depuis l'état de navigation\r\n-    this.phase = history.state.phase;\r\n-    \r\n-    if (!this.phase) {\r\n-      const phaseId = this.route.snapshot.paramMap.get('_id');\r\n-      if (phaseId) {\r\n+    this.route.params.subscribe(params => {\r\n+      const phaseId = params['phaseId'];\r\n+      if (history.state.phase) {\r\n+        this.phase = history.state.phase;\r\n+        this.initializeTasks();\r\n+      } else {\r\n+        // Si on recharge la page, on doit charger la phase depuis le serveur\r\n         this.loadPhase(phaseId);\r\n-      } else {\r\n-        this.goBack();\r\n       }\r\n-    }\r\n-    \r\n-    this.initializeTasks();\r\n+    });\r\n+\r\n     this.loadAllPhases();\r\n   }\r\n \r\n   private loadPhase(phaseId: string) {\r\n@@ -67,9 +65,9 @@\n     }\r\n   }\r\n \r\n   private loadAllPhases() {\r\n-    return this.p\r\n+    return this.phases;\r\n   }\r\n \r\n   private initializeTasks() {\r\n     if (!this.phase?.tasks) return;\r\n"
                },
                {
                    "date": 1744718768529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,36 +69,39 @@\n     return this.phases;\r\n   }\r\n \r\n   private initializeTasks() {\r\n-    if (!this.phase?.tasks) return;\r\n+    this.todo = [];\r\n+    this.inProgress = [];\r\n+    this.done = [];\r\n \r\n-    this.todo = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'PENDING')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'todo',\r\n-        originalTask: task\r\n-      }));\r\n+    if (this.phase?.tasks) {\r\n+      this.phase.tasks.forEach((task: any) => {\r\n+        const taskCard = {\r\n+          id: task._id,\r\n+          name: task.name,\r\n+          description: task.description,\r\n+          status: task.status,\r\n+          priority: task.priority,\r\n+          startDate: task.startDate,\r\n+          endDate: task.endDate,\r\n+          subTasks: task.subTasks,\r\n+          originalTask: task\r\n+        };\r\n \r\n-    this.inProgress = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'IN_PROGRESS')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'inProgress',\r\n-        originalTask: task\r\n-      }));\r\n-\r\n-    this.done = this.phase.tasks\r\n-      .filter((task: any) => task.status === 'COMPLETED')\r\n-      .map((task: any) => ({\r\n-        id: task._id,\r\n-        name: task.name,\r\n-        status: 'done',\r\n-        originalTask: task\r\n-      }));\r\n+        switch (task.status) {\r\n+          case 'PENDING':\r\n+            this.todo.push(taskCard);\r\n+            break;\r\n+          case 'IN_PROGRESS':\r\n+            this.inProgress.push(taskCard);\r\n+            break;\r\n+          case 'COMPLETED':\r\n+            this.done.push(taskCard);\r\n+            break;\r\n+        }\r\n+      });\r\n+    }\r\n   }\r\n \r\n   switchPhase(newPhase: any) {\r\n     if (newPhase._id !== this.phase?._id) {\r\n"
                },
                {
                    "date": 1744718783539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,11 @@\n         event.container.data,\r\n         event.previousIndex,\r\n         event.currentIndex\r\n       );\r\n-      this.updateTaskStatus();\r\n+      \r\n+      // Mettre à jour le statut des tâches\r\n+      this.updateTaskStatus(event);\r\n     }\r\n   }\r\n \r\n   updateTaskStatus() {\r\n"
                },
                {
                    "date": 1744718800410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,20 +127,26 @@\n       this.updateTaskStatus(event);\r\n     }\r\n   }\r\n \r\n-  updateTaskStatus() {\r\n-    // Mettre à jour les statuts des tâches originales\r\n-    this.todo.forEach(task => task.originalTask.status = 'PENDING');\r\n-    this.inProgress.forEach(task => task.originalTask.status = 'IN_PROGRESS');\r\n-    this.done.forEach(task => task.originalTask.status = 'COMPLETED');\r\n+  updateTaskStatus(event: CdkDragDrop<any[]>) {\r\n+    const task = event.container.data[event.currentIndex];\r\n     \r\n-    // Ici, vous devriez appeler votre API pour sauvegarder les changements\r\n-    console.log('Tasks updated:', {\r\n-      todo: this.todo,\r\n-      inProgress: this.inProgress,\r\n-      done: this.done\r\n-    });\r\n+    // Déterminer le nouveau statut en fonction de la colonne\r\n+    let newStatus = 'PENDING';\r\n+    if (event.container.id === 'inProgress-list') {\r\n+      newStatus = 'IN_PROGRESS';\r\n+    } else if (event.container.id === 'done-list') {\r\n+      newStatus = 'COMPLETED';\r\n+    }\r\n+\r\n+    // Mettre à jour la tâche originale\r\n+    if (task.originalTask) {\r\n+      task.originalTask.status = newStatus;\r\n+    }\r\n+    \r\n+    // Ici, vous devriez faire un appel API pour sauvegarder le changement\r\n+    console.log('Task status updated:', task);\r\n   }\r\n \r\n   goBack() {\r\n     this.router.navigate(['../'], { relativeTo: this.route });\r\n"
                },
                {
                    "date": 1744723008852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   templateUrl: './tasks.component.html',\r\n   styleUrls: ['./tasks.component.scss']\r\n })\r\n export class TasksComponent implements OnInit {\r\n-  phase: any;\r\n+  @phase: any;\r\n   phases: any[] = [\r\n \r\n     {\r\n       _id: \"67c85299bae88e131703dd8e\",\r\n"
                },
                {
                    "date": 1744723015111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n-import { Component, OnInit } from '@angular/core';\r\n+import { Component, Input, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-tasks',\r\n   templateUrl: './tasks.component.html',\r\n   styleUrls: ['./tasks.component.scss']\r\n })\r\n export class TasksComponent implements OnInit {\r\n-  @phase: any;\r\n+  @Input()phase: any;\r\n   phases: any[] = [\r\n \r\n     {\r\n       _id: \"67c85299bae88e131703dd8e\",\r\n"
                },
                {
                    "date": 1744723024302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,34 +8,10 @@\n   styleUrls: ['./tasks.component.scss']\r\n })\r\n export class TasksComponent implements OnInit {\r\n   @Input()phase: any;\r\n-  phases: any[] = [\r\n-\r\n-    {\r\n-      _id: \"67c85299bae88e131703dd8e\",\r\n-      name: \"Étude de Faisabilité\",\r\n-      description: \"Analyse des contraintes techniques et réglementaires.\",\r\n-      startDate: \"2025-01-10T00:00:00.000Z\",\r\n-      endDate: \"2025-02-10T00:00:00.000Z\",\r\n-      tasks: [\r\n-        {\r\n-          _id: \"67c8556dbae88e131703dda4\",\r\n-          name: \"Analyse des contraintes techniques\",\r\n-          status: \"PENDING\"\r\n-        }\r\n-      ]\r\n-    },\r\n-    {\r\n-      _id: \"67c852e7bae88e131703dd92\",\r\n-      name: \"Conception Détaillée\",\r\n-      description: \"Élaboration des plans détaillés.\",\r\n-      startDate: \"2025-02-15T00:00:00.000Z\",\r\n-      endDate: \"2025-03-20T00:00:00.000Z\",\r\n-      tasks: []\r\n-    }\r\n-  ];\r\n   \r\n+  \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n"
                },
                {
                    "date": 1744723152850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n   styleUrls: ['./tasks.component.scss']\r\n })\r\n export class TasksComponent implements OnInit {\r\n   @Input()phase: any;\r\n+  projectId: string = '';\r\n   \r\n-  \r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n"
                },
                {
                    "date": 1744723164862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,19 +18,12 @@\n   constructor(private router: Router, private route: ActivatedRoute) {}\r\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n+      this.projectId = params['id'];\r\n       const phaseId = params['phaseId'];\r\n-      if (history.state.phase) {\r\n-        this.phase = history.state.phase;\r\n-        this.initializeTasks();\r\n-      } else {\r\n-        // Si on recharge la page, on doit charger la phase depuis le serveur\r\n-        this.loadPhase(phaseId);\r\n-      }\r\n+      this.loadPhase(phaseId);\r\n     });\r\n-\r\n-    this.loadAllPhases();\r\n   }\r\n \r\n   private loadPhase(phaseId: string) {\r\n     this.phase = this.phases.find(p => p._id === phaseId);\r\n"
                },
                {
                    "date": 1744723191581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,17 +24,64 @@\n       this.loadPhase(phaseId);\r\n     });\r\n   }\r\n \r\n-  private loadPhase(phaseId: string) {\r\n-    this.phase = this.phases.find(p => p._id === phaseId);\r\n-    if (this.phase) {\r\n-      this.initializeTasks();\r\n-    } else {\r\n-      this.goBack();\r\n-    }\r\n+  loadPhase(phaseId: string): void {\r\n+    // En réalité, vous feriez un appel API ici\r\n+    // Pour l'exemple, on utilise des données mockées\r\n+    const mockPhases = [\r\n+      {\r\n+        _id: \"67c85299bae88e131703dd8e\",\r\n+        name: \"Étude de Faisabilité\",\r\n+        description: \"Analyse des contraintes techniques et réglementaires.\",\r\n+        startDate: \"2025-01-10T00:00:00.000Z\",\r\n+        endDate: \"2025-02-10T00:00:00.000Z\",\r\n+        tasks: [\r\n+          {\r\n+            _id: \"67c8556dbae88e131703dda4\",\r\n+            name: \"Analyse des contraintes techniques\",\r\n+            description: \"Étudier les contraintes techniques du projet.\",\r\n+            status: \"PENDING\",\r\n+            priority: \"HIGH\",\r\n+            startDate: \"2025-01-10T00:00:00.000Z\",\r\n+            endDate: \"2025-01-30T00:00:00.000Z\",\r\n+            subTasks: [\r\n+              {\r\n+                _id: \"67d03bc0497c0e90359d6cb7\",\r\n+                name: \"Identifier les matériaux de construction\",\r\n+                description: \"Rechercher et lister les matériaux adaptés aux contraintes techniques.\",\r\n+                status: \"PENDING\",\r\n+                priority: \"MEDIUM\"\r\n+              }\r\n+            ]\r\n+          },\r\n+          {\r\n+            _id: \"67c8556dbae88e131703dda5\",\r\n+            name: \"Analyse des contraintes réglementaires\",\r\n+            description: \"Vérifier les normes et réglementations applicables.\",\r\n+            status: \"IN_PROGRESS\",\r\n+            priority: \"MEDIUM\",\r\n+            startDate: \"2025-01-15T00:00:00.000Z\",\r\n+            endDate: \"2025-02-05T00:00:00.000Z\",\r\n+            subTasks: []\r\n+          }\r\n+        ]\r\n+      },\r\n+      {\r\n+        _id: \"67c852e7bae88e131703dd92\",\r\n+        name: \"Conception Détaillée\",\r\n+        description: \"Élaboration des plans détaillés.\",\r\n+        startDate: \"2025-02-15T00:00:00.000Z\",\r\n+        endDate: \"2025-03-20T00:00:00.000Z\",\r\n+        tasks: []\r\n+      }\r\n+    ];\r\n+\r\n+    this.phase = mockPhases.find(p => p._id === phaseId);\r\n+    this.organizeTasks();\r\n   }\r\n \r\n+\r\n   private loadAllPhases() {\r\n     return this.phases;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1744723205884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,13 +79,31 @@\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n     this.organizeTasks();\r\n   }\r\n \r\n+  organizeTasks(): void {\r\n+    this.todo = this.phase.tasks.filter((task: any) => task.status === 'PENDING');\r\n+    this.inProgress = this.phase.tasks.filter((task: any) => task.status === 'IN_PROGRESS');\r\n+    this.done = this.phase.tasks.filter((task: any) => task.status === 'COMPLETED');\r\n+  }\r\n \r\n-  private loadAllPhases() {\r\n-    return this.phases;\r\n+  drop(event: CdkDragDrop<any[]>): void {\r\n+    if (event.previousContainer === event.container) {\r\n+      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n+    } else {\r\n+      transferArrayItem(\r\n+        event.previousContainer.data,\r\n+        event.container.data,\r\n+        event.previousIndex,\r\n+        event.currentIndex\r\n+      );\r\n+      \r\n+      // Mettre à jour le statut des tâches\r\n+      this.updateTaskStatus(event);\r\n+    }\r\n   }\r\n \r\n+\r\n   private initializeTasks() {\r\n     this.todo = [];\r\n     this.inProgress = [];\r\n     this.done = [];\r\n"
                },
                {
                    "date": 1744723216481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,31 +79,15 @@\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n     this.organizeTasks();\r\n   }\r\n \r\n+\r\n   organizeTasks(): void {\r\n     this.todo = this.phase.tasks.filter((task: any) => task.status === 'PENDING');\r\n     this.inProgress = this.phase.tasks.filter((task: any) => task.status === 'IN_PROGRESS');\r\n     this.done = this.phase.tasks.filter((task: any) => task.status === 'COMPLETED');\r\n   }\r\n \r\n-  drop(event: CdkDragDrop<any[]>): void {\r\n-    if (event.previousContainer === event.container) {\r\n-      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n-    } else {\r\n-      transferArrayItem(\r\n-        event.previousContainer.data,\r\n-        event.container.data,\r\n-        event.previousIndex,\r\n-        event.currentIndex\r\n-      );\r\n-      \r\n-      // Mettre à jour le statut des tâches\r\n-      this.updateTaskStatus(event);\r\n-    }\r\n-  }\r\n-\r\n-\r\n   private initializeTasks() {\r\n     this.todo = [];\r\n     this.inProgress = [];\r\n     this.done = [];\r\n"
                },
                {
                    "date": 1744723228376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n       });\r\n     }\r\n   }\r\n \r\n-  drop(event: CdkDragDrop<any[]>) {\r\n+  drop(event: CdkDragDrop<any[]>): void {\r\n     if (event.previousContainer === event.container) {\r\n       moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n     } else {\r\n       transferArrayItem(\r\n"
                },
                {
                    "date": 1744723241087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,25 +145,21 @@\n       this.updateTaskStatus(event);\r\n     }\r\n   }\r\n \r\n-  updateTaskStatus(event: CdkDragDrop<any[]>) {\r\n+  updateTaskStatus(event: CdkDragDrop<any[]>): void {\r\n     const task = event.container.data[event.currentIndex];\r\n     \r\n-    // Déterminer le nouveau statut en fonction de la colonne\r\n-    let newStatus = 'PENDING';\r\n-    if (event.container.id === 'inProgress-list') {\r\n-      newStatus = 'IN_PROGRESS';\r\n+    // Déterminer le nouveau statut\r\n+    if (event.container.id === 'todo-list') {\r\n+      task.status = 'PENDING';\r\n+    } else if (event.container.id === 'inProgress-list') {\r\n+      task.status = 'IN_PROGRESS';\r\n     } else if (event.container.id === 'done-list') {\r\n-      newStatus = 'COMPLETED';\r\n+      task.status = 'COMPLETED';\r\n     }\r\n-\r\n-    // Mettre à jour la tâche originale\r\n-    if (task.originalTask) {\r\n-      task.originalTask.status = newStatus;\r\n-    }\r\n     \r\n-    // Ici, vous devriez faire un appel API pour sauvegarder le changement\r\n+    // Ici, normalement vous feriez un appel API pour sauvegarder le changement\r\n     console.log('Task status updated:', task);\r\n   }\r\n \r\n   goBack() {\r\n"
                },
                {
                    "date": 1744723254931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,13 +165,13 @@\n   goBack() {\r\n     this.router.navigate(['../'], { relativeTo: this.route });\r\n   }\r\n \r\n-  addTask() {\r\n+  addTask(): void {\r\n     const taskName = prompt('Entrez le nom de la nouvelle tâche:');\r\n     if (taskName) {\r\n       const newTask = {\r\n-        _id: Math.random().toString(36).substring(2),\r\n+        _id: Math.random().toString(36).substring(2, 9),\r\n         name: taskName,\r\n         description: '',\r\n         status: 'PENDING',\r\n         priority: 'MEDIUM',\r\n@@ -179,16 +179,9 @@\n         endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n         subTasks: []\r\n       };\r\n \r\n-      this.todo.push({\r\n-        id: newTask._id,\r\n-        name: newTask.name,\r\n-        status: 'todo',\r\n-        originalTask: newTask\r\n-      });\r\n-\r\n-      if (!this.phase.tasks) this.phase.tasks = [];\r\n+      this.todo.push(newTask);\r\n       this.phase.tasks.push(newTask);\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1744723268978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,34 +184,30 @@\n       this.phase.tasks.push(newTask);\r\n     }\r\n   }\r\n \r\n-  editTask(task: any) {\r\n+  editTask(task: any): void {\r\n     const newName = prompt('Modifier le nom de la tâche:', task.name);\r\n     if (newName && newName !== task.name) {\r\n       task.name = newName;\r\n-      task.originalTask.name = newName;\r\n+      // Ici, vous feriez un appel API pour sauvegarder\r\n     }\r\n   }\r\n \r\n-  deleteTask(task: any, column: string) {\r\n+  deleteTask(task: any, list: string): void {\r\n     if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n-      // Supprimer de l'affichage\r\n-      switch (column) {\r\n-        case 'todo':\r\n-          this.todo = this.todo.filter(t => t.id !== task.id);\r\n-          break;\r\n-        case 'inProgress':\r\n-          this.inProgress = this.inProgress.filter(t => t.id !== task.id);\r\n-          break;\r\n-        case 'done':\r\n-          this.done = this.done.filter(t => t.id !== task.id);\r\n-          break;\r\n+      // Supprimer de la liste affichée\r\n+      if (list === 'todo') {\r\n+        this.todo = this.todo.filter(t => t._id !== task._id);\r\n+      } else if (list === 'inProgress') {\r\n+        this.inProgress = this.inProgress.filter(t => t._id !== task._id);\r\n+      } else if (list === 'done') {\r\n+        this.done = this.done.filter(t => t._id !== task._id);\r\n       }\r\n       \r\n-      // Supprimer de la liste des tâches de la phase\r\n-      if (this.phase.tasks) {\r\n-        this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task.id);\r\n-      }\r\n+      // Supprimer de la liste principale\r\n+      this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task._id);\r\n+      \r\n+      // Ici, vous feriez un appel API pour supprimer définitivement\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744724153251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,8 @@\n     });\r\n   }\r\n \r\n   loadPhase(phaseId: string): void {\r\n-    // En réalité, vous feriez un appel API ici\r\n-    // Pour l'exemple, on utilise des données mockées\r\n     const mockPhases = [\r\n       {\r\n         _id: \"67c85299bae88e131703dd8e\",\r\n         name: \"Étude de Faisabilité\",\r\n"
                },
                {
                    "date": 1744724229017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n       }\r\n     ];\r\n \r\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n-    this.organizeTasks();\r\n+    this.initializeTasks();\r\n   }\r\n \r\n \r\n   organizeTasks(): void {\r\n"
                },
                {
                    "date": 1744724257197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n       }\r\n     ];\r\n \r\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n-    this.initializeTasks();\r\n+    this.organizeTasks();\r\n   }\r\n \r\n \r\n   organizeTasks(): void {\r\n"
                },
                {
                    "date": 1744724263988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,43 +83,8 @@\n     this.todo = this.phase.tasks.filter((task: any) => task.status === 'PENDING');\r\n     this.inProgress = this.phase.tasks.filter((task: any) => task.status === 'IN_PROGRESS');\r\n     this.done = this.phase.tasks.filter((task: any) => task.status === 'COMPLETED');\r\n   }\r\n-\r\n-  private initializeTasks() {\r\n-    this.todo = [];\r\n-    this.inProgress = [];\r\n-    this.done = [];\r\n-\r\n-    if (this.phase?.tasks) {\r\n-      this.phase.tasks.forEach((task: any) => {\r\n-        const taskCard = {\r\n-          id: task._id,\r\n-          name: task.name,\r\n-          description: task.description,\r\n-          status: task.status,\r\n-          priority: task.priority,\r\n-          startDate: task.startDate,\r\n-          endDate: task.endDate,\r\n-          subTasks: task.subTasks,\r\n-          originalTask: task\r\n-        };\r\n-\r\n-        switch (task.status) {\r\n-          case 'PENDING':\r\n-            this.todo.push(taskCard);\r\n-            break;\r\n-          case 'IN_PROGRESS':\r\n-            this.inProgress.push(taskCard);\r\n-            break;\r\n-          case 'COMPLETED':\r\n-            this.done.push(taskCard);\r\n-            break;\r\n-        }\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n   switchPhase(newPhase: any) {\r\n     if (newPhase._id !== this.phase?._id) {\r\n       this.router.navigate(['phase', newPhase._id], {\r\n         relativeTo: this.route,\r\n"
                },
                {
                    "date": 1744724291284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,8 @@\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n     this.organizeTasks();\r\n   }\r\n \r\n-\r\n   organizeTasks(): void {\r\n     this.todo = this.phase.tasks.filter((task: any) => task.status === 'PENDING');\r\n     this.inProgress = this.phase.tasks.filter((task: any) => task.status === 'IN_PROGRESS');\r\n     this.done = this.phase.tasks.filter((task: any) => task.status === 'COMPLETED');\r\n@@ -124,12 +123,9 @@\n     // Ici, normalement vous feriez un appel API pour sauvegarder le changement\r\n     console.log('Task status updated:', task);\r\n   }\r\n \r\n-  goBack() {\r\n-    this.router.navigate(['../'], { relativeTo: this.route });\r\n-  }\r\n-\r\n+ \r\n   addTask(): void {\r\n     const taskName = prompt('Entrez le nom de la nouvelle tâche:');\r\n     if (taskName) {\r\n       const newTask = {\r\n"
                },
                {
                    "date": 1744724351208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,10 +152,9 @@\n     }\r\n   }\r\n \r\n   deleteTask(task: any, list: string): void {\r\n-    if (confirm(`Êtes-vous sûr de vouloir supprimer la tâche \"${task.name}\" ?`)) {\r\n-      // Supprimer de la liste affichée\r\n+    \r\n       if (list === 'todo') {\r\n         this.todo = this.todo.filter(t => t._id !== task._id);\r\n       } else if (list === 'inProgress') {\r\n         this.inProgress = this.inProgress.filter(t => t._id !== task._id);\r\n@@ -166,7 +165,7 @@\n       // Supprimer de la liste principale\r\n       this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task._id);\r\n       \r\n       // Ici, vous feriez un appel API pour supprimer définitivement\r\n-    }\r\n+    \r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744724380474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,20 +152,16 @@\n     }\r\n   }\r\n \r\n   deleteTask(task: any, list: string): void {\r\n-    \r\n-      if (list === 'todo') {\r\n+          if (list === 'todo') {\r\n         this.todo = this.todo.filter(t => t._id !== task._id);\r\n       } else if (list === 'inProgress') {\r\n         this.inProgress = this.inProgress.filter(t => t._id !== task._id);\r\n       } else if (list === 'done') {\r\n         this.done = this.done.filter(t => t._id !== task._id);\r\n       }\r\n-      \r\n       // Supprimer de la liste principale\r\n       this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task._id);\r\n       \r\n-      // Ici, vous feriez un appel API pour supprimer définitivement\r\n-    \r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744726910808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n     }\r\n   }\r\n \r\n   deleteTask(task: any, list: string): void {\r\n-          if (list === 'todo') {\r\n+      if (list === 'todo') {\r\n         this.todo = this.todo.filter(t => t._id !== task._id);\r\n       } else if (list === 'inProgress') {\r\n         this.inProgress = this.inProgress.filter(t => t._id !== task._id);\r\n       } else if (list === 'done') {\r\n@@ -163,5 +163,21 @@\n       // Supprimer de la liste principale\r\n       this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task._id);\r\n       \r\n   }\r\n+\r\n+  openTaskDetails(task: any): void {\r\n+    const modalRef = this.modalService.open(TaskDetailsModalComponent, { size: 'xl', centered: true });\r\n+    modalRef.componentInstance.task = task;\r\n+    modalRef.componentInstance.phaseName = this.phase.name;\r\n+    \r\n+    modalRef.result.then((updatedTask) => {\r\n+      if (updatedTask) {\r\n+        // Mettre à jour la tâche dans le tableau approprié\r\n+        this.updateTaskInLists(updatedTask);\r\n+      }\r\n+    }).catch(() => {\r\n+      // Modal dismissed\r\n+    });\r\n+  }\r\n+  \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744726928303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,6 +178,23 @@\n     }).catch(() => {\r\n       // Modal dismissed\r\n     });\r\n   }\r\n-  \r\n+  updateTaskInLists(updatedTask: any): void {\r\n+    // Retirer la tâche de tous les tableaux\r\n+    this.todo = this.todo.filter(t => t._id !== updatedTask._id);\r\n+    this.inProgress = this.inProgress.filter(t => t._id !== updatedTask._id);\r\n+    this.done = this.done.filter(t => t._id !== updatedTask._id);\r\n+    \r\n+    // Ajouter la tâche dans le bon tableau selon son statut\r\n+    switch (updatedTask.status) {\r\n+      case 'PENDING':\r\n+        this.todo.push(updatedTask);\r\n+        break;\r\n+      case 'IN_PROGRESS':\r\n+        this.inProgress.push(updatedTask);\r\n+        break;\r\n+      case 'COMPLETED':\r\n+        this.done.push(updatedTask);\r\n+        break;\r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744730297248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n     }\r\n   }\r\n \r\n   deleteTask(task: any, list: string): void {\r\n-      if (list === 'todo') {\r\n+          if (list === 'todo') {\r\n         this.todo = this.todo.filter(t => t._id !== task._id);\r\n       } else if (list === 'inProgress') {\r\n         this.inProgress = this.inProgress.filter(t => t._id !== task._id);\r\n       } else if (list === 'done') {\r\n@@ -163,38 +163,5 @@\n       // Supprimer de la liste principale\r\n       this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task._id);\r\n       \r\n   }\r\n-\r\n-  openTaskDetails(task: any): void {\r\n-    const modalRef = this.modalService.open(TaskDetailsModalComponent, { size: 'xl', centered: true });\r\n-    modalRef.componentInstance.task = task;\r\n-    modalRef.componentInstance.phaseName = this.phase.name;\r\n-    \r\n-    modalRef.result.then((updatedTask) => {\r\n-      if (updatedTask) {\r\n-        // Mettre à jour la tâche dans le tableau approprié\r\n-        this.updateTaskInLists(updatedTask);\r\n-      }\r\n-    }).catch(() => {\r\n-      // Modal dismissed\r\n-    });\r\n-  }\r\n-  updateTaskInLists(updatedTask: any): void {\r\n-    // Retirer la tâche de tous les tableaux\r\n-    this.todo = this.todo.filter(t => t._id !== updatedTask._id);\r\n-    this.inProgress = this.inProgress.filter(t => t._id !== updatedTask._id);\r\n-    this.done = this.done.filter(t => t._id !== updatedTask._id);\r\n-    \r\n-    // Ajouter la tâche dans le bon tableau selon son statut\r\n-    switch (updatedTask.status) {\r\n-      case 'PENDING':\r\n-        this.todo.push(updatedTask);\r\n-        break;\r\n-      case 'IN_PROGRESS':\r\n-        this.inProgress.push(updatedTask);\r\n-        break;\r\n-      case 'COMPLETED':\r\n-        this.done.push(updatedTask);\r\n-        break;\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744730303822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n     }\r\n   }\r\n \r\n   deleteTask(task: any, list: string): void {\r\n-          if (list === 'todo') {\r\n+      if (list === 'todo') {\r\n         this.todo = this.todo.filter(t => t._id !== task._id);\r\n       } else if (list === 'inProgress') {\r\n         this.inProgress = this.inProgress.filter(t => t._id !== task._id);\r\n       } else if (list === 'done') {\r\n@@ -163,5 +163,7 @@\n       // Supprimer de la liste principale\r\n       this.phase.tasks = this.phase.tasks.filter((t: any) => t._id !== task._id);\r\n       \r\n   }\r\n+\r\n+  \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746359339264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       this.loadPhase(phaseId);\r\n     });\r\n   }\r\n \r\n-  loadPhase(phaseId: string): void {\r\n+  loadTasks(phaseId: string): void {\r\n     const mockPhases = [\r\n       {\r\n         _id: \"67c85299bae88e131703dd8e\",\r\n         name: \"Étude de Faisabilité\",\r\n"
                },
                {
                    "date": 1746359344770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n       const phaseId = params['phaseId'];\r\n-      this.loadPhase(phaseId);\r\n+      this.loadTasks(phaseId);\r\n     });\r\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n"
                },
                {
                    "date": 1746360023976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n     });\r\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n+    \r\n     const mockPhases = [\r\n       {\r\n         _id: \"67c85299bae88e131703dd8e\",\r\n         name: \"Étude de Faisabilité\",\r\n"
                },
                {
                    "date": 1746360029935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,57 +25,11 @@\n     });\r\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n-    \r\n-    const mockPhases = [\r\n-      {\r\n-        _id: \"67c85299bae88e131703dd8e\",\r\n-        name: \"Étude de Faisabilité\",\r\n-        description: \"Analyse des contraintes techniques et réglementaires.\",\r\n-        startDate: \"2025-01-10T00:00:00.000Z\",\r\n-        endDate: \"2025-02-10T00:00:00.000Z\",\r\n-        tasks: [\r\n-          {\r\n-            _id: \"67c8556dbae88e131703dda4\",\r\n-            name: \"Analyse des contraintes techniques\",\r\n-            description: \"Étudier les contraintes techniques du projet.\",\r\n-            status: \"PENDING\",\r\n-            priority: \"HIGH\",\r\n-            startDate: \"2025-01-10T00:00:00.000Z\",\r\n-            endDate: \"2025-01-30T00:00:00.000Z\",\r\n-            subTasks: [\r\n-              {\r\n-                _id: \"67d03bc0497c0e90359d6cb7\",\r\n-                name: \"Identifier les matériaux de construction\",\r\n-                description: \"Rechercher et lister les matériaux adaptés aux contraintes techniques.\",\r\n-                status: \"PENDING\",\r\n-                priority: \"MEDIUM\"\r\n-              }\r\n-            ]\r\n-          },\r\n-          {\r\n-            _id: \"67c8556dbae88e131703dda5\",\r\n-            name: \"Analyse des contraintes réglementaires\",\r\n-            description: \"Vérifier les normes et réglementations applicables.\",\r\n-            status: \"IN_PROGRESS\",\r\n-            priority: \"MEDIUM\",\r\n-            startDate: \"2025-01-15T00:00:00.000Z\",\r\n-            endDate: \"2025-02-05T00:00:00.000Z\",\r\n-            subTasks: []\r\n-          }\r\n-        ]\r\n-      },\r\n-      {\r\n-        _id: \"67c852e7bae88e131703dd92\",\r\n-        name: \"Conception Détaillée\",\r\n-        description: \"Élaboration des plans détaillés.\",\r\n-        startDate: \"2025-02-15T00:00:00.000Z\",\r\n-        endDate: \"2025-03-20T00:00:00.000Z\",\r\n-        tasks: []\r\n-      }\r\n-    ];\r\n \r\n+   \r\n+\r\n     this.phase = mockPhases.find(p => p._id === phaseId);\r\n     this.organizeTasks();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746360035392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   loadTasks(phaseId: string): void {\r\n \r\n    \r\n \r\n-    this.phase = mockPhases.find(p => p._id === phaseId);\r\n+    \r\n     this.organizeTasks();\r\n   }\r\n \r\n   organizeTasks(): void {\r\n"
                },
                {
                    "date": 1746360120767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,23 @@\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n \r\n-   \r\n+    this.projectService.getphaseByIdProject(this.projectId).subscribe({\r\n+      next: (phase) => {\r\n+        this.phases = phase;\r\n+        \r\n+        // Appliquer le filtre une fois les projets chargés\r\n+        console.log(\"les phases\",this.phases);\r\n+        // Pour chaque projet, récupérer les détails des phases\r\n+      \r\n+        \r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Erreur lors de la récupération des projets:', err);\r\n+        \r\n+      }\r\n+    });\r\n \r\n     \r\n     this.organizeTasks();\r\n   }\r\n"
                },
                {
                    "date": 1746360127155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n-  constructor(private router: Router, private route: ActivatedRoute) {}\r\n+  constructor(private router: Router, private route: ActivatedRoute, ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n"
                },
                {
                    "date": 1746360132497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,11 @@\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n-  constructor(private router: Router, private route: ActivatedRoute, ) {}\r\n+  constructor(private router: Router, private route: ActivatedRoute, \r\n+    private \r\n+  ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n"
                },
                {
                    "date": 1746360139427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n-    private \r\n+    private project\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n"
                },
                {
                    "date": 1746360145241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n-    private project\r\n+    private projectService:\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n"
                },
                {
                    "date": 1746360150490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n-    private projectService:\r\n+    private projectService:Proj\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n"
                },
                {
                    "date": 1746360156444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n import { Component, Input, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n+import { Project } from '../projects/projects.component';\r\n+import { ProjectService } from '../../services/ProjectService';\r\n \r\n @Component({\r\n   selector: 'app-tasks',\r\n   templateUrl: './tasks.component.html',\r\n@@ -15,9 +17,9 @@\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n-    private projectService:Proj\r\n+    private projectService:ProjectService\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n"
                },
                {
                    "date": 1746360162023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n \r\n-    this.projectService.getphaseByIdProject(this.projectId).subscribe({\r\n+    this.projectService.get(this.projectId).subscribe({\r\n       next: (phase) => {\r\n         this.phases = phase;\r\n         \r\n         // Appliquer le filtre une fois les projets chargés\r\n"
                },
                {
                    "date": 1746360172026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n \r\n-    this.projectService.get(this.projectId).subscribe({\r\n+    this.projectService.getTaskByPhase(  loadTasks(phaseId: string): void {\r\n+    ).subscribe({\r\n       next: (phase) => {\r\n         this.phases = phase;\r\n         \r\n         // Appliquer le filtre une fois les projets chargés\r\n"
                },
                {
                    "date": 1746360181276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,9 @@\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n \r\n-    this.projectService.getTaskByPhase(  loadTasks(phaseId: string): void {\r\n-    ).subscribe({\r\n+    this.projectService.getTaskByPhase(phaseId).subscribe({\r\n       next: (phase) => {\r\n         this.phases = phase;\r\n         \r\n         // Appliquer le filtre une fois les projets chargés\r\n"
                },
                {
                    "date": 1746360190018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n })\r\n export class TasksComponent implements OnInit {\r\n   @Input()phase: any;\r\n   projectId: string = '';\r\n-  \r\n+  tasks\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n"
                },
                {
                    "date": 1746360198231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n })\r\n export class TasksComponent implements OnInit {\r\n   @Input()phase: any;\r\n   projectId: string = '';\r\n-  tasks\r\n+  tasks:any[]=[]\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n"
                },
                {
                    "date": 1746360204002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n })\r\n export class TasksComponent implements OnInit {\r\n   @Input()phase: any;\r\n   projectId: string = '';\r\n-  tasks:any[]=[]\r\n+  tasks:any[]=[];\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n \r\n@@ -32,9 +32,9 @@\n   loadTasks(phaseId: string): void {\r\n \r\n     this.projectService.getTaskByPhase(phaseId).subscribe({\r\n       next: (phase) => {\r\n-        this.phases = phase;\r\n+        this.tasks = phase;\r\n         \r\n         // Appliquer le filtre une fois les projets chargés\r\n         console.log(\"les phases\",this.phases);\r\n         // Pour chaque projet, récupérer les détails des phases\r\n"
                },
                {
                    "date": 1746360209180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n \r\n   loadTasks(phaseId: string): void {\r\n \r\n     this.projectService.getTaskByPhase(phaseId).subscribe({\r\n-      next: (phase) => {\r\n-        this.tasks = phase;\r\n+      next: (task) => {\r\n+        this.tasks = task;\r\n         \r\n         // Appliquer le filtre une fois les projets chargés\r\n         console.log(\"les phases\",this.phases);\r\n         // Pour chaque projet, récupérer les détails des phases\r\n"
                },
                {
                    "date": 1746360216394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n       next: (task) => {\r\n         this.tasks = task;\r\n         \r\n         // Appliquer le filtre une fois les projets chargés\r\n-        console.log(\"les phases\",this.phases);\r\n+        console.log(\"les tasks\",this.tasks);\r\n         // Pour chaque projet, récupérer les détails des phases\r\n       \r\n         \r\n       },\r\n"
                },
                {
                    "date": 1746360227432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     this.organizeTasks();\r\n   }\r\n \r\n   organizeTasks(): void {\r\n-    this.todo = this.phase.tasks.filter((task: any) => task.status === 'PENDING');\r\n+    this.todo = this.tasks.filter((task: any) => task.status === 'PENDING');\r\n     this.inProgress = this.phase.tasks.filter((task: any) => task.status === 'IN_PROGRESS');\r\n     this.done = this.phase.tasks.filter((task: any) => task.status === 'COMPLETED');\r\n   }\r\n   switchPhase(newPhase: any) {\r\n"
                },
                {
                    "date": 1746360233453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,10 @@\n   }\r\n \r\n   organizeTasks(): void {\r\n     this.todo = this.tasks.filter((task: any) => task.status === 'PENDING');\r\n-    this.inProgress = this.phase.tasks.filter((task: any) => task.status === 'IN_PROGRESS');\r\n-    this.done = this.phase.tasks.filter((task: any) => task.status === 'COMPLETED');\r\n+    this.inProgress = this.tasks.filter((task: any) => task.status === 'IN_PROGRESS');\r\n+    this.done = this.tasks.filter((task: any) => task.status === 'COMPLETED');\r\n   }\r\n   switchPhase(newPhase: any) {\r\n     if (newPhase._id !== this.phase?._id) {\r\n       this.router.navigate(['phase', newPhase._id], {\r\n"
                },
                {
                    "date": 1746360424352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n+      console.log\r\n       const phaseId = params['phaseId'];\r\n       this.loadTasks(phaseId);\r\n     });\r\n   }\r\n"
                },
                {
                    "date": 1746360431704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,11 @@\n \r\n   ngOnInit(): void {\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n-      console.log\r\n+      console.log('Project ID:', this.projectId);\r\n       const phaseId = params['phaseId'];\r\n+      con\r\n       this.loadTasks(phaseId);\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746360437107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n       console.log('Project ID:', this.projectId);\r\n       const phaseId = params['phaseId'];\r\n-      con\r\n+      console.log('Phase ID:', phaseId);\r\n       this.loadTasks(phaseId);\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746360804003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   tasks:any[]=[];\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n-\r\n+  phase\r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n     private projectService:ProjectService\r\n   ) {}\r\n \r\n"
                },
                {
                    "date": 1746360811487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   tasks:any[]=[];\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n-  phase\r\n+  phase:any;\r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n     private projectService:ProjectService\r\n   ) {}\r\n \r\n"
                },
                {
                    "date": 1746360830235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   tasks:any[]=[];\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n-  phase:any;\r\n+  phase!:any;\r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n     private projectService:ProjectService\r\n   ) {}\r\n \r\n"
                },
                {
                    "date": 1746360841080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   templateUrl: './tasks.component.html',\r\n   styleUrls: ['./tasks.component.scss']\r\n })\r\n export class TasksComponent implements OnInit {\r\n-  @Input()phase: any;\r\n+  \r\n   projectId: string = '';\r\n   tasks:any[]=[];\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n"
                },
                {
                    "date": 1746360849921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,15 @@\n   tasks:any[]=[];\r\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n-  phase!:any;\r\n+  phase:any;\r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n     private projectService:ProjectService\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n+    this.phase = history.state.phaseData;\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n       console.log('Project ID:', this.projectId);\r\n       const phaseId = params['phaseId'];\r\n"
                },
                {
                    "date": 1746360856648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.phase = history.state.phaseData;\r\n+    console.log()\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n       console.log('Project ID:', this.projectId);\r\n       const phaseId = params['phaseId'];\r\n"
                },
                {
                    "date": 1746360864507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.phase = history.state.phaseData;\r\n-    console.log()\r\n+    console.log(\"phase dans task\")\r\n     this.route.params.subscribe(params => {\r\n       this.projectId = params['id'];\r\n       console.log('Project ID:', this.projectId);\r\n       const phaseId = params['phaseId'];\r\n"
                },
                {
                    "date": 1746360901105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   todo: any[] = [];\r\n   inProgress: any[] = [];\r\n   done: any[] = [];\r\n   phase:any;\r\n-  projet:any\r\n+  projet:any.\r\n   constructor(private router: Router, private route: ActivatedRoute, \r\n     private projectService:ProjectService\r\n   ) {}\r\n \r\n"
                },
                {
                    "date": 1746360948389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   ngOnInit(): void {\r\n     this.phase = history.state.phaseData;\r\n     this.projet = history.state.projectData;\r\n     console.log(\"phase dans task\",this.phase)\r\n-    this.loadTasks(thisphase.id);\r\n+    this.loadTasks(this.phase.id);\r\n    \r\n   }\r\n \r\n   loadTasks(phaseId: string): void {\r\n"
                }
            ],
            "date": 1744707473598,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tasks',\r\n  templateUrl: './tasks.component.html',\r\n  styleUrl: './tasks.component.scss'\r\n})\r\nexport class TasksComponent {\r\n  @Input() phase: any;\r\n  \r\n  todo: any[] = [];\r\n  inProgress: any[] = [];\r\n  done: any[] = [];\r\n\r\n  constructor(private router: Router, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.phase) {\r\n      // Initialiser les tâches (c'est un exemple, adaptez selon votre structure)\r\n      this.todo = this.phase.tasks.map((task: string) => ({\r\n        id: Math.random().toString(36).substring(2),\r\n        name: task,\r\n        status: 'todo'\r\n      }));\r\n    }\r\n  }\r\n\r\n  drop(event: CdkDragDrop<any[]>) {\r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } else {\r\n      transferArrayItem(\r\n        event.previousContainer.data,\r\n        event.container.data,\r\n        event.previousIndex,\r\n        event.currentIndex\r\n      );\r\n      // Mettre à jour le statut des tâches\r\n      this.updateTaskStatus();\r\n    }\r\n  }\r\n\r\n  updateTaskStatus() {\r\n    this.todo.forEach(task => task.status = 'todo');\r\n    this.inProgress.forEach(task => task.status = 'inProgress');\r\n    this.done.forEach(task => task.status = 'done');\r\n  }\r\n\r\n  goBack() {\r\n    this.router.navigate(['../'], { relativeTo: this.route });\r\n  }\r\n\r\n  addTask() {\r\n    const taskName = prompt('Entrez le nom de la nouvelle tâche:');\r\n    if (taskName) {\r\n      this.todo.push({\r\n        id: Math.random().toString(36).substring(2),\r\n        name: taskName,\r\n        status: 'todo'\r\n      });\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}