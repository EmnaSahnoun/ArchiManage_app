{
    "sourceFile": "src/app/shared/project-access/project-access.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 66,
            "patches": [
                {
                    "date": 1746290347000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746290352538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,21 @@\n   selector: 'app-project-access',\r\n   templateUrl: './project-access.component.html',\r\n   styleUrl: './project-access.component.scss'\r\n })\r\n+//interface\r\n+export interface ProjectAccessData {\r\n+  projectId: string;\r\n+  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n+  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n+}\r\n \r\n+// Interface pour représenter un utilisateur avec son état d'accès\r\n+interface UserAccess {\r\n+  id: string;\r\n+  username: string; // Ou firstName + lastName\r\n+  email: string;\r\n+  canView: boolean;\r\n+}\r\n export class ProjectAccessComponent {\r\n \r\n }\r\n"
                },
                {
                    "date": 1746290367349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,20 +5,8 @@\n   templateUrl: './project-access.component.html',\r\n   styleUrl: './project-access.component.scss'\r\n })\r\n //interface\r\n-export interface ProjectAccessData {\r\n-  projectId: string;\r\n-  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n-  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n-}\r\n \r\n-// Interface pour représenter un utilisateur avec son état d'accès\r\n-interface UserAccess {\r\n-  id: string;\r\n-  username: string; // Ou firstName + lastName\r\n-  email: string;\r\n-  canView: boolean;\r\n-}\r\n export class ProjectAccessComponent {\r\n \r\n }\r\n"
                },
                {
                    "date": 1746290414447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,113 @@\n import { Component } from '@angular/core';\r\n+export interface ProjectAccessData {\r\n+  projectId: string;\r\n+  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n+  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n+}\r\n \r\n+// Interface pour représenter un utilisateur avec son état d'accès\r\n+interface UserAccess {\r\n+  id: string;\r\n+  username: string; // Ou firstName + lastName\r\n+  email: string;\r\n+  canView: boolean;\r\n+}\r\n @Component({\r\n   selector: 'app-project-access',\r\n   templateUrl: './project-access.component.html',\r\n   styleUrl: './project-access.component.scss'\r\n })\r\n //interface\r\n \r\n export class ProjectAccessComponent {\r\n+  isLoading = false;\r\n+  searchQuery = '';\r\n+  allUsers: UserAccess[] = []; // Tous les utilisateurs potentiels avec leur état d'accès\r\n+  filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n \r\n+  constructor(\r\n+    public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n+    @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n+    private agenceService: AgenceService,\r\n+    private projectService: ProjectService,\r\n+    private snackBar: MatSnackBar\r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    this.loadUsersAndAccess();\r\n+  }\r\n+\r\n+  loadUsersAndAccess(): void {\r\n+    this.isLoading = true;\r\n+    // Récupérer tous les utilisateurs de l'agence\r\n+    this.agenceService.getUsersByAgenceId(this.data.agenceId).subscribe({\r\n+      next: (users) => {\r\n+        // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n+        this.allUsers = users.map(user => {\r\n+          // Trouver l'accès actuel pour cet utilisateur, s'il existe\r\n+          const currentAccess = this.data.currentAccess.find(acc => acc.userId === user.id);\r\n+          return {\r\n+            id: user.id,\r\n+            username: user.username, // ou `${user.firstName} ${user.lastName}`\r\n+            email: user.email,\r\n+            canView: currentAccess ? currentAccess.canView : false // Par défaut, pas d'accès\r\n+          };\r\n+        });\r\n+        this.applyFilter(); // Appliquer le filtre initial (ou afficher tout)\r\n+        this.isLoading = false;\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Erreur lors du chargement des utilisateurs:', err);\r\n+        this.snackBar.open('Erreur lors du chargement des utilisateurs', 'Fermer', { duration: 3000 });\r\n+        this.isLoading = false;\r\n+        this.dialogRef.close(); // Fermer le modal en cas d'erreur critique\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  applyFilter(): void {\r\n+    const query = this.searchQuery.toLowerCase().trim();\r\n+    if (!query) {\r\n+      this.filteredUsers = [...this.allUsers];\r\n+    } else {\r\n+      this.filteredUsers = this.allUsers.filter(user =>\r\n+        user.username.toLowerCase().includes(query) ||\r\n+        user.email.toLowerCase().includes(query)\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  onSave(): void {\r\n+    this.isLoading = true;\r\n+    // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n+    const accessUpdates = this.allUsers.map(user => ({\r\n+      userId: user.id,\r\n+      canView: user.canView\r\n+    }));\r\n+\r\n+    // Appeler le service pour mettre à jour les accès\r\n+    // NOTE: Vous devrez peut-être créer cette méthode dans ProjectService\r\n+    this.projectService.updateProjectAccess(this.data.projectId, accessUpdates).subscribe({\r\n+      next: () => {\r\n+        this.isLoading = false;\r\n+        this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n+        this.dialogRef.close(true); // Fermer et indiquer le succès\r\n+      },\r\n+      error: (err) => {\r\n+        this.isLoading = false;\r\n+        console.error('Erreur lors de la mise à jour des accès:', err);\r\n+        this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n+        // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  onCancel(): void {\r\n+    this.dialogRef.close(); // Fermer sans sauvegarder\r\n+  }\r\n+\r\n+  // Optionnel: Pour suivre les éléments dans *ngFor pour de meilleures performances\r\n+  trackByUser(index: number, item: UserAccess): string {\r\n+    return item.id;\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1746290433185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,11 @@\n import { Component } from '@angular/core';\r\n+import { Component, Inject, OnInit } from '@angular/core';\r\n+import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n+import { MatSnackBar } from '@angular/material/snack-bar';\r\n+import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n+import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n+\r\n export interface ProjectAccessData {\r\n   projectId: string;\r\n   agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n   currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n"
                },
                {
                    "date": 1746290760649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-import { Component } from '@angular/core';\r\n import { Component, Inject, OnInit } from '@angular/core';\r\n import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n@@ -45,9 +44,9 @@\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n     // Récupérer tous les utilisateurs de l'agence\r\n-    this.agenceService.getUsersByAgenceId(this.data.agenceId).subscribe({\r\n+    this.projectService.getUsersByAgenceId(this.data.agenceId).subscribe({\r\n       next: (users) => {\r\n         // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n         this.allUsers = users.map(user => {\r\n           // Trouver l'accès actuel pour cet utilisateur, s'il existe\r\n"
                },
                {
                    "date": 1746290800634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; // Tous les utilisateurs potentiels avec leur état d'accès\r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n-\r\n+  @Inp\r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n     @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n     private agenceService: AgenceService,\r\n@@ -44,9 +44,9 @@\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n     // Récupérer tous les utilisateurs de l'agence\r\n-    this.projectService.getUsersByAgenceId(this.data.agenceId).subscribe({\r\n+    this.projectService.getPhaseAccessByIdPhase(this.data.agenceId).subscribe({\r\n       next: (users) => {\r\n         // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n         this.allUsers = users.map(user => {\r\n           // Trouver l'accès actuel pour cet utilisateur, s'il existe\r\n"
                },
                {
                    "date": 1746290807976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,10 @@\n   isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; // Tous les utilisateurs potentiels avec leur état d'accès\r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n-  @Inp\r\n+  @Input() project: any;\r\n+\r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n     @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n     private agenceService: AgenceService,\r\n"
                },
                {
                    "date": 1746290822783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, Inject, OnInit } from '@angular/core';\r\n+import { Component, Inject, Input, OnInit } from '@angular/core';\r\n import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n@@ -28,9 +28,9 @@\n   isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; // Tous les utilisateurs potentiels avec leur état d'accès\r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n-  @Input() project: any;\r\n+  @Input() idPhase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n     @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n"
                },
                {
                    "date": 1746290835983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n     // Récupérer tous les utilisateurs de l'agence\r\n-    this.projectService.getPhaseAccessByIdPhase(this.data.agenceId).subscribe({\r\n+    this.projectService.getPhaseAccessByIdPhase(this.idPhase).subscribe({\r\n       next: (users) => {\r\n         // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n         this.allUsers = users.map(user => {\r\n           // Trouver l'accès actuel pour cet utilisateur, s'il existe\r\n"
                },
                {
                    "date": 1746290848132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n     // Récupérer tous les utilisateurs de l'agence\r\n     this.projectService.getPhaseAccessByIdPhase(this.idPhase).subscribe({\r\n-      next: (users) => {\r\n+      next: (phaseacces) => {\r\n         // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n         this.allUsers = users.map(user => {\r\n           // Trouver l'accès actuel pour cet utilisateur, s'il existe\r\n           const currentAccess = this.data.currentAccess.find(acc => acc.userId === user.id);\r\n"
                },
                {
                    "date": 1746290854539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,18 +48,9 @@\n     // Récupérer tous les utilisateurs de l'agence\r\n     this.projectService.getPhaseAccessByIdPhase(this.idPhase).subscribe({\r\n       next: (phaseacces) => {\r\n         // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n-        this.allUsers = users.map(user => {\r\n-          // Trouver l'accès actuel pour cet utilisateur, s'il existe\r\n-          const currentAccess = this.data.currentAccess.find(acc => acc.userId === user.id);\r\n-          return {\r\n-            id: user.id,\r\n-            username: user.username, // ou `${user.firstName} ${user.lastName}`\r\n-            email: user.email,\r\n-            canView: currentAccess ? currentAccess.canView : false // Par défaut, pas d'accès\r\n-          };\r\n-        });\r\n+        \r\n         this.applyFilter(); // Appliquer le filtre initial (ou afficher tout)\r\n         this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n"
                },
                {
                    "date": 1746290873889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n       );\r\n     }\r\n   }\r\n \r\n-  onSave(): void {\r\n+ /*  onSave(): void {\r\n     this.isLoading = true;\r\n     // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n     const accessUpdates = this.allUsers.map(user => ({\r\n       userId: user.id,\r\n@@ -96,9 +96,9 @@\n         this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n         // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n       }\r\n     });\r\n-  }\r\n+  } */\r\n \r\n   onCancel(): void {\r\n     this.dialogRef.close(); // Fermer sans sauvegarder\r\n   }\r\n"
                },
                {
                    "date": 1746291680404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; // Tous les utilisateurs potentiels avec leur état d'accès\r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n-  @Input() idPhase: any;\r\n+  @Input() phashase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n     @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n"
                },
                {
                    "date": 1746291692054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; // Tous les utilisateurs potentiels avec leur état d'accès\r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n-  @Input() phashase: any;\r\n+  @Input() phase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n     @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n@@ -45,9 +45,9 @@\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n     // Récupérer tous les utilisateurs de l'agence\r\n-    this.projectService.getPhaseAccessByIdPhase(this.idPhase).subscribe({\r\n+    this.projectService.getPhaseAccessByIdPhase(this.phase.idPhase).subscribe({\r\n       next: (phaseacces) => {\r\n         // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n         \r\n         this.applyFilter(); // Appliquer le filtre initial (ou afficher tout)\r\n"
                },
                {
                    "date": 1746292366849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,21 +44,47 @@\n   }\r\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n-    // Récupérer tous les utilisateurs de l'agence\r\n-    this.projectService.getPhaseAccessByIdPhase(this.phase.idPhase).subscribe({\r\n-      next: (phaseacces) => {\r\n-        // Mapper les utilisateurs récupérés vers notre interface UserAccess\r\n-        \r\n-        this.applyFilter(); // Appliquer le filtre initial (ou afficher tout)\r\n-        this.isLoading = false;\r\n+    \r\n+    this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n+      next: (phaseAccesses) => {\r\n+        // Créer un tableau pour stocker toutes les requêtes\r\n+        const userRequests = phaseAccesses.map(access => \r\n+          this.projectService.getUserById(access.idUser).pipe(\r\n+            map(user => ({\r\n+              ...access, // Conserver les données d'accès originales\r\n+              username: user.username // Ajouter le username\r\n+            }))\r\n+          )\r\n+        );\r\n+  \r\n+        // Exécuter toutes les requêtes en parallèle\r\n+        forkJoin(userRequests).subscribe({\r\n+          next: (usersWithAccess) => {\r\n+            // Maintenant usersWithAccess contient les accès avec les usernames\r\n+            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n+            \r\n+            // Vous pouvez maintenant traiter les données comme vous le souhaitez\r\n+            // Par exemple, extraire juste les usernames:\r\n+            const usernames = usersWithAccess.map(u => u.username);\r\n+            console.log('Usernames:', usernames);\r\n+            \r\n+            this.applyFilter();\r\n+            this.isLoading = false;\r\n+          },\r\n+          error: (err) => {\r\n+            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n+            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n+            this.isLoading = false;\r\n+          }\r\n+        });\r\n       },\r\n       error: (err) => {\r\n-        console.error('Erreur lors du chargement des utilisateurs:', err);\r\n-        this.snackBar.open('Erreur lors du chargement des utilisateurs', 'Fermer', { duration: 3000 });\r\n+        console.error('Erreur lors du chargement des accès:', err);\r\n+        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n         this.isLoading = false;\r\n-        this.dialogRef.close(); // Fermer le modal en cas d'erreur critique\r\n+        this.dialogRef.close();\r\n       }\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746292380087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n       next: (phaseAccesses) => {\r\n         // Créer un tableau pour stocker toutes les requêtes\r\n         const userRequests = phaseAccesses.map(access => \r\n-          this.projectService.getUserById(access.idUser).pipe(\r\n+          this.agen.getUserById(access.idUser).pipe(\r\n             map(user => ({\r\n               ...access, // Conserver les données d'accès originales\r\n               username: user.username // Ajouter le username\r\n             }))\r\n"
                },
                {
                    "date": 1746292395767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n+import { forkJoin, map } from 'rxjs';\r\n \r\n export interface ProjectAccessData {\r\n   projectId: string;\r\n   agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n@@ -49,9 +50,9 @@\n     this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n       next: (phaseAccesses) => {\r\n         // Créer un tableau pour stocker toutes les requêtes\r\n         const userRequests = phaseAccesses.map(access => \r\n-          this.agen.getUserById(access.idUser).pipe(\r\n+          this.agenceService.getUserById(access.idUser).pipe(\r\n             map(user => ({\r\n               ...access, // Conserver les données d'accès originales\r\n               username: user.username // Ajouter le username\r\n             }))\r\n"
                },
                {
                    "date": 1746292455364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,11 +63,8 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            \r\n-            // Vous pouvez maintenant traiter les données comme vous le souhaitez\r\n-            // Par exemple, extraire juste les usernames:\r\n             const usernames = usersWithAccess.map(u => u.username);\r\n             console.log('Usernames:', usernames);\r\n             \r\n             this.applyFilter();\r\n"
                },
                {
                    "date": 1746292460593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            const usernames = usersWithAccess.map(u => u.username);\r\n+            this.usernames = usersWithAccess.map(u => u.username);\r\n             console.log('Usernames:', usernames);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n"
                },
                {
                    "date": 1746292468848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.usernames = usersWithAccess.map(u => u.username);\r\n+            this.users = usersWithAccess.map(u => u.username);\r\n             console.log('Usernames:', usernames);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n"
                },
                {
                    "date": 1746292478417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n \r\n export class ProjectAccessComponent {\r\n   isLoading = false;\r\n   searchQuery = '';\r\n-  allUsers: UserAccess[] = []; // Tous les utilisateurs potentiels avec leur état d'accès\r\n+  allUsers: UserAccess[] = []; \r\n+  \r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n"
                },
                {
                    "date": 1746292502664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n export class ProjectAccessComponent {\r\n   isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; \r\n-  \r\n+  // Liste des usernames\r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n"
                },
                {
                    "date": 1746292511585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n export class ProjectAccessComponent {\r\n   isLoading = false;\r\n   searchQuery = '';\r\n   allUsers: UserAccess[] = []; \r\n-  // Liste des usernames\r\n+ \r\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n@@ -64,9 +64,9 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.users = usersWithAccess.map(u => u.username);\r\n+            this.allUserssWithAccess.map(u => u.username);\r\n             console.log('Usernames:', usernames);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n"
                },
                {
                    "date": 1746292528875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.allUserssWithAccess.map(u => u.username);\r\n+            this.allUsersers = usersWithAccess.map(u => u.username);\r\n             console.log('Usernames:', usernames);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n"
                },
                {
                    "date": 1746292587526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,10 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.allUsersers = usersWithAccess.map(u => u.username);\r\n-            console.log('Usernames:', usernames);\r\n+            this.allUsers = usersWithAccess.map(u => u.username);\r\n+            console.log('Usernames:', usernnnes);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n           },\r\n"
                },
                {
                    "date": 1746292596992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n             this.allUsers = usersWithAccess.map(u => u.username);\r\n-            console.log('Usernames:', usernnnes);\r\n+            console.log('Usernames:', a);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n           },\r\n"
                },
                {
                    "date": 1746292604144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n             this.allUsers = usersWithAccess.map(u => u.username);\r\n-            console.log('Usernames:', a);\r\n+            console.log('Usernames:', usernnnes);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n           },\r\n"
                },
                {
                    "date": 1746292611550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n             this.allUsers = usersWithAccess.map(u => u.username);\r\n-            console.log('Usernames:', usernnnes);\r\n+            console.log('Usernames:', allrnnnes);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n           },\r\n"
                },
                {
                    "date": 1746292625734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n             this.allUsers = usersWithAccess.map(u => u.username);\r\n-            console.log('Usernames:', allrnnnes);\r\n+            console.log('Usernames:',thllUsers);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n           },\r\n"
                },
                {
                    "date": 1746292631204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n             this.allUsers = usersWithAccess.map(u => u.username);\r\n-            console.log('Usernames:',thllUsers);\r\n+            console.log('Usernames:', allUsers);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n           },\r\n"
                },
                {
                    "date": 1746292709920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,10 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.allUsers = usersWithAccess.map(u => u.username);\r\n-            console.log('Usernames:', allUsers);\r\n+            this.allUsers = usersWithAccess\r\n+            console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n           },\r\n"
                },
                {
                    "date": 1746295225291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   @Input() phase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n-    @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n+    \r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n   ) {}\r\n"
                },
                {
                    "date": 1746295363955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n-    public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n     \r\n+    \r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n   ) {}\r\n"
                },
                {
                    "date": 1746295375732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n+    public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n     \r\n-    \r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n   ) {}\r\n"
                },
                {
                    "date": 1746295460604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   @Input() phase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n-    \r\n+    @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n   ) {}\r\n"
                },
                {
                    "date": 1746295764757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   @Input() phase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n-    @Inject(MAT_DIALOG_DATA) public data: ProjectAccessData,\r\n+    \r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n   ) {}\r\n"
                },
                {
                    "date": 1746295778230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n   @Input() phase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n-    \r\n+    public activeModal: NgbActiveModal,\r\n+\r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n   ) {}\r\n"
                },
                {
                    "date": 1746295783328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n   @Input() phase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n-    public activeModal: NgbActiveModal,\r\n+    public activeModal: NgbActiveModal\r\n+    ,\r\n \r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n"
                },
                {
                    "date": 1746295790375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n import { forkJoin, map } from 'rxjs';\r\n+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n \r\n export interface ProjectAccessData {\r\n   projectId: string;\r\n   agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n@@ -34,10 +35,9 @@\n   @Input() phase: any;\r\n \r\n   constructor(\r\n     public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n-    public activeModal: NgbActiveModal\r\n-    ,\r\n+    public activeModal: NgbActiveModal,\r\n \r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n     private snackBar: MatSnackBar\r\n"
                },
                {
                    "date": 1746296026971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import { Component, Inject, Input, OnInit } from '@angular/core';\r\n-import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n import { forkJoin, map } from 'rxjs';\r\n"
                },
                {
                    "date": 1746296032580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n   @Input() phase: any;\r\n \r\n   constructor(\r\n-    public dialogRef: MatDialogRef<ProjectAccessComponent>,\r\n+    \r\n     public activeModal: NgbActiveModal,\r\n \r\n     private agenceService: AgenceService,\r\n     private projectService: ProjectService,\r\n"
                },
                {
                    "date": 1746296073767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,8 @@\n       error: (err) => {\r\n         console.error('Erreur lors du chargement des accès:', err);\r\n         this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n         this.isLoading = false;\r\n-        this.dialogRef.close();\r\n       }\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746296086127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n       error: (err) => {\r\n         console.error('Erreur lors du chargement des accès:', err);\r\n         this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n         this.isLoading = false;\r\n+        this.activeModal.dismiss();\r\n       }\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746296092538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     });\r\n   } */\r\n \r\n   onCancel(): void {\r\n-    this.dialogRef.close(); // Fermer sans sauvegarder\r\n+    this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n   }\r\n \r\n   // Optionnel: Pour suivre les éléments dans *ngFor pour de meilleures performances\r\n   trackByUser(index: number, item: UserAccess): string {\r\n"
                },
                {
                    "date": 1746296291119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,9 @@\n   }\r\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n-    \r\n-    this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n+        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n       next: (phaseAccesses) => {\r\n         // Créer un tableau pour stocker toutes les requêtes\r\n         const userRequests = phaseAccesses.map(access => \r\n           this.agenceService.getUserById(access.idUser).pipe(\r\n"
                },
                {
                    "date": 1746296298096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n     private snackBar: MatSnackBar\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n+    console.log()\r\n     this.loadUsersAndAccess();\r\n   }\r\n \r\n   loadUsersAndAccess(): void {\r\n"
                },
                {
                    "date": 1746296305456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     private snackBar: MatSnackBar\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    console.log()\r\n+    console.log('Phase:', this.phase)\r\n     this.loadUsersAndAccess();\r\n   }\r\n \r\n   loadUsersAndAccess(): void {\r\n"
                },
                {
                    "date": 1746296412206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,16 +42,17 @@\n     private snackBar: MatSnackBar\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    console.log('Phase:', this.phase)\r\n+    console.log('Phase:', this.phase);\r\n     this.loadUsersAndAccess();\r\n   }\r\n \r\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n         this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n       next: (phaseAccesses) => {\r\n+        con\r\n         // Créer un tableau pour stocker toutes les requêtes\r\n         const userRequests = phaseAccesses.map(access => \r\n           this.agenceService.getUserById(access.idUser).pipe(\r\n             map(user => ({\r\n"
                },
                {
                    "date": 1746297156817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n }\r\n \r\n // Interface pour représenter un utilisateur avec son état d'accès\r\n-interface UserAccess {\r\n+export interface UserAccess {\r\n   id: string;\r\n   username: string; // Ou firstName + lastName\r\n   email: string;\r\n   canView: boolean;\r\n@@ -50,9 +50,10 @@\n   loadUsersAndAccess(): void {\r\n     this.isLoading = true;\r\n         this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n       next: (phaseAccesses) => {\r\n-        con\r\n+        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n+  \r\n         // Créer un tableau pour stocker toutes les requêtes\r\n         const userRequests = phaseAccesses.map(access => \r\n           this.agenceService.getUserById(access.idUser).pipe(\r\n             map(user => ({\r\n"
                },
                {
                    "date": 1746297212468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,11 @@\n         const userRequests = phaseAccesses.map(access => \r\n           this.agenceService.getUserById(access.idUser).pipe(\r\n             map(user => ({\r\n               ...access, // Conserver les données d'accès originales\r\n-              username: user.username // Ajouter le username\r\n+              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n+              username: user.username, // Ajouter le username\r\n+              email: user.email \r\n             }))\r\n           )\r\n         );\r\n   \r\n"
                },
                {
                    "date": 1746297240342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,14 @@\n         forkJoin(userRequests).subscribe({\r\n           next: (usersWithAccess) => {\r\n             // Maintenant usersWithAccess contient les accès avec les usernames\r\n             console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.allUsers = usersWithAccess\r\n+            this.allUsers = usersWithAccess.map(u => ({\r\n+              id: u.idUser, // User ID\r\n+              username: u.username || 'N/A', // Provide fallback\r\n+              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n+              canView: u.canView // Get canView from the original access object\r\n+            }));\r\n             console.log('Usernames:', this.allUsers);\r\n             \r\n             this.applyFilter();\r\n             this.isLoading = false;\r\n"
                },
                {
                    "date": 1746297261355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,10 +102,11 @@\n     if (!query) {\r\n       this.filteredUsers = [...this.allUsers];\r\n     } else {\r\n       this.filteredUsers = this.allUsers.filter(user =>\r\n-        user.username.toLowerCase().includes(query) ||\r\n-        user.email.toLowerCase().includes(query)\r\n+        (user.username && user.username.toLowerCase().includes(query)) || // Safe check\r\n+        (user.email && user.email.toLowerCase().includes(query)) // Safe check\r\n+     \r\n       );\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1746297329759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { Component, Inject, Input, OnInit } from '@angular/core';\r\n+import { MatSnackBar } from '@angular/material/snack-bar';\r\n+import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n+import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n+import { forkJoin, map } from 'rxjs';\r\n+import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n+\r\n+export interface ProjectAccessData {\r\n+  projectId: string;\r\n+  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n+  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n+}\r\n+\r\n+// Interface pour représenter un utilisateur avec son état d'accès\r\n+export interface UserAccess {\r\n+  id: string;\r\n+  username: string; // Ou firstName + lastName\r\n+  email: string;\r\n+  canView: boolean;\r\n+}\r\n+@Component({\r\n+  selector: 'app-project-access',\r\n+  templateUrl: './project-access.component.html',\r\n+  styleUrl: './project-access.component.scss'\r\n+})\r\n+//interface\r\n+\r\n+export class ProjectAccessComponent {\r\n+  isLoading = false;\r\n+  searchQuery = '';\r\n+  allUsers: UserAccess[] = []; \r\n+ \r\n+  filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n+  @Input() phase: any;\r\n+\r\n+  constructor(\r\n+    \r\n+    public activeModal: NgbActiveModal,\r\n+\r\n+    private agenceService: AgenceService,\r\n+    private projectService: ProjectService,\r\n+    private snackBar: MatSnackBar\r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    console.log('Phase:', this.phase);\r\n+    this.loadUsersAndAccess();\r\n+  }\r\n+\r\n+  loadUsersAndAccess(): void {\r\n+    this.isLoading = true;\r\n+        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n+      next: (phaseAccesses) => {\r\n+        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n+  \r\n+        // Créer un tableau pour stocker toutes les requêtes\r\n+        const userRequests = phaseAccesses.map(access => \r\n+          this.agenceService.getUserById(access.idUser).pipe(\r\n+            map(user => ({\r\n+              ...access, // Conserver les données d'accès originales\r\n+              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n+              username: user.username, // Ajouter le username\r\n+              email: user.email \r\n+            }))\r\n+          )\r\n+        );\r\n+  \r\n+        // Exécuter toutes les requêtes en parallèle\r\n+        forkJoin(userRequests).subscribe({\r\n+          next: (usersWithAccess) => {\r\n+            // Maintenant usersWithAccess contient les accès avec les usernames\r\n+            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n+            this.allUsers = usersWithAccess.map(u => ({\r\n+              id: u.idUser, // User ID\r\n+              username: u.username || 'N/A', // Provide fallback\r\n+              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n+              canView: u.canView // Get canView from the original access object\r\n+            }));\r\n+            console.log('Usernames:', this.allUsers);\r\n+            \r\n+            this.applyFilter();\r\n+            this.isLoading = false;\r\n+          },\r\n+          error: (err) => {\r\n+            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n+            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n+            this.isLoading = false;\r\n+          }\r\n+        });\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Erreur lors du chargement des accès:', err);\r\n+        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n+        this.isLoading = false;\r\n+        this.activeModal.dismiss();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  applyFilter(): void {\r\n+    const query = this.searchQuery.toLowerCase().trim();\r\n+    if (!query) {\r\n+      this.filteredUsers = [...this.allUsers];\r\n+    } else {\r\n+      this.filteredUsers = this.allUsers.filter(user =>\r\n+        (user.username && user.username.toLowerCase().includes(query)) || // Safe check\r\n+        (user.email && user.email.toLowerCase().includes(query)) // Safe check\r\n+     \r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  onSave(): void {\r\n+    this.isLoading = true;\r\n+    // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n+    const accessUpdates = this.allUsers.map(user => ({\r\n+      userId: user.id,\r\n+      canView: user.canView\r\n+    }));\r\n+\r\n+    // Appeler le service pour mettre à jour les accès\r\n+    // NOTE: Vous devrez peut-être créer cette méthode dans ProjectService\r\n+    this.projectService.updateProjectAccess(this.data.projectId, accessUpdates).subscribe({\r\n+      next: () => {\r\n+        this.isLoading = false;\r\n+        this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n+        this.dialogRef.close(true); // Fermer et indiquer le succès\r\n+      },\r\n+      error: (err) => {\r\n+        this.isLoading = false;\r\n+        console.error('Erreur lors de la mise à jour des accès:', err);\r\n+        this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n+        // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n+      }\r\n+    });\r\n+  } */\r\n+\r\n+  onCancel(): void {\r\n+    this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n+  }\r\n+\r\n+  // Optionnel: Pour suivre les éléments dans *ngFor pour de meilleures performances\r\n+  trackByUser(index: number, item: UserAccess): string {\r\n+    return item.id;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746297340521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n     const accessUpdates = this.allUsers.map(user => ({\r\n       userId: user.id,\r\n       canView: user.canView\r\n     }));\r\n+    console.log(\"Updating access for phase:\", this.phase._id, \"with data:\", accessUpdates);\r\n \r\n     // Appeler le service pour mettre à jour les accès\r\n     // NOTE: Vous devrez peut-être créer cette méthode dans ProjectService\r\n     this.projectService.updateProjectAccess(this.data.projectId, accessUpdates).subscribe({\r\n@@ -143,150 +144,4 @@\n   trackByUser(index: number, item: UserAccess): string {\r\n     return item.id;\r\n   }\r\n }\r\n-import { Component, Inject, Input, OnInit } from '@angular/core';\r\n-import { MatSnackBar } from '@angular/material/snack-bar';\r\n-import { AgenceService } from '../../services/agenceService'; // Service pour récupérer les utilisateurs\r\n-import { ProjectService } from '../../services/ProjectService'; // Service pour gérer les accès projet\r\n-import { forkJoin, map } from 'rxjs';\r\n-import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n-\r\n-export interface ProjectAccessData {\r\n-  projectId: string;\r\n-  agenceId: string; // ID de l'agence pour récupérer les utilisateurs\r\n-  currentAccess: { userId: string, canView: boolean }[]; // Accès actuels pour pré-remplir\r\n-}\r\n-\r\n-// Interface pour représenter un utilisateur avec son état d'accès\r\n-export interface UserAccess {\r\n-  id: string;\r\n-  username: string; // Ou firstName + lastName\r\n-  email: string;\r\n-  canView: boolean;\r\n-}\r\n-@Component({\r\n-  selector: 'app-project-access',\r\n-  templateUrl: './project-access.component.html',\r\n-  styleUrl: './project-access.component.scss'\r\n-})\r\n-//interface\r\n-\r\n-export class ProjectAccessComponent {\r\n-  isLoading = false;\r\n-  searchQuery = '';\r\n-  allUsers: UserAccess[] = []; \r\n- \r\n-  filteredUsers: UserAccess[] = []; // Utilisateurs filtrés par la recherche\r\n-  @Input() phase: any;\r\n-\r\n-  constructor(\r\n-    \r\n-    public activeModal: NgbActiveModal,\r\n-\r\n-    private agenceService: AgenceService,\r\n-    private projectService: ProjectService,\r\n-    private snackBar: MatSnackBar\r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    console.log('Phase:', this.phase);\r\n-    this.loadUsersAndAccess();\r\n-  }\r\n-\r\n-  loadUsersAndAccess(): void {\r\n-    this.isLoading = true;\r\n-        this.projectService.getPhaseAccessByIdPhase(this.phase.id).subscribe({\r\n-      next: (phaseAccesses) => {\r\n-        console.log('Utilisateurs avec accès:', phaseAccesses);\r\n-  \r\n-        // Créer un tableau pour stocker toutes les requêtes\r\n-        const userRequests = phaseAccesses.map(access => \r\n-          this.agenceService.getUserById(access.idUser).pipe(\r\n-            map(user => ({\r\n-              ...access, // Conserver les données d'accès originales\r\n-              id: access.idUser, // Ensure the main ID is the user ID for consistency if needed later\r\n-              username: user.username, // Ajouter le username\r\n-              email: user.email \r\n-            }))\r\n-          )\r\n-        );\r\n-  \r\n-        // Exécuter toutes les requêtes en parallèle\r\n-        forkJoin(userRequests).subscribe({\r\n-          next: (usersWithAccess) => {\r\n-            // Maintenant usersWithAccess contient les accès avec les usernames\r\n-            console.log('Utilisateurs avec accès:', usersWithAccess);\r\n-            this.allUsers = usersWithAccess.map(u => ({\r\n-              id: u.idUser, // User ID\r\n-              username: u.username || 'N/A', // Provide fallback\r\n-              email: u.email || '', // Provide fallback (empty string is safe for .toLowerCase())\r\n-              canView: u.canView // Get canView from the original access object\r\n-            }));\r\n-            console.log('Usernames:', this.allUsers);\r\n-            \r\n-            this.applyFilter();\r\n-            this.isLoading = false;\r\n-          },\r\n-          error: (err) => {\r\n-            console.error('Erreur lors de la récupération des utilisateurs:', err);\r\n-            this.snackBar.open('Erreur lors de la récupération des détails utilisateurs', 'Fermer', { duration: 3000 });\r\n-            this.isLoading = false;\r\n-          }\r\n-        });\r\n-      },\r\n-      error: (err) => {\r\n-        console.error('Erreur lors du chargement des accès:', err);\r\n-        this.snackBar.open('Erreur lors du chargement des accès', 'Fermer', { duration: 3000 });\r\n-        this.isLoading = false;\r\n-        this.activeModal.dismiss();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  applyFilter(): void {\r\n-    const query = this.searchQuery.toLowerCase().trim();\r\n-    if (!query) {\r\n-      this.filteredUsers = [...this.allUsers];\r\n-    } else {\r\n-      this.filteredUsers = this.allUsers.filter(user =>\r\n-        (user.username && user.username.toLowerCase().includes(query)) || // Safe check\r\n-        (user.email && user.email.toLowerCase().includes(query)) // Safe check\r\n-     \r\n-      );\r\n-    }\r\n-  }\r\n-\r\n- /*  onSave(): void {\r\n-    this.isLoading = true;\r\n-    // Préparer les données à envoyer : liste des ID utilisateur avec leur état canView\r\n-    const accessUpdates = this.allUsers.map(user => ({\r\n-      userId: user.id,\r\n-      canView: user.canView\r\n-    }));\r\n-\r\n-    // Appeler le service pour mettre à jour les accès\r\n-    // NOTE: Vous devrez peut-être créer cette méthode dans ProjectService\r\n-    this.projectService.updateProjectAccess(this.data.projectId, accessUpdates).subscribe({\r\n-      next: () => {\r\n-        this.isLoading = false;\r\n-        this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n-        this.dialogRef.close(true); // Fermer et indiquer le succès\r\n-      },\r\n-      error: (err) => {\r\n-        this.isLoading = false;\r\n-        console.error('Erreur lors de la mise à jour des accès:', err);\r\n-        this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n-        // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n-      }\r\n-    });\r\n-  } */\r\n-\r\n-  onCancel(): void {\r\n-    this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n-  }\r\n-\r\n-  // Optionnel: Pour suivre les éléments dans *ngFor pour de meilleures performances\r\n-  trackByUser(index: number, item: UserAccess): string {\r\n-    return item.id;\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746297360275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,10 +119,9 @@\n     }));\r\n     console.log(\"Updating access for phase:\", this.phase._id, \"with data:\", accessUpdates);\r\n \r\n     // Appeler le service pour mettre à jour les accès\r\n-    // NOTE: Vous devrez peut-être créer cette méthode dans ProjectService\r\n-    this.projectService.updateProjectAccess(this.data.projectId, accessUpdates).subscribe({\r\n+    this.projectService.updatePhaseAccess(this.phase._id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n       next: () => {\r\n         this.isLoading = false;\r\n         this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n         this.dialogRef.close(true); // Fermer et indiquer le succès\r\n"
                },
                {
                    "date": 1746297365727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     }));\r\n     console.log(\"Updating access for phase:\", this.phase._id, \"with data:\", accessUpdates);\r\n \r\n     // Appeler le service pour mettre à jour les accès\r\n-    this.projectService.updatePhaseAccess(this.phase._id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n+    this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n       next: () => {\r\n         this.isLoading = false;\r\n         this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n         this.dialogRef.close(true); // Fermer et indiquer le succès\r\n"
                },
                {
                    "date": 1746297380573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n     this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n       next: () => {\r\n         this.isLoading = false;\r\n         this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n-        this.dialogRef.close(true); // Fermer et indiquer le succès\r\n+        this.activeModal.close(true);// Fermer et indiquer le succès\r\n       },\r\n       error: (err) => {\r\n         this.isLoading = false;\r\n         console.error('Erreur lors de la mise à jour des accès:', err);\r\n"
                },
                {
                    "date": 1746297390574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         this.isLoading = false;\r\n         this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n         this.activeModal.close(true);// Fermer et indiquer le succès\r\n       },\r\n-      error: (err) => {\r\n+      error: (err:any) => {\r\n         this.isLoading = false;\r\n         console.error('Erreur lors de la mise à jour des accès:', err);\r\n         this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n         // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n"
                },
                {
                    "date": 1746297402354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n         this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n         // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n       }\r\n     });\r\n-  } */\r\n+  } \r\n \r\n   onCancel(): void {\r\n     this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n   }\r\n"
                },
                {
                    "date": 1746297467136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     }));\r\n     console.log(\"Updating access for phase:\", this.phase._id, \"with data:\", accessUpdates);\r\n \r\n     // Appeler le service pour mettre à jour les accès\r\n-    this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n+   /*  this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n       next: () => {\r\n         this.isLoading = false;\r\n         this.snackBar.open('Accès mis à jour avec succès', 'Fermer', { duration: 3000 });\r\n         this.activeModal.close(true);// Fermer et indiquer le succès\r\n@@ -131,9 +131,9 @@\n         console.error('Erreur lors de la mise à jour des accès:', err);\r\n         this.snackBar.open('Erreur lors de la mise à jour des accès', 'Fermer', { duration: 5000 });\r\n         // Ne pas fermer le modal pour permettre à l'utilisateur de réessayer\r\n       }\r\n-    });\r\n+    }); */\r\n   } \r\n \r\n   onCancel(): void {\r\n     this.activeModal.dismiss(); // Fermer sans sauvegarder\r\n"
                },
                {
                    "date": 1746297587454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n     const accessUpdates = this.allUsers.map(user => ({\r\n       userId: user.id,\r\n       canView: user.canView\r\n     }));\r\n-    console.log(\"Updating access for phase:\", this.phase._id, \"with data:\", accessUpdates);\r\n+    console.log(\"Updating access for phase:\", this.phase.id, \"with data:\", accessUpdates);\r\n \r\n     // Appeler le service pour mettre à jour les accès\r\n    /*  this.projectService.updatePhaseAccess(this.phase.id, accessUpdates).subscribe({ // Utiliser this.phase._id\r\n       next: () => {\r\n"
                },
                {
                    "date": 1746297703834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n   }\r\n \r\n   applyFilter(): void {\r\n     const query = this.searchQuery.toLowerCase().trim();\r\n-    if (!query) {\r\n+    if (!this.searchQuery) {\r\n       this.filteredUsers = [...this.allUsers];\r\n     } else {\r\n       this.filteredUsers = this.allUsers.filter(user =>\r\n         (user.username && user.username.toLowerCase().includes(query)) || // Safe check\r\n"
                },
                {
                    "date": 1746297712405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     });\r\n   }\r\n \r\n   applyFilter(): void {\r\n-    const query = this.searchQuery.toLowerCase().trim();\r\n+    const query = this.searchQuery.toLowerCase()\r\n     if (!this.searchQuery) {\r\n       this.filteredUsers = [...this.allUsers];\r\n     } else {\r\n       this.filteredUsers = this.allUsers.filter(user =>\r\n"
                },
                {
                    "date": 1746297718197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,12 +97,12 @@\n     });\r\n   }\r\n \r\n   applyFilter(): void {\r\n-    const query = this.searchQuery.toLowerCase()\r\n+    \r\n     if (!this.searchQuery) {\r\n       this.filteredUsers = [...this.allUsers];\r\n-    } else {\r\n+    } else {const query = this.searchQuery.toLowerCase();\r\n       this.filteredUsers = this.allUsers.filter(user =>\r\n         (user.username && user.username.toLowerCase().includes(query)) || // Safe check\r\n         (user.email && user.email.toLowerCase().includes(query)) // Safe check\r\n      \r\n"
                },
                {
                    "date": 1746297747560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,12 +100,12 @@\n   applyFilter(): void {\r\n     \r\n     if (!this.searchQuery) {\r\n       this.filteredUsers = [...this.allUsers];\r\n-    } else {const query = this.searchQuery.toLowerCase();\r\n+    } else {\r\n+      const query = this.searchQuery.toLowerCase();\r\n       this.filteredUsers = this.allUsers.filter(user =>\r\n-        (user.username && user.username.toLowerCase().includes(query)) || // Safe check\r\n-        (user.email && user.email.toLowerCase().includes(query)) // Safe check\r\n+        (user.username && user.username.toLowerCase().includes(query)) e check\r\n      \r\n       );\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1746297756483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n       this.filteredUsers = [...this.allUsers];\r\n     } else {\r\n       const query = this.searchQuery.toLowerCase();\r\n       this.filteredUsers = this.allUsers.filter(user =>\r\n-        (user.username && user.username.toLowerCase().includes(query)) e check\r\n+        (user.username && user.username.toLowerCase().includes(query)) \r\n      \r\n       );\r\n     }\r\n   }\r\n"
                }
            ],
            "date": 1746290347000,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-project-access',\r\n  templateUrl: './project-access.component.html',\r\n  styleUrl: './project-access.component.scss'\r\n})\r\n\r\nexport class ProjectAccessComponent {\r\n\r\n}\r\n"
        }
    ]
}