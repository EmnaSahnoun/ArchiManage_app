{
    "sourceFile": "src/app/invoice-list/invoice-list.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1747603613897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747603624328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-invoice-list',\r\n   templateUrl: './invoice-list.component.html',\r\n"
                },
                {
                    "date": 1747603631005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n-import { Component, OnInit } from '@angular/core';\r\n+import { Component, Input, OnInit } from '@angular/core';\r\n+import { Invoice } from '../models/invoice';\r\n+import { ActivatedRoute } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-invoice-list',\r\n   templateUrl: './invoice-list.component.html',\r\n"
                },
                {
                    "date": 1747603645664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Component, Input, OnInit } from '@angular/core';\r\n import { Invoice } from '../models/invoice';\r\n-import { ActivatedRoute } from '@angular/router';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n+import { InvoiceService } from '../services/invoice.service';\r\n \r\n @Component({\r\n   selector: 'app-invoice-list',\r\n   templateUrl: './invoice-list.component.html',\r\n@@ -38,9 +39,9 @@\n \r\n   loadInvoice(id: string): void {\r\n     this.isLoading = true;\r\n     this.errorMessage = null;\r\n-    this.invoiceService.getInvoiceById(id).subscribe({\r\n+    this.invoiceService.(id).subscribe({\r\n       next: (data) => {\r\n         this.invoice = data;\r\n         this.isLoading = false;\r\n       },\r\n"
                },
                {
                    "date": 1747604114710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n import { Component, Input, OnInit } from '@angular/core';\r\n import { Invoice } from '../models/invoice';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n import { InvoiceService } from '../services/invoice.service';\r\n-\r\n+invoiceId\r\n @Component({\r\n   selector: 'app-invoice-list',\r\n   templateUrl: './invoice-list.component.html',\r\n   styleUrl: './invoice-list.component.scss'\r\n })\r\n export class InvoiceListComponent implements OnInit {\r\n-  @Input() invoiceId?: string; // Peut être passé en Input si le composant est imbriqué\r\n+  @Input() ?: string; // Peut être passé en Input si le composant est imbriqué\r\n \r\n   invoice: Invoice | null = null;\r\n   isLoading: boolean = true;\r\n   errorMessage: string | null = null;\r\n@@ -39,9 +39,9 @@\n \r\n   loadInvoice(id: string): void {\r\n     this.isLoading = true;\r\n     this.errorMessage = null;\r\n-    this.invoiceService.(id).subscribe({\r\n+    this.invoiceService.getInvoice(id).subscribe({\r\n       next: (data) => {\r\n         this.invoice = data;\r\n         this.isLoading = false;\r\n       },\r\n"
                },
                {
                    "date": 1747604131086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n import { Component, Input, OnInit } from '@angular/core';\r\n import { Invoice } from '../models/invoice';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n import { InvoiceService } from '../services/invoice.service';\r\n-invoiceId\r\n+\r\n @Component({\r\n   selector: 'app-invoice-list',\r\n   templateUrl: './invoice-list.component.html',\r\n   styleUrl: './invoice-list.component.scss'\r\n })\r\n export class InvoiceListComponent implements OnInit {\r\n-  @Input() ?: string; // Peut être passé en Input si le composant est imbriqué\r\n+   invoiceId?: string; // Peut être passé en Input si le composant est imbriqué\r\n \r\n   invoice: Invoice | null = null;\r\n   isLoading: boolean = true;\r\n   errorMessage: string | null = null;\r\n@@ -23,9 +23,9 @@\n \r\n   ngOnInit(): void {\r\n     // Si invoiceId n'est pas fourni en Input, essayez de le récupérer depuis la route\r\n     const idFromRoute = this.route.snapshot.paramMap.get('id');\r\n-    const currentId = this.invoiceId || idFromRoute;\r\n+    const currentId = this.invoiceId || idFromRoute ;\r\n \r\n     if (currentId) {\r\n       this.loadInvoice(currentId);\r\n     } else {\r\n"
                },
                {
                    "date": 1747604558444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,10 @@\n   templateUrl: './invoice-list.component.html',\r\n   styleUrl: './invoice-list.component.scss'\r\n })\r\n export class InvoiceListComponent implements OnInit {\r\n-   invoiceId?: string; // Peut être passé en Input si le composant est imbriqué\r\n-\r\n-  invoice: Invoice | null = null;\r\n-  isLoading: boolean = true;\r\n+   invoices: Invoice[] = [];\r\n+  isLoading = true;\r\n   errorMessage: string | null = null;\r\n \r\n   constructor(\r\n     private route: ActivatedRoute,\r\n@@ -23,9 +21,9 @@\n \r\n   ngOnInit(): void {\r\n     // Si invoiceId n'est pas fourni en Input, essayez de le récupérer depuis la route\r\n     const idFromRoute = this.route.snapshot.paramMap.get('id');\r\n-    const currentId = this.invoiceId || idFromRoute ;\r\n+    const currentId = this.invoiceId || idFromRoute || \"682a157f753bbf17e140a656\";\r\n \r\n     if (currentId) {\r\n       this.loadInvoice(currentId);\r\n     } else {\r\n"
                },
                {
                    "date": 1747604594219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,84 +19,72 @@\n     private invoiceService: InvoiceService\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    // Si invoiceId n'est pas fourni en Input, essayez de le récupérer depuis la route\r\n-    const idFromRoute = this.route.snapshot.paramMap.get('id');\r\n-    const currentId = this.invoiceId || idFromRoute || \"682a157f753bbf17e140a656\";\r\n-\r\n-    if (currentId) {\r\n-      this.loadInvoice(currentId);\r\n-    } else {\r\n-      console.warn('Invoice ID not provided via Input or route parameter.');\r\n-      this.isLoading = false;\r\n-      this.errorMessage = \"Aucun identifiant de facture n'a été fourni.\";\r\n-      // Optionnel: rediriger ou afficher un message par défaut\r\n-      // this.invoice = this.createDraftInvoice(); // Pour un mode création\r\n-    }\r\n+    this.loadInvoices();\r\n   }\r\n \r\n-  loadInvoice(id: string): void {\r\n+  loadInvoices(): void {\r\n     this.isLoading = true;\r\n     this.errorMessage = null;\r\n-    this.invoiceService.getInvoice(id).subscribe({\r\n+    this.invoiceService.getInvoices().subscribe({\r\n       next: (data) => {\r\n-        this.invoice = data;\r\n+        this.invoices = data;\r\n         this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n-        console.error('Error fetching invoice:', err);\r\n-        this.errorMessage = `Erreur lors du chargement de la facture : ${err.message || 'Erreur inconnue'}`;\r\n+        console.error('Error fetching invoices:', err);\r\n+        this.errorMessage = 'Failed to load invoices. Please try again later.';\r\n         this.isLoading = false;\r\n       }\r\n     });\r\n   }\r\n \r\n-  formatDate(timestamp: number): string {\r\n-    if (!timestamp) return '';\r\n-    return new Date(timestamp).toLocaleDateString('fr-FR', {\r\n-      year: 'numeric', month: 'long', day: 'numeric'\r\n-    });\r\n+  navigateToCreateInvoice(): void {\r\n+    this.router.navigate(['/invoices/new']); // Adjust route as needed\r\n   }\r\n \r\n-  formatCurrency(amount: number): string {\r\n-    return amount.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }); // Adaptez la devise\r\n+  viewInvoice(id: string): void {\r\n+    this.router.navigate(['/invoices', id]); // Adjust route as needed\r\n   }\r\n \r\n-  printInvoice(): void {\r\n-    if (this.invoice) {\r\n-      // Logique d'impression\r\n-      // Vous pouvez ouvrir une nouvelle fenêtre avec une version imprimable de la facture\r\n-      // ou utiliser des bibliothèques comme jsPDF ou html2pdf\r\n-      console.log('Printing invoice:', this.invoice.documentNumber);\r\n-      window.print(); // Simple impression de la page actuelle (peut nécessiter des styles CSS @media print)\r\n-    }\r\n+  editInvoice(id: string): void {\r\n+    this.router.navigate(['/invoices', id, 'edit']); // Adjust route as needed\r\n   }\r\n \r\n-  deleteInvoice(): void {\r\n-    if (this.invoice && confirm(`Êtes-vous sûr de vouloir supprimer la facture ${this.invoice.documentNumber} ?`)) {\r\n-      this.invoiceService.deleteInvoice(this.invoice.id).subscribe({\r\n-        next: () => {\r\n-          console.log('Invoice deleted successfully');\r\n-          // Rediriger vers la liste des factures ou une page de confirmation\r\n-          this.router.navigate(['/invoices']); // Assurez-vous que cette route existe\r\n-        },\r\n-        error: (err) => {\r\n-          console.error('Error deleting invoice:', err);\r\n-          this.errorMessage = `Erreur lors de la suppression de la facture: ${err.message || 'Erreur inconnue'}`;\r\n-        }\r\n-      });\r\n+  confirmDelete(invoice: Invoice): void {\r\n+    // Implement a confirmation dialog (e.g., using MatDialog or a simple confirm)\r\n+    const confirmation = confirm(`Are you sure you want to delete invoice ${invoice.documentNumber}?`);\r\n+    if (confirmation) {\r\n+      this.deleteInvoice(invoice.id);\r\n     }\r\n   }\r\n \r\n-  editInvoice(): void {\r\n-    if (this.invoice) {\r\n-      // Rediriger vers un formulaire d'édition de facture\r\n-      this.router.navigate(['/invoices', this.invoice.id, 'edit']); // Assurez-vous que cette route existe\r\n-    }\r\n+  deleteInvoice(id: string): void {\r\n+    this.invoiceService.deleteInvoice(id).subscribe({\r\n+      next: () => {\r\n+        this.invoices = this.invoices.filter(inv => inv.id !== id);\r\n+        // Optionally, show a success message\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Error deleting invoice:', err);\r\n+        this.errorMessage = `Failed to delete invoice. ${err.error?.message || ''}`;\r\n+        // Optionally, show an error message to the user\r\n+      }\r\n+    });\r\n   }\r\n \r\n-  goBack(): void {\r\n-    // Naviguer vers la page précédente ou une liste de factures\r\n-    this.router.navigate(['/invoices']); // Ou utiliser Location.back() après l'avoir injecté\r\n+  // Helper for formatting, or use Angular Pipes in the template\r\n+  formatDate(timestamp: number): string {\r\n+    if (!timestamp) return 'N/A';\r\n+    return new Date(timestamp).toLocaleDateString();\r\n   }\r\n+\r\n+  formatCurrency(amount: number): string {\r\n+    if (amount === null || amount === undefined) return 'N/A';\r\n+    return amount.toLocaleString('fr-FR', { style: 'currency', currency: 'TND' }); // Adjust currency as needed\r\n+  }\r\n+\r\n+  getStatusClass(status: InvoiceStatus): string {\r\n+    return status ? status.toLowerCase() : 'default';\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1747604605093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component, Input, OnInit } from '@angular/core';\r\n-import { Invoice } from '../models/invoice';\r\n+import { Invoice, InvoiceStatus } from '../models/invoice';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n import { InvoiceService } from '../services/invoice.service';\r\n \r\n @Component({\r\n"
                },
                {
                    "date": 1747604963382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   templateUrl: './invoice-list.component.html',\r\n   styleUrl: './invoice-list.component.scss'\r\n })\r\n export class InvoiceListComponent implements OnInit {\r\n-   invoices: Invoice[] = [];\r\n+   invoices: Invoianyce[] = [];\r\n   isLoading = true;\r\n   errorMessage: string | null = null;\r\n \r\n   constructor(\r\n"
                },
                {
                    "date": 1747604979745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     this.isLoading = true;\r\n     this.errorMessage = null;\r\n     this.invoiceService.getInvoices().subscribe({\r\n       next: (data) => {\r\n-        con\r\n+        cons\r\n         this.invoices = data;\r\n         this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n"
                },
                {
                    "date": 1747952865036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,9 @@\n     this.errorMessage = null;\r\n     this.commercialService.getInvoices().subscribe({\r\n       next: (data:any[]) => {\r\n         this.invoices = data ;\r\n-        console.log('Factures chargées avec succès :', this.invoices);\r\n-        this.filteredInvoices = [...this.invoices];\r\n+        \r\n         this.applyFilter();\r\n         this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n"
                }
            ],
            "date": 1747603613897,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-invoice-list',\r\n  templateUrl: './invoice-list.component.html',\r\n  styleUrl: './invoice-list.component.scss'\r\n})\r\nexport class InvoiceListComponent implements OnInit {\r\n  @Input() invoiceId?: string; // Peut être passé en Input si le composant est imbriqué\r\n\r\n  invoice: Invoice | null = null;\r\n  isLoading: boolean = true;\r\n  errorMessage: string | null = null;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private invoiceService: InvoiceService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Si invoiceId n'est pas fourni en Input, essayez de le récupérer depuis la route\r\n    const idFromRoute = this.route.snapshot.paramMap.get('id');\r\n    const currentId = this.invoiceId || idFromRoute;\r\n\r\n    if (currentId) {\r\n      this.loadInvoice(currentId);\r\n    } else {\r\n      console.warn('Invoice ID not provided via Input or route parameter.');\r\n      this.isLoading = false;\r\n      this.errorMessage = \"Aucun identifiant de facture n'a été fourni.\";\r\n      // Optionnel: rediriger ou afficher un message par défaut\r\n      // this.invoice = this.createDraftInvoice(); // Pour un mode création\r\n    }\r\n  }\r\n\r\n  loadInvoice(id: string): void {\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n    this.invoiceService.getInvoiceById(id).subscribe({\r\n      next: (data) => {\r\n        this.invoice = data;\r\n        this.isLoading = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error fetching invoice:', err);\r\n        this.errorMessage = `Erreur lors du chargement de la facture : ${err.message || 'Erreur inconnue'}`;\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  formatDate(timestamp: number): string {\r\n    if (!timestamp) return '';\r\n    return new Date(timestamp).toLocaleDateString('fr-FR', {\r\n      year: 'numeric', month: 'long', day: 'numeric'\r\n    });\r\n  }\r\n\r\n  formatCurrency(amount: number): string {\r\n    return amount.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }); // Adaptez la devise\r\n  }\r\n\r\n  printInvoice(): void {\r\n    if (this.invoice) {\r\n      // Logique d'impression\r\n      // Vous pouvez ouvrir une nouvelle fenêtre avec une version imprimable de la facture\r\n      // ou utiliser des bibliothèques comme jsPDF ou html2pdf\r\n      console.log('Printing invoice:', this.invoice.documentNumber);\r\n      window.print(); // Simple impression de la page actuelle (peut nécessiter des styles CSS @media print)\r\n    }\r\n  }\r\n\r\n  deleteInvoice(): void {\r\n    if (this.invoice && confirm(`Êtes-vous sûr de vouloir supprimer la facture ${this.invoice.documentNumber} ?`)) {\r\n      this.invoiceService.deleteInvoice(this.invoice.id).subscribe({\r\n        next: () => {\r\n          console.log('Invoice deleted successfully');\r\n          // Rediriger vers la liste des factures ou une page de confirmation\r\n          this.router.navigate(['/invoices']); // Assurez-vous que cette route existe\r\n        },\r\n        error: (err) => {\r\n          console.error('Error deleting invoice:', err);\r\n          this.errorMessage = `Erreur lors de la suppression de la facture: ${err.message || 'Erreur inconnue'}`;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  editInvoice(): void {\r\n    if (this.invoice) {\r\n      // Rediriger vers un formulaire d'édition de facture\r\n      this.router.navigate(['/invoices', this.invoice.id, 'edit']); // Assurez-vous que cette route existe\r\n    }\r\n  }\r\n\r\n  goBack(): void {\r\n    // Naviguer vers la page précédente ou une liste de factures\r\n    this.router.navigate(['/invoices']); // Ou utiliser Location.back() après l'avoir injecté\r\n  }\r\n}\r\n"
        }
    ]
}