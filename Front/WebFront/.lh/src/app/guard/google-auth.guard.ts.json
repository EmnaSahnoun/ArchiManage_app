{
    "sourceFile": "src/app/guard/google-auth.guard.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1748602760079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748602765253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import { ActivatedRouteSnapshot, UrlTree } from \"@angular/router\";\r\n+\r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n export class GoogleAuthGuard implements CanActivate {\r\n"
                },
                {
                    "date": 1748602770785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import { ActivatedRouteSnapshot, UrlTree } from \"@angular/router\";\r\n+import { ActivatedRouteSnapshot, Router, UrlTree } from \"@angular/router\";\r\n+import { GoogleAuthService } from \"../services/googleAuthSerivce\";\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n"
                },
                {
                    "date": 1748602777602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import { ActivatedRouteSnapshot, Router, UrlTree } from \"@angular/router\";\r\n+import { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from \"@angular/router\";\r\n import { GoogleAuthService } from \"../services/googleAuthSerivce\";\r\n+import { Injectable } from \"@angular/core\";\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n"
                },
                {
                    "date": 1748606703224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from \"@angular/router\";\r\n+import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\n import { GoogleAuthService } from \"../services/googleAuthSerivce\";\r\n import { Injectable } from \"@angular/core\";\r\n \r\n @Injectable({\r\n@@ -13,16 +13,16 @@\n \r\n   canActivate(\r\n     route: ActivatedRouteSnapshot,\r\n     state: RouterStateSnapshot\r\n-  ): boolean | UrlTree {\r\n+  ): boolean | Observable<boolean> | Promise<boolean> {\r\n     const token = this.googleAuthService.getGoogleAccessToken();\r\n     \r\n-    if (!token) {\r\n-      // Rediriger vers l'authentification en sauvegardant l'URL courante\r\n+    if (token) {\r\n+      return true;\r\n+    } else {\r\n+      // Sauvegarder l'URL actuelle avant redirection\r\n       this.googleAuthService.initGoogleAuth(state.url);\r\n       return false;\r\n     }\r\n-    \r\n-    return true;\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748623616860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\n import { GoogleAuthService } from \"../services/googleAuthSerivce\";\r\n import { Injectable } from \"@angular/core\";\r\n+import { Observable } from \"rxjs\";\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n@@ -10,19 +11,17 @@\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router\r\n   ) {}\r\n \r\n-  canActivate(\r\n-    route: ActivatedRouteSnapshot,\r\n-    state: RouterStateSnapshot\r\n-  ): boolean | Observable<boolean> | Promise<boolean> {\r\n-    const token = this.googleAuthService.getGoogleAccessToken();\r\n-    \r\n-    if (token) {\r\n-      return true;\r\n-    } else {\r\n-      // Sauvegarder l'URL actuelle avant redirection\r\n-      this.googleAuthService.initGoogleAuth(state.url);\r\n-      return false;\r\n-    }\r\n-  }\r\n+  canActivate(): Observable<boolean> {\r\n+  return this.googleAuthService.googleAccessToken$.pipe(\r\n+    take(1),\r\n+    tap(hasToken => {\r\n+      if (!hasToken) {\r\n+        console.log('No token, initiating auth flow');\r\n+        this.googleAuthService.initGoogleAuth(this.router.url);\r\n+      }\r\n+    }),\r\n+    map(hasToken => !!hasToken)\r\n+  );\r\n+}\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748623622004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\n import { GoogleAuthService } from \"../services/googleAuthSerivce\";\r\n import { Injectable } from \"@angular/core\";\r\n-import { Observable } from \"rxjs\";\r\n+import { Observable, take, tap } from \"rxjs\";\r\n \r\n @Injectable({\r\n   providedIn: 'root'\r\n })\r\n"
                },
                {
                    "date": 1748628908466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,31 @@\n import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\n import { GoogleAuthService } from \"../services/googleAuthSerivce\";\r\n import { Injectable } from \"@angular/core\";\r\n-import { Observable, take, tap } from \"rxjs\";\r\n+import { map, Observable, take, tap } from \"rxjs\";\r\n \r\n-@Injectable({\r\n-  providedIn: 'root'\r\n-})\r\n+@Injectable({ providedIn: 'root' })\r\n export class GoogleAuthGuard implements CanActivate {\r\n   constructor(\r\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router\r\n   ) {}\r\n \r\n-  canActivate(): Observable<boolean> {\r\n-  return this.googleAuthService.googleAccessToken$.pipe(\r\n-    take(1),\r\n-    tap(hasToken => {\r\n-      if (!hasToken) {\r\n-        console.log('No token, initiating auth flow');\r\n-        this.googleAuthService.initGoogleAuth(this.router.url);\r\n-      }\r\n-    }),\r\n-    map(hasToken => !!hasToken)\r\n-  );\r\n-}\r\n+  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n+    return this.googleAuthService.googleAccessToken$.pipe(\r\n+      take(1),\r\n+      map(token => {\r\n+        if (!token) {\r\n+          // Stocker l'URL demandée AVANT la redirection\r\n+          const returnUrl = route.url.join('/');\r\n+          this.googleAuthService.initGoogleAuth(returnUrl);\r\n+          return false;\r\n+        }\r\n+        return true;\r\n+      }),\r\n+      catchError(() => {\r\n+        this.router.navigate(['/login']);\r\n+        return of(false);\r\n+      })\r\n+    );\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748628915074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\n import { GoogleAuthService } from \"../services/googleAuthSerivce\";\r\n import { Injectable } from \"@angular/core\";\r\n-import { map, Observable, take, tap } from \"rxjs\";\r\n+import { catchError, map, Observable, of, take, tap } from \"rxjs\";\r\n \r\n @Injectable({ providedIn: 'root' })\r\n export class GoogleAuthGuard implements CanActivate {\r\n   constructor(\r\n"
                },
                {
                    "date": 1748631843457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,23 +9,20 @@\n     private googleAuthService: GoogleAuthService,\r\n     private router: Router\r\n   ) {}\r\n \r\n-  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n-    return this.googleAuthService.googleAccessToken$.pipe(\r\n-      take(1),\r\n-      map(token => {\r\n-        if (!token) {\r\n-          // Stocker l'URL demandée AVANT la redirection\r\n-          const returnUrl = route.url.join('/');\r\n-          this.googleAuthService.initGoogleAuth(returnUrl);\r\n-          return false;\r\n-        }\r\n-        return true;\r\n-      }),\r\n-      catchError(() => {\r\n-        this.router.navigate(['/login']);\r\n-        return of(false);\r\n-      })\r\n-    );\r\n+  canActivate(\r\n+    route: ActivatedRouteSnapshot,\r\n+    state: RouterStateSnapshot\r\n+  ): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n+    // Vérifier d'abord le localStorage\r\n+    const storedToken = this.googleAuthService.getGoogleAccessToken();\r\n+    \r\n+    if (storedToken) {\r\n+      return true;\r\n+    }\r\n+\r\n+    // Si pas de token, initier le flux d'authentification\r\n+    this.googleAuthService.initGoogleAuth(state.url);\r\n+    return false;\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748637489282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,24 +5,31 @@\n \r\n @Injectable({ providedIn: 'root' })\r\n export class GoogleAuthGuard implements CanActivate {\r\n   constructor(\r\n-    private googleAuthService: GoogleAuthService,\r\n+    private authService: GoogleAuthService,\r\n     private router: Router\r\n   ) {}\r\n \r\n   canActivate(\r\n-    route: ActivatedRouteSnapshot,\r\n+    next: ActivatedRouteSnapshot,\r\n     state: RouterStateSnapshot\r\n-  ): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n-    // Vérifier d'abord le localStorage\r\n-    const storedToken = this.googleAuthService.getGoogleAccessToken();\r\n+  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n+    const token = this.authService.getAccessToken();\r\n     \r\n-    if (storedToken) {\r\n+    if (token && !this.authService.isTokenExpired()) {\r\n       return true;\r\n     }\r\n-\r\n-    // Si pas de token, initier le flux d'authentification\r\n-    this.googleAuthService.initGoogleAuth(state.url);\r\n+    \r\n+    if (this.authService.getRefreshToken()) {\r\n+      return this.authService.refreshToken().then(() => {\r\n+        return true;\r\n+      }).catch(() => {\r\n+        this.authService.initGoogleAuth(state.url);\r\n+        return false;\r\n+      });\r\n+    }\r\n+    \r\n+    this.authService.initGoogleAuth(state.url);\r\n     return false;\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748641938045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,12 @@\n     next: ActivatedRouteSnapshot,\r\n     state: RouterStateSnapshot\r\n   ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n     const token = this.authService.getAccessToken();\r\n-    \r\n+    if (!token || this.googleAuth.isTokenExpired()) {\r\n+      this.googleAuth.initGoogleAuth(state.url);\r\n+      return false;\r\n+    }\r\n     if (token && !this.authService.isTokenExpired()) {\r\n       return true;\r\n     }\r\n     \r\n"
                },
                {
                    "date": 1748641950174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n     next: ActivatedRouteSnapshot,\r\n     state: RouterStateSnapshot\r\n   ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n     const token = this.authService.getAccessToken();\r\n-    if (!token || this.googleAuth.isTokenExpired()) {\r\n+    if (!token || this.    if (token && !this.authService.isTokenExpired()) {\r\n+.isTokenExpired()) {\r\n       this.googleAuth.initGoogleAuth(state.url);\r\n       return false;\r\n     }\r\n     if (token && !this.authService.isTokenExpired()) {\r\n"
                },
                {
                    "date": 1748641956520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,9 @@\n     next: ActivatedRouteSnapshot,\r\n     state: RouterStateSnapshot\r\n   ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n     const token = this.authService.getAccessToken();\r\n-    if (!token || this.    if (token && !this.authService.isTokenExpired()) {\r\n-.isTokenExpired()) {\r\n+    if (!token || this.authService.isTokenExpired()) {\r\n       this.googleAuth.initGoogleAuth(state.url);\r\n       return false;\r\n     }\r\n     if (token && !this.authService.isTokenExpired()) {\r\n"
                },
                {
                    "date": 1748649323426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,30 +9,35 @@\n     private authService: GoogleAuthService,\r\n     private router: Router\r\n   ) {}\r\n \r\n-  canActivate(\r\n+  async canActivate(\r\n     next: ActivatedRouteSnapshot,\r\n     state: RouterStateSnapshot\r\n-  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n+  ): Promise<boolean | UrlTree> {\r\n     const token = this.authService.getAccessToken();\r\n-    if (!token || this.authService.isTokenExpired()) {\r\n-      this.googleAuth.initGoogleAuth(state.url);\r\n-      return false;\r\n-    }\r\n+    \r\n+    // Si token valide présent\r\n     if (token && !this.authService.isTokenExpired()) {\r\n       return true;\r\n     }\r\n-    \r\n+\r\n+    // Si refresh token disponible\r\n     if (this.authService.getRefreshToken()) {\r\n-      return this.authService.refreshToken().then(() => {\r\n+      try {\r\n+        await this.authService.refreshToken();\r\n         return true;\r\n-      }).catch(() => {\r\n-        this.authService.initGoogleAuth(state.url);\r\n-        return false;\r\n-      });\r\n+      } catch (error) {\r\n+        console.error('Échec du rafraîchissement:', error);\r\n+        return this.initAuthFlow(state.url);\r\n+      }\r\n     }\r\n-    \r\n-    this.authService.initGoogleAuth(state.url);\r\n-    return false;\r\n+\r\n+    // Sinon initier le flux\r\n+    return this.initAuthFlow(state.url);\r\n   }\r\n+\r\n+  private initAuthFlow(returnUrl: string): UrlTree {\r\n+    this.authService.initGoogleAuth(returnUrl);\r\n+    return this.router.createUrlTree(['/loading']); // Page intermédiaire\r\n+  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748602760079,
            "name": "Commit-0",
            "content": "@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GoogleAuthGuard implements CanActivate {\r\n  constructor(\r\n    private googleAuthService: GoogleAuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean | UrlTree {\r\n    const token = this.googleAuthService.getGoogleAccessToken();\r\n    \r\n    if (!token) {\r\n      // Rediriger vers l'authentification en sauvegardant l'URL courante\r\n      this.googleAuthService.initGoogleAuth(state.url);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n}"
        }
    ]
}