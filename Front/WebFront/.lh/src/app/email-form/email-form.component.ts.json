{
    "sourceFile": "src/app/email-form/email-form.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749638009632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749638009632,
            "name": "Commit-0",
            "content": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GmailService } from '../services/gmailService';\r\nimport { GoogleAuthService } from '../services/googleAuthSerivce';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-email-form',\r\n  templateUrl: './email-form.component.html',\r\n  styleUrls: ['./email-form.component.scss']\r\n})\r\nexport class EmailFormComponent implements OnInit, OnChanges {\r\n  @Input() draftEmail: any;\r\n  @Output() closeForm = new EventEmitter<void>();\r\n  @Output() emailSent = new EventEmitter<any>();\r\n  @Output() draftSaved = new EventEmitter<any>();\r\n\r\n  emailForm: FormGroup;\r\n  currentUserEmail: string = '';\r\n  isDraft: boolean = false;\r\n  isEditMode: boolean = false;\r\nattachments: File[] = [];\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private gmailService: GmailService,\r\n    private googleAuthService: GoogleAuthService,\r\n    private authService: AuthService\r\n  ) {\r\n    this.emailForm = this.fb.group({\r\n      to: ['', [Validators.required, Validators.email]],\r\n      subject: ['', Validators.required],\r\n      content: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const userProfile = this.authService.getDecodedToken();\r\n    this.currentUserEmail = userProfile?.email || '';\r\n    this.initializeForm();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['draftEmail'] && changes['draftEmail'].currentValue) {\r\n      this.initializeForm();\r\n    } else if (changes['draftEmail'] && !changes['draftEmail'].currentValue) {\r\n      this.resetForm();\r\n    }\r\n  }\r\n\r\n  initializeForm(): void {\r\n    this.resetForm();\r\n    if (this.draftEmail && this.draftEmail.id) {\r\n     this.isEditMode = true; // We are editing something\r\n      this.isDraft = true;    // If draftEmail is provided, we are editing a draft\r\n        this.emailForm.patchValue({\r\n        to: this.extractEmailAddress(this.draftEmail.headers?.to || ''),\r\n        subject: this.draftEmail.headers?.subject,\r\n       content: this.draftEmail.text || this.draftEmail.body?.text || (typeof this.draftEmail.body === 'string' ? this.draftEmail.body : null) || this.draftEmail.snippet || ''\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.isEditMode = false;\r\n    this.isDraft = false;\r\n    this.emailForm.reset();\r\n  }\r\n\r\n  extractEmailAddress(fullString: string): string {\r\n    if (!fullString) return '';\r\n    const matches = fullString.match(/<([^>]+)>/);\r\n    return matches ? matches[1] : fullString;\r\n  }\r\n\r\n  onClose(): void {\r\n    this.closeForm.emit();\r\n  }\r\nonFileSelected(event: any): void {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      this.attachments = [...this.attachments, ...Array.from(event.target.files as FileList)];\r\n\r\n    }\r\n  }\r\n\r\n  removeAttachment(file: File): void {\r\n    this.attachments = this.attachments.filter(f => f !== file);\r\n  }\r\n  onSend(): void {\r\n   if (this.emailForm.valid) {\r\n      const googleToken = this.googleAuthService.getAccessToken();\r\n\r\nif (!googleToken) {\r\n        console.error('No Google access token available');\r\n        alert('Aucun token d\\'accès Google disponible. Veuillez vous reconnecter à Google.');\r\n        // Optionally, trigger Google re-authentication\r\n        // this.googleAuthService.initGoogleAuth(this.router.url); // Assuming you have Router injected\r\n        return;\r\n      }\r\n      console.log(\"currecnt email\",this.currentUserEmail);\r\n      console.log('to', this.emailForm.value.to);\r\n      console.log('subject', this.emailForm.value.subject);\r\n      console.log('text', this.emailForm.value.content);\r\n      const formData = new FormData();\r\n      formData.append('accessToken', googleToken);\r\n      formData.append('from', this.currentUserEmail);\r\n      formData.append('to', this.emailForm.value.to);\r\n      formData.append('subject', this.emailForm.value.subject);\r\n      formData.append('text', this.emailForm.value.content);\r\n      \r\n      /* for (const file of this.attachments) {\r\n        formData.append('files', file, file.name); // 'files' should match the field name expected by your backend (e.g., multer)\r\n      } */\r\n\r\n      this.gmailService.sendEmail(googleToken,this.currentUserEmail, this.emailForm.value.to, this.emailForm.value.subject, this.emailForm.value.content, this.attachments).subscribe({\r\n        next: (response) => {\r\n          console.log('Email sent successfully', response);\r\n          this.emailSent.emit({\r\n          emailData: response,\r\n          shouldReload: true // Indicateur pour déclencher le rechargement\r\n        });\r\n          this.onClose();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error sending email', error);\r\n          alert(`Erreur lors de l'envoi: ${error.message || 'Une erreur inconnue est survenue.'}`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  onSaveDraft(): void {\r\n  if (this.emailForm.valid) {\r\n    const draftData = {\r\n      from: this.currentUserEmail, // Ajout de l'expéditeur\r\n      to: this.emailForm.value.to,\r\n      subject: this.emailForm.value.subject,\r\n      text: this.emailForm.value.content,\r\n      html: `<p>${this.emailForm.value.content.replace(/\\n/g, '<br>')}</p>`\r\n    };\r\n\r\n    const token = this.googleAuthService.getAccessToken();\r\n    if (token) {\r\n      this.gmailService.createDraft(token, draftData,this.currentUserEmail)\r\n        .subscribe({\r\n          next: (response) => {\r\n            console.log('Draft saved successfully', response);\r\n            this.draftSaved.emit(response);\r\n            this.onClose();\r\n          },\r\n          error: (error) => {\r\n            console.error('Error saving draft', error);\r\n            // Afficher plus de détails d'erreur\r\n            if (error.error) {\r\n              console.error('Server error details:', error.error);\r\n            }\r\n            alert(`Erreur lors de la sauvegarde du brouillon: ${error.message}`);\r\n          }\r\n        });\r\n    } else {\r\n      console.error('No access token available');\r\n      alert('Token d\\'accès non disponible. Veuillez vous reconnecter.');\r\n    }\r\n  }\r\n}\r\n}"
        }
    ]
}