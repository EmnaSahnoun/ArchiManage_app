{
    "sourceFile": "src/app/invitations/invitations.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1746440886146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746440897876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,17 @@\n-import { Component } from '@angular/core';\r\n import { Component, OnInit } from '@angular/core';\r\n import { Router } from '@angular/router';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AuthService } from '../services/auth.service';\r\n import { InvitationService } from '../services/invitation.service'; // Assurez-vous que ce service existe\r\n-\r\n+export interface ProjectInvitation {\r\n+  id: string;\r\n+  projectName: string;\r\n+  projectId: string;\r\n+  invitationDate: string | Date;\r\n+  status: 'PENDING' | 'ACCEPTED' | 'REFUSED'; // Ou un statut similaire\r\n+  // Ajoutez d'autres champs si nécessaire (ex: inviterName)\r\n+}\r\n @Component({\r\n   selector: 'app-invitations',\r\n   templateUrl: './invitations.component.html',\r\n   styleUrl: './invitations.component.scss'\r\n"
                },
                {
                    "date": 1746440918898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,7 +15,85 @@\n   selector: 'app-invitations',\r\n   templateUrl: './invitations.component.html',\r\n   styleUrl: './invitations.component.scss'\r\n })\r\n-export class InvitationsComponent {\r\n+export class InvitationsComponent implements OnInit {\r\n \r\n+  invitations: ProjectInvitation[] = [];\r\n+  filteredInvitations: ProjectInvitation[] = []; // Si vous voulez garder le filtrage\r\n+  isLoading: boolean = false;\r\n+  userId: string | null = null;\r\n+\r\n+  // Pas besoin de viewMode, searchQuery, editing etc. pour l'instant\r\n+\r\n+  constructor(\r\n+    private router: Router,\r\n+    private invitationService: InvitationService, // Injectez votre service d'invitation\r\n+    private authService: AuthService,\r\n+    private snackBar: MatSnackBar\r\n+  ) { }\r\n+\r\n+  ngOnInit(): void {\r\n+    this.userId = this.authService.getUserId(); // Obtenez l'ID de l'utilisateur connecté\r\n+    if (this.userId) {\r\n+      this.getInvitations();\r\n+    } else {\r\n+      console.error(\"User ID not found, cannot load invitations.\");\r\n+      this.snackBar.open('Impossible de charger les invitations: Utilisateur non identifié.', 'Fermer', { duration: 3000 });\r\n+    }\r\n+  }\r\n+\r\n+  getInvitations(): void {\r\n+    if (!this.userId) return;\r\n+\r\n+    this.isLoading = true;\r\n+    // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n+    this.invitationService.getPendingInvitationsForUser(this.userId).subscribe({\r\n+      next: (data) => {\r\n+        this.invitations = data;\r\n+        this.filteredInvitations = [...this.invitations]; // Initialiser le tableau filtré\r\n+        this.isLoading = false;\r\n+        console.log(\"Invitations chargées:\", this.invitations);\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Erreur lors de la récupération des invitations:', err);\r\n+        this.isLoading = false;\r\n+        this.snackBar.open('Erreur lors du chargement des invitations.', 'Fermer', { duration: 3000, panelClass: ['error-snackbar'] });\r\n+        this.invitations = [];\r\n+        this.filteredInvitations = [];\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  acceptInvitation(invitation: ProjectInvitation): void {\r\n+    this.isLoading = true;\r\n+    this.invitationService.acceptInvitation(invitation.id).subscribe({\r\n+      next: () => {\r\n+        this.isLoading = false;\r\n+        this.snackBar.open(`Invitation pour \"${invitation.projectName}\" acceptée.`, 'Fermer', { duration: 3000, panelClass: ['success-snackbar'] });\r\n+        this.getInvitations(); // Recharger la liste pour enlever l'invitation acceptée\r\n+      },\r\n+      error: (err) => {\r\n+        this.isLoading = false;\r\n+        console.error(\"Erreur lors de l'acceptation:\", err);\r\n+        this.snackBar.open(\"Échec de l'acceptation de l'invitation.\", 'Fermer', { duration: 3000, panelClass: ['error-snackbar'] });\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  refuseInvitation(invitation: ProjectInvitation): void {\r\n+    this.isLoading = true;\r\n+    this.invitationService.refuseInvitation(invitation.id).subscribe({\r\n+      next: () => {\r\n+        this.isLoading = false;\r\n+        this.snackBar.open(`Invitation pour \"${invitation.projectName}\" refusée.`, 'Fermer', { duration: 3000 });\r\n+        this.getInvitations(); // Recharger la liste pour enlever l'invitation refusée\r\n+      },\r\n+      error: (err) => {\r\n+        this.isLoading = false;\r\n+        console.error(\"Erreur lors du refus:\", err);\r\n+        this.snackBar.open(\"Échec du refus de l'invitation.\", 'Fermer', { duration: 3000, panelClass: ['error-snackbar'] });\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n }\r\n"
                },
                {
                    "date": 1746440931981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   // Pas besoin de viewMode, searchQuery, editing etc. pour l'instant\r\n \r\n   constructor(\r\n     private router: Router,\r\n-    private invitationService: InvitationService, // Injectez votre service d'invitation\r\n+    private invitationService: proj, // Injectez votre service d'invitation\r\n     private authService: AuthService,\r\n     private snackBar: MatSnackBar\r\n   ) { }\r\n \r\n"
                },
                {
                    "date": 1746440942220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { Router } from '@angular/router';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AuthService } from '../services/auth.service';\r\n import { InvitationService } from '../services/invitation.service'; // Assurez-vous que ce service existe\r\n+import { ProjectService } from '../services/ProjectService';\r\n export interface ProjectInvitation {\r\n   id: string;\r\n   projectName: string;\r\n   projectId: string;\r\n@@ -26,9 +27,9 @@\n   // Pas besoin de viewMode, searchQuery, editing etc. pour l'instant\r\n \r\n   constructor(\r\n     private router: Router,\r\n-    private invitationService: proj, // Injectez votre service d'invitation\r\n+    private projService: ProjectService, // Injectez votre service d'invitation\r\n     private authService: AuthService,\r\n     private snackBar: MatSnackBar\r\n   ) { }\r\n \r\n"
                },
                {
                    "date": 1746440948045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import { Component, OnInit } from '@angular/core';\r\n import { Router } from '@angular/router';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AuthService } from '../services/auth.service';\r\n-import { InvitationService } from '../services/invitation.service'; // Assurez-vous que ce service existe\r\n import { ProjectService } from '../services/ProjectService';\r\n export interface ProjectInvitation {\r\n   id: string;\r\n   projectName: string;\r\n@@ -27,9 +26,9 @@\n   // Pas besoin de viewMode, searchQuery, editing etc. pour l'instant\r\n \r\n   constructor(\r\n     private router: Router,\r\n-    private projService: ProjectService, // Injectez votre service d'invitation\r\n+    private projectService: ProjectService, // Injectez votre service d'invitation\r\n     private authService: AuthService,\r\n     private snackBar: MatSnackBar\r\n   ) { }\r\n \r\n"
                },
                {
                    "date": 1746440968834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     private snackBar: MatSnackBar\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n-    this.userId = this.authService.getUserId(); // Obtenez l'ID de l'utilisateur connecté\r\n+    this.userId = localStorage // Obtenez l'ID de l'utilisateur connecté\r\n     if (this.userId) {\r\n       this.getInvitations();\r\n     } else {\r\n       console.error(\"User ID not found, cannot load invitations.\");\r\n"
                },
                {
                    "date": 1746440977646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     private snackBar: MatSnackBar\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n-    this.userId = localStorage // Obtenez l'ID de l'utilisateur connecté\r\n+    this.userId = localStorage.getItem\r\n     if (this.userId) {\r\n       this.getInvitations();\r\n     } else {\r\n       console.error(\"User ID not found, cannot load invitations.\");\r\n"
                },
                {
                    "date": 1746441006262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     private snackBar: MatSnackBar\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n-    this.userId = localStorage.getItem\r\n+    this.userId = localStorage.getItem(\"user_id\");\r\n     if (this.userId) {\r\n       this.getInvitations();\r\n     } else {\r\n       console.error(\"User ID not found, cannot load invitations.\");\r\n@@ -46,9 +46,9 @@\n     if (!this.userId) return;\r\n \r\n     this.isLoading = true;\r\n     // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n-    this.invitationService.getPendingInvitationsForUser(this.userId).subscribe({\r\n+    this.prService.getPendingInvitationsForUser(this.userId).subscribe({\r\n       next: (data) => {\r\n         this.invitations = data;\r\n         this.filteredInvitations = [...this.invitations]; // Initialiser le tableau filtré\r\n         this.isLoading = false;\r\n"
                },
                {
                    "date": 1746441133097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,62 @@\n       console.error(\"User ID not found, cannot load invitations.\");\r\n       this.snackBar.open('Impossible de charger les invitations: Utilisateur non identifié.', 'Fermer', { duration: 3000 });\r\n     }\r\n   }\r\n+  getProjects(){\r\n+    const idCompany=localStorage.getItem(\"idAgence\");\r\n+    if (idCompany){\r\n+      this.projectService.getAllProjects(idCompany).subscribe({\r\n+        next: (projects) => {\r\n+          this.projects = projects;\r\n+          this.projects.forEach(project => {\r\n+            this.getDates(project);\r\n+            this.checkProjectStatus(project);\r\n+          }); \r\n+          \r\n+          console.log(\"les projets\",this.projects);\r\n+          \r\n+          if(this.isUser){\r\n+            const idUser=localStorage.getItem(\"user_id\");\r\n+            this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n+            this.projects = this.projects.filter(p => p.deleted !== true);\r\n+            this.projects.forEach(projet => {\r\n+              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n+                next: (projectAccesses) => {\r\n+                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n+                  projectAccesses.forEach(projectAccess => {\r\n+                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n+                      this.projects.push(projet);\r\n+                      \r\n \r\n+                    }\r\n+                  });\r\n+                  console.log(\"les projets de user\",this.projects)\r\n+                },\r\n+                error: (err) => {\r\n+                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n+                }\r\n+              });\r\n+            });\r\n+          } \r\n+          if(this.isAdmin){\r\n+            this.projects = this.projects.filter(p => p.deleted !== true);\r\n+            \r\n+          }            \r\n+          this.applyFilter(); // Appliquer le filtre une fois les projets chargés\r\n+          console.log(\"les projets\",this.projects);\r\n+          // Pour chaque projet, récupérer les détails des phases\r\n+        \r\n+          \r\n+        },\r\n+        error: (err) => {\r\n+          console.error('Erreur lors de la récupération des projets:', err);\r\n+          this.projects = []; // Vider en cas d'erreur\r\n+          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n+        }\r\n+      });\r\n+    };\r\n+  }\r\n   getInvitations(): void {\r\n     if (!this.userId) return;\r\n \r\n     this.isLoading = true;\r\n"
                },
                {
                    "date": 1746441154367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   invitations: ProjectInvitation[] = [];\r\n   filteredInvitations: ProjectInvitation[] = []; // Si vous voulez garder le filtrage\r\n   isLoading: boolean = false;\r\n   userId: string | null = null;\r\n-\r\n+  projects: any[] = [];\r\n   // Pas besoin de viewMode, searchQuery, editing etc. pour l'instant\r\n \r\n   constructor(\r\n     private router: Router,\r\n"
                },
                {
                    "date": 1746441170017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,13 +46,10 @@\n     if (idCompany){\r\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n         next: (projects) => {\r\n           this.projects = projects;\r\n-          this.projects.forEach(project => {\r\n-            this.getDates(project);\r\n-            this.checkProjectStatus(project);\r\n-          }); \r\n           \r\n+          \r\n           console.log(\"les projets\",this.projects);\r\n           \r\n           if(this.isUser){\r\n             const idUser=localStorage.getItem(\"user_id\");\r\n"
                },
                {
                    "date": 1746441185507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,36 +49,9 @@\n           this.projects = projects;\r\n           \r\n           \r\n           console.log(\"les projets\",this.projects);\r\n-          \r\n-          if(this.isUser){\r\n-            const idUser=localStorage.getItem(\"user_id\");\r\n-            this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n-            this.projects = this.projects.filter(p => p.deleted !== true);\r\n-            this.projects.forEach(projet => {\r\n-              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n-                next: (projectAccesses) => {\r\n-                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n-                  projectAccesses.forEach(projectAccess => {\r\n-                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n-                      this.projects.push(projet);\r\n-                      \r\n-\r\n-                    }\r\n-                  });\r\n-                  console.log(\"les projets de user\",this.projects)\r\n-                },\r\n-                error: (err) => {\r\n-                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n-                }\r\n-              });\r\n-            });\r\n-          } \r\n-          if(this.isAdmin){\r\n-            this.projects = this.projects.filter(p => p.deleted !== true);\r\n-            \r\n-          }            \r\n+                    \r\n           this.applyFilter(); // Appliquer le filtre une fois les projets chargés\r\n           console.log(\"les projets\",this.projects);\r\n           // Pour chaque projet, récupérer les détails des phases\r\n         \r\n"
                },
                {
                    "date": 1746441214093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n           \r\n           \r\n           console.log(\"les projets\",this.projects);\r\n                     \r\n-          this.applyFilter(); // Appliquer le filtre une fois les projets chargés\r\n+          //this.applyFilter(); // Appliquer le filtre une fois les projets chargés\r\n           console.log(\"les projets\",this.projects);\r\n           // Pour chaque projet, récupérer les détails des phases\r\n         \r\n           \r\n"
                },
                {
                    "date": 1746441230260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,21 +47,15 @@\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n         next: (projects) => {\r\n           this.projects = projects;\r\n           \r\n-          \r\n-          console.log(\"les projets\",this.projects);\r\n-                    \r\n-          //this.applyFilter(); // Appliquer le filtre une fois les projets chargés\r\n-          console.log(\"les projets\",this.projects);\r\n-          // Pour chaque projet, récupérer les détails des phases\r\n         \r\n           \r\n         },\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n           this.projects = []; // Vider en cas d'erreur\r\n-          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n+          //this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n         }\r\n       });\r\n     };\r\n   }\r\n"
                },
                {
                    "date": 1746441237349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,8 @@\n     if (idCompany){\r\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n         next: (projects) => {\r\n           this.projects = projects;\r\n-          \r\n-        \r\n-          \r\n         },\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n           this.projects = []; // Vider en cas d'erreur\r\n"
                },
                {
                    "date": 1746441245678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n       });\r\n     };\r\n   }\r\n   getInvitations(): void {\r\n+    this\r\n     if (!this.userId) return;\r\n \r\n     this.isLoading = true;\r\n     // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n"
                },
                {
                    "date": 1746441251629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n       });\r\n     };\r\n   }\r\n   getInvitations(): void {\r\n-    this\r\n+    this.get\r\n     if (!this.userId) return;\r\n \r\n     this.isLoading = true;\r\n     // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n"
                },
                {
                    "date": 1746441260319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,9 @@\n       });\r\n     };\r\n   }\r\n   getInvitations(): void {\r\n-    this.get\r\n-    if (!this.userId) return;\r\n+    this.getProjects();\r\n \r\n     this.isLoading = true;\r\n     // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n     this.prService.getPendingInvitationsForUser(this.userId).subscribe({\r\n"
                },
                {
                    "date": 1746441286956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n   getInvitations(): void {\r\n     this.getProjects();\r\n \r\n     this.isLoading = true;\r\n+    \r\n     // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n     this.prService.getPendingInvitationsForUser(this.userId).subscribe({\r\n       next: (data) => {\r\n         this.invitations = data;\r\n"
                },
                {
                    "date": 1746441308054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,26 @@\n   getInvitations(): void {\r\n     this.getProjects();\r\n \r\n     this.isLoading = true;\r\n-    \r\n+    this.projects.forEach(projet => {\r\n+      this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n+        next: (projectAccesses) => {\r\n+          console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n+          projectAccesses.forEach(projectAccess => {\r\n+            if (projectAccess.idUser ===this.idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n+              this.projects.push(projet);\r\n+              \r\n+\r\n+            }\r\n+          });\r\n+          console.log(\"les projets de user\",this.projects)\r\n+        },\r\n+        error: (err) => {\r\n+          console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n+        }\r\n+      });\r\n+    });\r\n     // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n     this.prService.getPendingInvitationsForUser(this.userId).subscribe({\r\n       next: (data) => {\r\n         this.invitations = data;\r\n"
                },
                {
                    "date": 1746441346074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n       this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n         next: (projectAccesses) => {\r\n           console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n           projectAccesses.forEach(projectAccess => {\r\n-            if (projectAccess.idUser ===this.idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n+            if (projectAccess.idUser ===this.idUser ){\r\n               this.projects.push(projet);\r\n               \r\n \r\n             }\r\n"
                },
                {
                    "date": 1746441356013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n       this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n         next: (projectAccesses) => {\r\n           console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n           projectAccesses.forEach(projectAccess => {\r\n-            if (projectAccess.idUser ===this.idUser ){\r\n+            if (projectAccess.idUser ===this.userId ){\r\n               this.projects.push(projet);\r\n               \r\n \r\n             }\r\n"
                },
                {
                    "date": 1746441373142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         next: (projectAccesses) => {\r\n           console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n           projectAccesses.forEach(projectAccess => {\r\n             if (projectAccess.idUser ===this.userId ){\r\n-              this.projects.push(projet);\r\n+              this.invi.push(projet);\r\n               \r\n \r\n             }\r\n           });\r\n"
                },
                {
                    "date": 1746441381039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         next: (projectAccesses) => {\r\n           console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n           projectAccesses.forEach(projectAccess => {\r\n             if (projectAccess.idUser ===this.userId ){\r\n-              this.invi.push(projet);\r\n+              this.invitations.push(projectAccess);\r\n               \r\n \r\n             }\r\n           });\r\n"
                },
                {
                    "date": 1746441389094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,24 +77,10 @@\n           console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n         }\r\n       });\r\n     });\r\n-    // Appelez votre service pour obtenir les invitations PENDING pour cet utilisateur\r\n-    this.prService.getPendingInvitationsForUser(this.userId).subscribe({\r\n-      next: (data) => {\r\n-        this.invitations = data;\r\n-        this.filteredInvitations = [...this.invitations]; // Initialiser le tableau filtré\r\n-        this.isLoading = false;\r\n-        console.log(\"Invitations chargées:\", this.invitations);\r\n-      },\r\n-      error: (err) => {\r\n-        console.error('Erreur lors de la récupération des invitations:', err);\r\n-        this.isLoading = false;\r\n-        this.snackBar.open('Erreur lors du chargement des invitations.', 'Fermer', { duration: 3000, panelClass: ['error-snackbar'] });\r\n-        this.invitations = [];\r\n-        this.filteredInvitations = [];\r\n-      }\r\n-    });\r\n+\r\n+   \r\n   }\r\n \r\n   acceptInvitation(invitation: ProjectInvitation): void {\r\n     this.isLoading = true;\r\n"
                },
                {
                    "date": 1746441557435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n       this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n         next: (projectAccesses) => {\r\n           console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n           projectAccesses.forEach(projectAccess => {\r\n-            if (projectAccess.idUser ===this.userId ){\r\n+            if (projectAccess.idUser ===this.userId && ){\r\n               this.invitations.push(projectAccess);\r\n               \r\n \r\n             }\r\n"
                },
                {
                    "date": 1746441574126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n       this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n         next: (projectAccesses) => {\r\n           console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n           projectAccesses.forEach(projectAccess => {\r\n-            if (projectAccess.idUser ===this.userId && ){\r\n+            if (projectAccess.idUser ===this.userId && projectAccess.invitationStatus ){\r\n               this.invitations.push(projectAccess);\r\n               \r\n \r\n             }\r\n"
                },
                {
                    "date": 1746443024117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,9 @@\n   // Pas besoin de viewMode, searchQuery, editing etc. pour l'instant\r\n \r\n   constructor(\r\n     private router: Router,\r\n-    private projectService: ProjectService, // Injectez votre service d'invitation\r\n-    private authService: AuthService,\r\n+    private projectService: ProjectService, \r\n     private snackBar: MatSnackBar\r\n   ) { }\r\n \r\n   ngOnInit(): void {\r\n@@ -64,9 +63,9 @@\n       this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n         next: (projectAccesses) => {\r\n           console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n           projectAccesses.forEach(projectAccess => {\r\n-            if (projectAccess.idUser ===this.userId && projectAccess.invitationStatus ){\r\n+            if (projectAccess.idUser ===this.userId && projectAccess.invitationStatus===\"PENDING\" ){\r\n               this.invitations.push(projectAccess);\r\n               \r\n \r\n             }\r\n"
                },
                {
                    "date": 1746443310444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n import { Router } from '@angular/router';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n import { AuthService } from '../services/auth.service';\r\n import { ProjectService } from '../services/ProjectService';\r\n+import { forkJoin, of } from 'rxjs'; // Importer forkJoin et of\r\n+import { catchError, map, switchMap } from 'rxjs/operators'; // Importer les opérateurs\r\n+\r\n export interface ProjectInvitation {\r\n   id: string;\r\n   projectName: string;\r\n   projectId: string;\r\n"
                },
                {
                    "date": 1746443332136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { forkJoin, of } from 'rxjs'; // Importer forkJoin et of\r\n import { catchError, map, switchMap } from 'rxjs/operators'; // Importer les opérateurs\r\n \r\n export interface ProjectInvitation {\r\n+  idProjectAccess: string;\r\n   id: string;\r\n   projectName: string;\r\n   projectId: string;\r\n   invitationDate: string | Date;\r\n"
                },
                {
                    "date": 1746443368851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n     if (idCompany){\r\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n         next: (projects) => {\r\n           this.projects = projects;\r\n+          this.fetchInvitationsForProjects();\r\n         },\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n           this.projects = []; // Vider en cas d'erreur\r\n"
                },
                {
                    "date": 1746443385463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,11 @@\n         },\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n           this.projects = []; // Vider en cas d'erreur\r\n-          //this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n+          this.isLoading = false; // Arrêter le chargement en cas d'erreur\r\n+          this.snackBar.open('Erreur lors du chargement des projets associés aux invitations.', 'Fermer', { duration: 3000, panelClass: ['error-snackbar'] });\r\n+       \r\n         }\r\n       });\r\n     };\r\n   }\r\n"
                },
                {
                    "date": 1746443400852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n       });\r\n     };\r\n   }\r\n   getInvitations(): void {\r\n-    th\r\n+    t\r\n \r\n     this.isLoading = true;\r\n     this.projects.forEach(projet => {\r\n       this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n"
                },
                {
                    "date": 1746447969395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \r\n   ngOnInit(): void {\r\n     this.userId = localStorage.getItem(\"user_id\");\r\n     if (this.userId) {\r\n-      this.getInvitations();\r\n+      this.getProjects();\r\n     } else {\r\n       console.error(\"User ID not found, cannot load invitations.\");\r\n       this.snackBar.open('Impossible de charger les invitations: Utilisateur non identifié.', 'Fermer', { duration: 3000 });\r\n     }\r\n"
                }
            ],
            "date": 1746440886146,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { InvitationService } from '../services/invitation.service'; // Assurez-vous que ce service existe\r\n\r\n@Component({\r\n  selector: 'app-invitations',\r\n  templateUrl: './invitations.component.html',\r\n  styleUrl: './invitations.component.scss'\r\n})\r\nexport class InvitationsComponent {\r\n\r\n}\r\n"
        }
    ]
}