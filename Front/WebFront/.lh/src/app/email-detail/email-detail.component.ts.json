{
    "sourceFile": "src/app/email-detail/email-detail.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1748712408715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748712421866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n"
                },
                {
                    "date": 1748712437161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { Component, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n@@ -45,9 +46,9 @@\n     }\r\n   }\r\n \r\n   goBack(): void {\r\n-    this.location.back(); // Simple navigation arrière\r\n+    //this.location.back(); // Simple navigation arrière\r\n     // Ou, pour revenir à l'onglet correct :\r\n     // this.router.navigate(['/emails'], { queryParams: { tab: this.activeTabContext } });\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1748712507640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,10 @@\n-import { Component, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router } from '@angular/router';\r\n+import { Component } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n   styleUrl: './email-detail.component.scss'\r\n })\r\n-export class EmailDetailComponent implements OnInit {\r\n-  email: any; // Ou un type/interface plus spécifique\r\n-  userEmail: string | null = null;\r\n-  activeTabContext: string | null = null;\r\n+export class EmailDetailComponent {\r\n \r\n-  constructor(\r\n-    private route: ActivatedRoute,\r\n-    private router: Router,\r\n-    private location: Location\r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    // Récupérer l'ID de la route (optionnel si vous utilisez seulement l'état)\r\n-    // const emailId = this.route.snapshot.paramMap.get('id');\r\n-\r\n-    // Récupérer les données de l'email passées via l'état du routeur\r\n-    const navigation = this.router.getCurrentNavigation();\r\n-    if (navigation?.extras.state) {\r\n-      this.email = navigation.extras.state['emailData'];\r\n-      this.userEmail = navigation.extras.state['userEmail'];\r\n-      this.activeTabContext = navigation.extras.state['activeTabContext'];\r\n-      console.log('Email data received in detail component:', this.email);\r\n-      console.log('User email:', this.userEmail);\r\n-      console.log('Active tab context:', this.activeTabContext);\r\n-    } else {\r\n-      // Gérer le cas où les données ne sont pas là (ex: refresh de la page)\r\n-      // Vous pourriez vouloir rediriger ou charger les données via un service\r\n-      console.error('Données de l\\'email non trouvées. Redirection ou chargement nécessaire.');\r\n-      // this.router.navigate(['/emails']); // Exemple de redirection\r\n-    }\r\n-\r\n-    if (!this.email) {\r\n-      // Si l'email n'est pas chargé (par exemple, après un F5 sur la page de détail),\r\n-      // vous devrez implémenter une logique pour le récupérer,\r\n-      // potentiellement en utilisant l'ID de l'email (emailId) et un service.\r\n-      // Pour l'instant, nous allons simplement afficher un message si les données ne sont pas là.\r\n-      console.warn('Aucune donnée d\\'email à afficher.');\r\n-    }\r\n-  }\r\n-\r\n-  goBack(): void {\r\n-    //this.location.back(); // Simple navigation arrière\r\n-    // Ou, pour revenir à l'onglet correct :\r\n-    // this.router.navigate(['/emails'], { queryParams: { tab: this.activeTabContext } });\r\n-  }\r\n }\r\n"
                },
                {
                    "date": 1748712861675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,7 +4,156 @@\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n   styleUrl: './email-detail.component.scss'\r\n })\r\n-export class EmailDetailComponent {\r\n+export class EmailDetailComponent OnInit, OnDestroy {\r\n+  email: DisplayableEmail | null = null;\r\n+  isLoading = true;\r\n+  error: string | null = null;\r\n+  \r\n+  private emailId: string | null = null;\r\n+  private currentUserEmail: string = '';\r\n+  // private activeTabContext: 'received' | 'sent' | 'draft' | null = null; // If needed for more complex back logic\r\n \r\n+  private destroy$ = new Subject<void>();\r\n+\r\n+  constructor(\r\n+    private route: ActivatedRoute,\r\n+    private router: Router,\r\n+    private gmailService: GmailService,\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private authService: AuthService,\r\n+    private sanitizer: DomSanitizer,\r\n+    private location: Location\r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    this.emailId = this.route.snapshot.paramMap.get('id');\r\n+    const navigationState = history.state;\r\n+\r\n+    // Attempt to get user email from state or fallback to decoded token\r\n+    this.currentUserEmail = navigationState?.userEmail || this.authService.getDecodedToken()?.email || '';\r\n+    // this.activeTabContext = navigationState?.activeTabContext || null;\r\n+\r\n+    if (this.emailId) {\r\n+      if (!this.currentUserEmail) {\r\n+        this.error = \"Impossible de récupérer l'identifiant de l'utilisateur. Veuillez vous reconnecter.\";\r\n+        this.isLoading = false;\r\n+        console.error('Current user email is not available.');\r\n+        return;\r\n+      }\r\n+      // If basic email data is passed via state, we can show it immediately\r\n+      // For a more robust approach, always fetch the full details.\r\n+      // If navigationState.emailData is a full email object, you could use it:\r\n+      // if (navigationState.emailData && navigationState.emailData.bodyHtml) {\r\n+      //   this.email = navigationState.emailData;\r\n+      //   this.isLoading = false;\r\n+      // } else {\r\n+      //   this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n+      // }\r\n+      this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n+    } else {\r\n+      this.error = \"Aucun ID d'email fourni.\";\r\n+      this.isLoading = false;\r\n+      console.error('Email ID is missing from route parameters.');\r\n+    }\r\n+  }\r\n+\r\n+  ngOnDestroy(): void {\r\n+    this.destroy$.next();\r\n+    this.destroy$.complete();\r\n+  }\r\n+\r\n+  private loadEmailDetails(emailId: string, userEmail: string): void {\r\n+    this.isLoading = true;\r\n+    this.error = null;\r\n+\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+    if (!googleToken) {\r\n+      this.error = 'Session Google expirée. Veuillez rafraîchir ou vous reconnecter.';\r\n+      this.isLoading = false;\r\n+      // Optionally, trigger re-authentication\r\n+      // this.googleAuthService.initGoogleAuth(this.router.url);\r\n+      return;\r\n+    }\r\n+\r\n+    this.gmailService.getEmail(googleToken, emailId, userEmail, true)\r\n+      .pipe(\r\n+        takeUntil(this.destroy$),\r\n+        finalize(() => this.isLoading = false),\r\n+        catchError(err => {\r\n+          console.error('Erreur lors du chargement du détail de l\\'email:', err);\r\n+          this.error = `Erreur lors du chargement de l'email: ${err.message || 'Veuillez réessayer.'}`;\r\n+          if (err.status === 401 && err.message?.includes('Google')) { // Or check specific error from backend\r\n+             this.handleGoogleTokenExpired();\r\n+          } else if (err.status === 401) { // App token expired\r\n+            this.authService.logout(); // Or handle app token refresh\r\n+            this.router.navigate(['/login']);\r\n+          }\r\n+          return []; // Return empty observable or throw error\r\n+        })\r\n+      )\r\n+      .subscribe((response: any) => {\r\n+        if (response && response.success && response.data) {\r\n+          this.email = response.data;\r\n+          // The backend should ideally process headers into a simple map.\r\n+          // If not, you might need to parse them here or adjust the template.\r\n+          // For example, if response.data.payload.headers is an array:\r\n+          // this.email.headers = this.parseHeaders(response.data.payload.headers);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue ou email non trouvé:', response);\r\n+          this.error = \"L'email demandé n'a pas pu être chargé ou n'existe pas.\";\r\n+          this.email = null;\r\n+        }\r\n+      });\r\n+  }\r\n+  \r\n+  private handleGoogleTokenExpired(): void {\r\n+    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+    if (refreshToken) {\r\n+      this.googleAuthService.refreshToken()\r\n+        .then(() => {\r\n+          if (this.emailId && this.currentUserEmail) {\r\n+            this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n+          }\r\n+        })\r\n+        .catch(() => this.googleAuthService.initGoogleAuth(this.router.url)); // Re-init auth flow\r\n+    } else {\r\n+      this.googleAuthService.initGoogleAuth(this.router.url);\r\n+    }\r\n+  }\r\n+\r\n+  getSafeHtml(htmlString?: string): SafeHtml {\r\n+    return this.sanitizer.bypassSecurityTrustHtml(htmlString || '');\r\n+  }\r\n+\r\n+  // Utility to extract email from \"Name <email@example.com>\"\r\n+  extractEmailAddress(fullString?: string): string {\r\n+    if (!fullString) return 'N/A';\r\n+    const matches = fullString.match(/<([^>]+)>/);\r\n+    return matches ? matches[1] : fullString;\r\n+  }\r\n+  \r\n+  // Utility to format names from \"Name <email@example.com>\" or just \"email@example.com\"\r\n+  formatSenderRecipient(fullString?: string): string {\r\n+    if (!fullString) return 'N/A';\r\n+    // If it's just an email, return it. Otherwise, try to return the name part.\r\n+    if (fullString.includes('<')) {\r\n+        return fullString.split('<')[0].trim() || this.extractEmailAddress(fullString);\r\n+    }\r\n+    return fullString;\r\n+  }\r\n+\r\n+\r\n+  goBack(): void {\r\n+    this.location.back();\r\n+  }\r\n+\r\n+  // Placeholder for attachment download\r\n+  downloadAttachment(attachment: any): void {\r\n+    console.log('Téléchargement de la pièce jointe (logique à implémenter):', attachment);\r\n+    // You would typically call a service method here:\r\n+    // this.gmailService.downloadAttachment(this.googleAuthService.getAccessToken(), this.email.id, attachment.id, this.currentUserEmail)\r\n+    //   .subscribe(blob => { /* Create and click a download link */ });\r\n+    alert(`Fonctionnalité de téléchargement pour \"${attachment.filename}\" non implémentée.`);\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1748712874033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n   styleUrl: './email-detail.component.scss'\r\n })\r\n-export class EmailDetailComponent OnInit, OnDestroy {\r\n+export class EmailDetailComponent implements OnInit, OnDestroy {\r\n   email: DisplayableEmail | null = null;\r\n   isLoading = true;\r\n   error: string | null = null;\r\n   \r\n"
                },
                {
                    "date": 1748712879173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnDestroy, OnInit } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n"
                },
                {
                    "date": 1748712886046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n+import { Subject } from 'rxjs';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n   styleUrl: './email-detail.component.scss'\r\n })\r\n export class EmailDetailComponent implements OnInit, OnDestroy {\r\n-  email: DisplayableEmail | null = null;\r\n+  email: any | null = null;\r\n   isLoading = true;\r\n   error: string | null = null;\r\n   \r\n   private emailId: string | null = null;\r\n"
                },
                {
                    "date": 1748712894009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n import { Subject } from 'rxjs';\r\n+import { GmailService } from '../services/gmailService';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n"
                },
                {
                    "date": 1748712899544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n import { Subject } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n+import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n+import { AuthService } from '../services/auth.service';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n"
                },
                {
                    "date": 1748712907980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n-import { Subject } from 'rxjs';\r\n+import { Subject, takeUntil } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { AuthService } from '../services/auth.service';\r\n+import { DomSanitizer } from '@angular/platform-browser';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n"
                },
                {
                    "date": 1748712916929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import { Component, OnDestroy, OnInit } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n-import { Subject, takeUntil } from 'rxjs';\r\n+import { catchError, finalize, Subject, takeUntil } from 'rxjs';\r\n import { GmailService } from '../services/gmailService';\r\n import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n import { AuthService } from '../services/auth.service';\r\n-import { DomSanitizer } from '@angular/platform-browser';\r\n+import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n"
                },
                {
                    "date": 1748712925953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,165 @@\n+import { Component, OnDestroy, OnInit } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n+import { catchError, finalize, Subject, takeUntil } from 'rxjs';\r\n+import { GmailService } from '../services/gmailService';\r\n+import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n+import { AuthService } from '../services/auth.service';\r\n+import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n+\r\n+@Component({\r\n+  selector: 'app-email-detail',\r\n+  templateUrl: './email-detail.component.html',\r\n+  styleUrl: './email-detail.component.scss'\r\n+})\r\n+export class EmailDetailComponent implements OnInit, OnDestroy {\r\n+  email: any | null = null;\r\n+  isLoading = true;\r\n+  error: string | null = null;\r\n+  \r\n+  private emailId: string | null = null;\r\n+  private currentUserEmail: string = '';\r\n+  // private activeTabContext: 'received' | 'sent' | 'draft' | null = null; // If needed for more complex back logic\r\n+\r\n+  private destroy$ = new Subject<void>();\r\n+\r\n+  constructor(\r\n+    private route: ActivatedRoute,\r\n+    private router: Router,\r\n+    private gmailService: GmailService,\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private authService: AuthService,\r\n+    private sanitizer: DomSanitizer,\r\n+    private location: Location\r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    this.emailId = this.route.snapshot.paramMap.get('id');\r\n+    const navigationState = history.state;\r\n+\r\n+    // Attempt to get user email from state or fallback to decoded token\r\n+    this.currentUserEmail = navigationState?.userEmail || this.authService.getDecodedToken()?.email || '';\r\n+    // this.activeTabContext = navigationState?.activeTabContext || null;\r\n+\r\n+    if (this.emailId) {\r\n+      if (!this.currentUserEmail) {\r\n+        this.error = \"Impossible de récupérer l'identifiant de l'utilisateur. Veuillez vous reconnecter.\";\r\n+        this.isLoading = false;\r\n+        console.error('Current user email is not available.');\r\n+        return;\r\n+      }\r\n+      // If basic email data is passed via state, we can show it immediately\r\n+      // For a more robust approach, always fetch the full details.\r\n+      // If navigationState.emailData is a full email object, you could use it:\r\n+      // if (navigationState.emailData && navigationState.emailData.bodyHtml) {\r\n+      //   this.email = navigationState.emailData;\r\n+      //   this.isLoading = false;\r\n+      // } else {\r\n+      //   this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n+      // }\r\n+      this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n+    } else {\r\n+      this.error = \"Aucun ID d'email fourni.\";\r\n+      this.isLoading = false;\r\n+      console.error('Email ID is missing from route parameters.');\r\n+    }\r\n+  }\r\n+\r\n+  ngOnDestroy(): void {\r\n+    this.destroy$.next();\r\n+    this.destroy$.complete();\r\n+  }\r\n+\r\n+  private loadEmailDetails(emailId: string, userEmail: string): void {\r\n+    this.isLoading = true;\r\n+    this.error = null;\r\n+\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+    if (!googleToken) {\r\n+      this.error = 'Session Google expirée. Veuillez rafraîchir ou vous reconnecter.';\r\n+      this.isLoading = false;\r\n+      // Optionally, trigger re-authentication\r\n+      // this.googleAuthService.initGoogleAuth(this.router.url);\r\n+      return;\r\n+    }\r\n+\r\n+    this.gmailService.getEmail(googleToken, emailId, userEmail, true)\r\n+      .pipe(\r\n+        takeUntil(this.destroy$),\r\n+        finalize(() => this.isLoading = false),\r\n+        catchError(err => {\r\n+          console.error('Erreur lors du chargement du détail de l\\'email:', err);\r\n+          this.error = `Erreur lors du chargement de l'email: ${err.message || 'Veuillez réessayer.'}`;\r\n+          if (err.status === 401 && err.message?.includes('Google')) { // Or check specific error from backend\r\n+             this.handleGoogleTokenExpired();\r\n+          } else if (err.status === 401) { // App token expired\r\n+            this.authService.logout(); // Or handle app token refresh\r\n+            this.router.navigate(['/login']);\r\n+          }\r\n+          return []; // Return empty observable or throw error\r\n+        })\r\n+      )\r\n+      .subscribe((response: any) => {\r\n+        if (response && response.success && response.data) {\r\n+          this.email = response.data;\r\n+          // The backend should ideally process headers into a simple map.\r\n+          // If not, you might need to parse them here or adjust the template.\r\n+          // For example, if response.data.payload.headers is an array:\r\n+          // this.email.headers = this.parseHeaders(response.data.payload.headers);\r\n+        } else {\r\n+          console.warn('Structure de réponse inattendue ou email non trouvé:', response);\r\n+          this.error = \"L'email demandé n'a pas pu être chargé ou n'existe pas.\";\r\n+          this.email = null;\r\n+        }\r\n+      });\r\n+  }\r\n+  \r\n+  private handleGoogleTokenExpired(): void {\r\n+    const refreshToken = this.googleAuthService.getRefreshToken();\r\n+    if (refreshToken) {\r\n+      this.googleAuthService.refreshToken()\r\n+        .then(() => {\r\n+          if (this.emailId && this.currentUserEmail) {\r\n+            this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n+          }\r\n+        })\r\n+        .catch(() => this.googleAuthService.initGoogleAuth(this.router.url)); // Re-init auth flow\r\n+    } else {\r\n+      this.googleAuthService.initGoogleAuth(this.router.url);\r\n+    }\r\n+  }\r\n+\r\n+  getSafeHtml(htmlString?: string): SafeHtml {\r\n+    return this.sanitizer.bypassSecurityTrustHtml(htmlString || '');\r\n+  }\r\n+\r\n+  // Utility to extract email from \"Name <email@example.com>\"\r\n+  extractEmailAddress(fullString?: string): string {\r\n+    if (!fullString) return 'N/A';\r\n+    const matches = fullString.match(/<([^>]+)>/);\r\n+    return matches ? matches[1] : fullString;\r\n+  }\r\n+  \r\n+  // Utility to format names from \"Name <email@example.com>\" or just \"email@example.com\"\r\n+  formatSenderRecipient(fullString?: string): string {\r\n+    if (!fullString) return 'N/A';\r\n+    // If it's just an email, return it. Otherwise, try to return the name part.\r\n+    if (fullString.includes('<')) {\r\n+        return fullString.split('<')[0].trim() || this.extractEmailAddress(fullString);\r\n+    }\r\n+    return fullString;\r\n+  }\r\n+\r\n+\r\n+  goBack(): void {\r\n+    //this.location.back();\r\n+  }\r\n+\r\n+  // Placeholder for attachment download\r\n+  downloadAttachment(attachment: any): void {\r\n+    console.log('Téléchargement de la pièce jointe (logique à implémenter):', attachment);\r\n+    // You would typically call a service method here:\r\n+    // this.gmailService.downloadAttachment(this.googleAuthService.getAccessToken(), this.email.id, attachment.id, this.currentUserEmail)\r\n+    //   .subscribe(blob => { /* Create and click a download link */ });\r\n+    alert(`Fonctionnalité de téléchargement pour \"${attachment.filename}\" non implémentée.`);\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1748713140919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,330 +1,10 @@\n-import { Component, OnDestroy, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router } from '@angular/router';\r\n-import { catchError, finalize, Subject, takeUntil } from 'rxjs';\r\n-import { GmailService } from '../services/gmailService';\r\n-import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n-import { AuthService } from '../services/auth.service';\r\n-import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n+import { Component } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n   styleUrl: './email-detail.component.scss'\r\n })\r\n-export class EmailDetailComponent implements OnInit, OnDestroy {\r\n-  email: any | null = null;\r\n-  isLoading = true;\r\n-  error: string | null = null;\r\n-  \r\n-  private emailId: string | null = null;\r\n-  private currentUserEmail: string = '';\r\n-  // private activeTabContext: 'received' | 'sent' | 'draft' | null = null; // If needed for more complex back logic\r\n+export class EmailDetailComponent {\r\n \r\n-  private destroy$ = new Subject<void>();\r\n-\r\n-  constructor(\r\n-    private route: ActivatedRoute,\r\n-    private router: Router,\r\n-    private gmailService: GmailService,\r\n-    private googleAuthService: GoogleAuthService,\r\n-    private authService: AuthService,\r\n-    private sanitizer: DomSanitizer,\r\n-    private location: Location\r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    this.emailId = this.route.snapshot.paramMap.get('id');\r\n-    const navigationState = history.state;\r\n-\r\n-    // Attempt to get user email from state or fallback to decoded token\r\n-    this.currentUserEmail = navigationState?.userEmail || this.authService.getDecodedToken()?.email || '';\r\n-    // this.activeTabContext = navigationState?.activeTabContext || null;\r\n-\r\n-    if (this.emailId) {\r\n-      if (!this.currentUserEmail) {\r\n-        this.error = \"Impossible de récupérer l'identifiant de l'utilisateur. Veuillez vous reconnecter.\";\r\n-        this.isLoading = false;\r\n-        console.error('Current user email is not available.');\r\n-        return;\r\n-      }\r\n-      // If basic email data is passed via state, we can show it immediately\r\n-      // For a more robust approach, always fetch the full details.\r\n-      // If navigationState.emailData is a full email object, you could use it:\r\n-      // if (navigationState.emailData && navigationState.emailData.bodyHtml) {\r\n-      //   this.email = navigationState.emailData;\r\n-      //   this.isLoading = false;\r\n-      // } else {\r\n-      //   this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n-      // }\r\n-      this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n-    } else {\r\n-      this.error = \"Aucun ID d'email fourni.\";\r\n-      this.isLoading = false;\r\n-      console.error('Email ID is missing from route parameters.');\r\n-    }\r\n-  }\r\n-\r\n-  ngOnDestroy(): void {\r\n-    this.destroy$.next();\r\n-    this.destroy$.complete();\r\n-  }\r\n-\r\n-  private loadEmailDetails(emailId: string, userEmail: string): void {\r\n-    this.isLoading = true;\r\n-    this.error = null;\r\n-\r\n-    const googleToken = this.googleAuthService.getAccessToken();\r\n-    if (!googleToken) {\r\n-      this.error = 'Session Google expirée. Veuillez rafraîchir ou vous reconnecter.';\r\n-      this.isLoading = false;\r\n-      // Optionally, trigger re-authentication\r\n-      // this.googleAuthService.initGoogleAuth(this.router.url);\r\n-      return;\r\n-    }\r\n-\r\n-    this.gmailService.getEmail(googleToken, emailId, userEmail, true)\r\n-      .pipe(\r\n-        takeUntil(this.destroy$),\r\n-        finalize(() => this.isLoading = false),\r\n-        catchError(err => {\r\n-          console.error('Erreur lors du chargement du détail de l\\'email:', err);\r\n-          this.error = `Erreur lors du chargement de l'email: ${err.message || 'Veuillez réessayer.'}`;\r\n-          if (err.status === 401 && err.message?.includes('Google')) { // Or check specific error from backend\r\n-             this.handleGoogleTokenExpired();\r\n-          } else if (err.status === 401) { // App token expired\r\n-            this.authService.logout(); // Or handle app token refresh\r\n-            this.router.navigate(['/login']);\r\n-          }\r\n-          return []; // Return empty observable or throw error\r\n-        })\r\n-      )\r\n-      .subscribe((response: any) => {\r\n-        if (response && response.success && response.data) {\r\n-          this.email = response.data;\r\n-          // The backend should ideally process headers into a simple map.\r\n-          // If not, you might need to parse them here or adjust the template.\r\n-          // For example, if response.data.payload.headers is an array:\r\n-          // this.email.headers = this.parseHeaders(response.data.payload.headers);\r\n-        } else {\r\n-          console.warn('Structure de réponse inattendue ou email non trouvé:', response);\r\n-          this.error = \"L'email demandé n'a pas pu être chargé ou n'existe pas.\";\r\n-          this.email = null;\r\n-        }\r\n-      });\r\n-  }\r\n-  \r\n-  private handleGoogleTokenExpired(): void {\r\n-    const refreshToken = this.googleAuthService.getRefreshToken();\r\n-    if (refreshToken) {\r\n-      this.googleAuthService.refreshToken()\r\n-        .then(() => {\r\n-          if (this.emailId && this.currentUserEmail) {\r\n-            this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n-          }\r\n-        })\r\n-        .catch(() => this.googleAuthService.initGoogleAuth(this.router.url)); // Re-init auth flow\r\n-    } else {\r\n-      this.googleAuthService.initGoogleAuth(this.router.url);\r\n-    }\r\n-  }\r\n-\r\n-  getSafeHtml(htmlString?: string): SafeHtml {\r\n-    return this.sanitizer.bypassSecurityTrustHtml(htmlString || '');\r\n-  }\r\n-\r\n-  // Utility to extract email from \"Name <email@example.com>\"\r\n-  extractEmailAddress(fullString?: string): string {\r\n-    if (!fullString) return 'N/A';\r\n-    const matches = fullString.match(/<([^>]+)>/);\r\n-    return matches ? matches[1] : fullString;\r\n-  }\r\n-  \r\n-  // Utility to format names from \"Name <email@example.com>\" or just \"email@example.com\"\r\n-  formatSenderRecipient(fullString?: string): string {\r\n-    if (!fullString) return 'N/A';\r\n-    // If it's just an email, return it. Otherwise, try to return the name part.\r\n-    if (fullString.includes('<')) {\r\n-        return fullString.split('<')[0].trim() || this.extractEmailAddress(fullString);\r\n-    }\r\n-    return fullString;\r\n-  }\r\n-\r\n-\r\n-  goBack(): void {\r\n-    //this.location.back();\r\n-  }\r\n-\r\n-  // Placeholder for attachment download\r\n-  downloadAttachment(attachment: any): void {\r\n-    console.log('Téléchargement de la pièce jointe (logique à implémenter):', attachment);\r\n-    // You would typically call a service method here:\r\n-    // this.gmailService.downloadAttachment(this.googleAuthService.getAccessToken(), this.email.id, attachment.id, this.currentUserEmail)\r\n-    //   .subscribe(blob => { /* Create and click a download link */ });\r\n-    alert(`Fonctionnalité de téléchargement pour \"${attachment.filename}\" non implémentée.`);\r\n-  }\r\n }\r\n-import { Component, OnDestroy, OnInit } from '@angular/core';\r\n-import { ActivatedRoute, Router } from '@angular/router';\r\n-import { catchError, finalize, Subject, takeUntil } from 'rxjs';\r\n-import { GmailService } from '../services/gmailService';\r\n-import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n-import { AuthService } from '../services/auth.service';\r\n-import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n-\r\n-@Component({\r\n-  selector: 'app-email-detail',\r\n-  templateUrl: './email-detail.component.html',\r\n-  styleUrl: './email-detail.component.scss'\r\n-})\r\n-export class EmailDetailComponent implements OnInit, OnDestroy {\r\n-  email: any | null = null;\r\n-  isLoading = true;\r\n-  error: string | null = null;\r\n-  \r\n-  private emailId: string | null = null;\r\n-  private currentUserEmail: string = '';\r\n-  // private activeTabContext: 'received' | 'sent' | 'draft' | null = null; // If needed for more complex back logic\r\n-\r\n-  private destroy$ = new Subject<void>();\r\n-\r\n-  constructor(\r\n-    private route: ActivatedRoute,\r\n-    private router: Router,\r\n-    private gmailService: GmailService,\r\n-    private googleAuthService: GoogleAuthService,\r\n-    private authService: AuthService,\r\n-    private sanitizer: DomSanitizer,\r\n-    private location: Location\r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    this.emailId = this.route.snapshot.paramMap.get('id');\r\n-    const navigationState = history.state;\r\n-\r\n-    // Attempt to get user email from state or fallback to decoded token\r\n-    this.currentUserEmail = navigationState?.userEmail || this.authService.getDecodedToken()?.email || '';\r\n-    // this.activeTabContext = navigationState?.activeTabContext || null;\r\n-\r\n-    if (this.emailId) {\r\n-      if (!this.currentUserEmail) {\r\n-        this.error = \"Impossible de récupérer l'identifiant de l'utilisateur. Veuillez vous reconnecter.\";\r\n-        this.isLoading = false;\r\n-        console.error('Current user email is not available.');\r\n-        return;\r\n-      }\r\n-      // If basic email data is passed via state, we can show it immediately\r\n-      // For a more robust approach, always fetch the full details.\r\n-      // If navigationState.emailData is a full email object, you could use it:\r\n-      // if (navigationState.emailData && navigationState.emailData.bodyHtml) {\r\n-      //   this.email = navigationState.emailData;\r\n-      //   this.isLoading = false;\r\n-      // } else {\r\n-      //   this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n-      // }\r\n-      this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n-    } else {\r\n-      this.error = \"Aucun ID d'email fourni.\";\r\n-      this.isLoading = false;\r\n-      console.error('Email ID is missing from route parameters.');\r\n-    }\r\n-  }\r\n-\r\n-  ngOnDestroy(): void {\r\n-    this.destroy$.next();\r\n-    this.destroy$.complete();\r\n-  }\r\n-\r\n-  private loadEmailDetails(emailId: string, userEmail: string): void {\r\n-    this.isLoading = true;\r\n-    this.error = null;\r\n-\r\n-    const googleToken = this.googleAuthService.getAccessToken();\r\n-    if (!googleToken) {\r\n-      this.error = 'Session Google expirée. Veuillez rafraîchir ou vous reconnecter.';\r\n-      this.isLoading = false;\r\n-      // Optionally, trigger re-authentication\r\n-      // this.googleAuthService.initGoogleAuth(this.router.url);\r\n-      return;\r\n-    }\r\n-\r\n-    this.gmailService.getEmail(googleToken, emailId, userEmail, true)\r\n-      .pipe(\r\n-        takeUntil(this.destroy$),\r\n-        finalize(() => this.isLoading = false),\r\n-        catchError(err => {\r\n-          console.error('Erreur lors du chargement du détail de l\\'email:', err);\r\n-          this.error = `Erreur lors du chargement de l'email: ${err.message || 'Veuillez réessayer.'}`;\r\n-          if (err.status === 401 && err.message?.includes('Google')) { // Or check specific error from backend\r\n-             this.handleGoogleTokenExpired();\r\n-          } else if (err.status === 401) { // App token expired\r\n-            this.authService.logout(); // Or handle app token refresh\r\n-            this.router.navigate(['/login']);\r\n-          }\r\n-          return []; // Return empty observable or throw error\r\n-        })\r\n-      )\r\n-      .subscribe((response: any) => {\r\n-        if (response && response.success && response.data) {\r\n-          this.email = response.data;\r\n-          // The backend should ideally process headers into a simple map.\r\n-          // If not, you might need to parse them here or adjust the template.\r\n-          // For example, if response.data.payload.headers is an array:\r\n-          // this.email.headers = this.parseHeaders(response.data.payload.headers);\r\n-        } else {\r\n-          console.warn('Structure de réponse inattendue ou email non trouvé:', response);\r\n-          this.error = \"L'email demandé n'a pas pu être chargé ou n'existe pas.\";\r\n-          this.email = null;\r\n-        }\r\n-      });\r\n-  }\r\n-  \r\n-  private handleGoogleTokenExpired(): void {\r\n-    const refreshToken = this.googleAuthService.getRefreshToken();\r\n-    if (refreshToken) {\r\n-      this.googleAuthService.refreshToken()\r\n-        .then(() => {\r\n-          if (this.emailId && this.currentUserEmail) {\r\n-            this.loadEmailDetails(this.emailId, this.currentUserEmail);\r\n-          }\r\n-        })\r\n-        .catch(() => this.googleAuthService.initGoogleAuth(this.router.url)); // Re-init auth flow\r\n-    } else {\r\n-      this.googleAuthService.initGoogleAuth(this.router.url);\r\n-    }\r\n-  }\r\n-\r\n-  getSafeHtml(htmlString?: string): SafeHtml {\r\n-    return this.sanitizer.bypassSecurityTrustHtml(htmlString || '');\r\n-  }\r\n-\r\n-  // Utility to extract email from \"Name <email@example.com>\"\r\n-  extractEmailAddress(fullString?: string): string {\r\n-    if (!fullString) return 'N/A';\r\n-    const matches = fullString.match(/<([^>]+)>/);\r\n-    return matches ? matches[1] : fullString;\r\n-  }\r\n-  \r\n-  // Utility to format names from \"Name <email@example.com>\" or just \"email@example.com\"\r\n-  formatSenderRecipient(fullString?: string): string {\r\n-    if (!fullString) return 'N/A';\r\n-    // If it's just an email, return it. Otherwise, try to return the name part.\r\n-    if (fullString.includes('<')) {\r\n-        return fullString.split('<')[0].trim() || this.extractEmailAddress(fullString);\r\n-    }\r\n-    return fullString;\r\n-  }\r\n-\r\n-\r\n-  goBack(): void {\r\n-    this.location.back();\r\n-  }\r\n-\r\n-  // Placeholder for attachment download\r\n-  downloadAttachment(attachment: any): void {\r\n-    console.log('Téléchargement de la pièce jointe (logique à implémenter):', attachment);\r\n-    // You would typically call a service method here:\r\n-    // this.gmailService.downloadAttachment(this.googleAuthService.getAccessToken(), this.email.id, attachment.id, this.currentUserEmail)\r\n-    //   .subscribe(blob => { /* Create and click a download link */ });\r\n-    alert(`Fonctionnalité de téléchargement pour \"${attachment.filename}\" non implémentée.`);\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1748713455099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,14 @@\n import { Component } from '@angular/core';\r\n-\r\n+import { Component, OnInit, OnDestroy, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\r\n+import { ActivatedRoute, Router } from '@angular/router';\r\n+import { Location } from '@angular/common';\r\n+import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n+import { GmailService } from '../services/gmailService';\r\n+import { GoogleAuthService } from '../services/googleAuthSerivce';\r\n+import { AuthService } from '../services/auth.service'; // Ajout pour récupérer l'email utilisateur si besoin\r\n+import { Subject } from 'rxjs';\r\n+import { takeUntil, finalize } from 'rxjs/operators';\r\n @Component({\r\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n   styleUrl: './email-detail.component.scss'\r\n"
                },
                {
                    "date": 1748713480917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-import { Component } from '@angular/core';\r\n import { Component, OnInit, OnDestroy, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n import { Location } from '@angular/common';\r\n import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n@@ -12,7 +11,250 @@\n   selector: 'app-email-detail',\r\n   templateUrl: './email-detail.component.html',\r\n   styleUrl: './email-detail.component.scss'\r\n })\r\n-export class EmailDetailComponent {\r\n+export class EmailDetailComponent implements OnInit, OnDestroy, OnChanges {\r\n+  @Input() emailDataInput: { emailData: any, userEmail: string, activeTabContext: 'received' | 'sent' | 'draft' } | null = null;\r\n+  @Output() closeDetailView = new EventEmitter<void>();\r\n+  @Output() emailAction = new EventEmitter<{ action: 'delete', emailId: string, tabContext: ActiveEmailTab | null }>();\r\n \r\n+  email: any | null = null;\r\n+  emailHtmlBody: SafeHtml | null = null;\r\n+  isLoading = false;\r\n+  error: string | null = null;\r\n+  \r\n+  userEmail: string = '';\r\n+  activeTabContext: ActiveEmailTab | null = null;\r\n+  emailId: string | null = null;\r\n+\r\n+  private destroy$ = new Subject<void>();\r\n+\r\n+  constructor(\r\n+    private route: ActivatedRoute,\r\n+    private router: Router,\r\n+    private location: Location,\r\n+    private sanitizer: DomSanitizer,\r\n+    private gmailService: GmailService,\r\n+    private googleAuthService: GoogleAuthService,\r\n+    private authService: AuthService // Injecté pour l'email utilisateur\r\n+  ) {}\r\n+\r\n+  ngOnChanges(changes: SimpleChanges): void {\r\n+    if (changes['emailDataInput'] && changes['emailDataInput'].currentValue) {\r\n+      this.isLoading = true;\r\n+      const input = changes['emailDataInput'].currentValue;\r\n+      this.email = input.emailData;\r\n+      this.userEmail = input.userEmail;\r\n+      this.activeTabContext = input.activeTabContext;\r\n+      this.emailId = this.email?.id;\r\n+      \r\n+      if (this.emailId) {\r\n+        this.processEmailContent();\r\n+        this.error = null;\r\n+      } else {\r\n+        this.error = \"Données d'email d'entrée invalides.\";\r\n+        this.email = null; // Assurez-vous que l'email est nullifié\r\n+      }\r\n+      this.isLoading = false;\r\n+    }\r\n+  }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Si les données ne sont pas fournies par @Input, essayez de les charger depuis la route\r\n+    if (!this.emailDataInput) {\r\n+      this.isLoading = true;\r\n+      const navigation = this.router.getCurrentNavigation();\r\n+      const state = navigation?.extras.state as { \r\n+        emailData: any, \r\n+        userEmail: string, \r\n+        activeTabContext: ActiveEmailTab \r\n+      };\r\n+\r\n+      this.route.paramMap.pipe(takeUntil(this.destroy$)).subscribe(params => {\r\n+        const routeEmailId = params.get('id');\r\n+        if (routeEmailId) {\r\n+            this.emailId = routeEmailId;\r\n+        }\r\n+      });\r\n+\r\n+      if (state && state.emailData) {\r\n+        this.email = state.emailData;\r\n+        this.userEmail = state.userEmail;\r\n+        this.activeTabContext = state.activeTabContext;\r\n+        // this.emailId est déjà défini par les params de la route ou implicitement par state.emailData.id\r\n+        if (!this.emailId && this.email) this.emailId = this.email.id;\r\n+\r\n+        this.processEmailContent();\r\n+        this.isLoading = false;\r\n+      } else if (this.emailId) {\r\n+        // Tentative de récupération de l'email utilisateur si non disponible\r\n+        if (!this.userEmail) {\r\n+            const decodedToken = this.authService.getDecodedToken();\r\n+            this.userEmail = decodedToken?.email || '';\r\n+        }\r\n+        if(this.userEmail){\r\n+            this.fetchEmailDetails(this.emailId);\r\n+        } else {\r\n+            this.error = \"Impossible de déterminer l'utilisateur actuel pour charger l'email.\";\r\n+            this.isLoading = false;\r\n+        }\r\n+      } else {\r\n+        this.error = \"Impossible de charger les détails de l'email. ID ou données manquantes.\";\r\n+        this.isLoading = false;\r\n+      }\r\n+    } else if (this.emailDataInput && !this.email) {\r\n+        // Cas où ngOnChanges a défini emailDataInput, mais this.email n'est pas encore initialisé\r\n+        this.email = this.emailDataInput.emailData;\r\n+        this.userEmail = this.emailDataInput.userEmail;\r\n+        this.activeTabContext = this.emailDataInput.activeTabContext;\r\n+        this.emailId = this.email?.id;\r\n+        if (this.emailId) {\r\n+            this.processEmailContent();\r\n+        }\r\n+        this.isLoading = false;\r\n+    }\r\n+  }\r\n+  \r\n+  private fetchEmailDetails(emailId: string): void {\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+\r\n+    if (!googleToken) {\r\n+      this.error = \"Session Google expirée ou invalide.\";\r\n+      this.isLoading = false;\r\n+      this.googleAuthService.initGoogleAuth(this.router.url);\r\n+      return;\r\n+    }\r\n+    if (!this.userEmail) {\r\n+        this.error = \"Information utilisateur manquante pour charger l'email.\";\r\n+        this.isLoading = false;\r\n+        return;\r\n+    }\r\n+\r\n+    this.gmailService.getEmail(googleToken, emailId, this.userEmail, true)\r\n+      .pipe(\r\n+        takeUntil(this.destroy$),\r\n+        finalize(() => this.isLoading = false)\r\n+      )\r\n+      .subscribe({\r\n+        next: (response) => {\r\n+          if (response && response.success && response.data) {\r\n+            this.email = response.data;\r\n+            this.processEmailContent();\r\n+          } else {\r\n+            this.error = response.message || \"Format de données incorrect pour l'email.\";\r\n+            this.email = null;\r\n+          }\r\n+        },\r\n+        error: (err) => {\r\n+          this.error = err.message || \"Erreur lors du chargement de l'email.\";\r\n+          if (err.status === 401) {\r\n+            this.googleAuthService.refreshToken()\r\n+                .then(() => this.fetchEmailDetails(emailId))\r\n+                .catch(() => this.googleAuthService.logout());\r\n+          }\r\n+        }\r\n+      });\r\n+  }\r\n+\r\n+  private processEmailContent(): void {\r\n+    if (this.email && this.email.body && this.email.body.html) {\r\n+      this.emailHtmlBody = this.sanitizer.bypassSecurityTrustHtml(this.email.body.html);\r\n+    } else if (this.email && this.email.body && this.email.body.text) {\r\n+      const plainTextAsHtml = this.email.body.text.replace(/\\n/g, '<br>');\r\n+      this.emailHtmlBody = this.sanitizer.bypassSecurityTrustHtml(plainTextAsHtml);\r\n+    } else if (this.email && this.email.snippet) {\r\n+        this.emailHtmlBody = this.sanitizer.bypassSecurityTrustHtml(this.email.snippet.replace(/\\n/g, '<br>'));\r\n+    } else {\r\n+      this.emailHtmlBody = this.sanitizer.bypassSecurityTrustHtml('<p><i>Contenu de l\\'email non disponible.</i></p>');\r\n+    }\r\n+  }\r\n+\r\n+  goBack(): void {\r\n+    if (this.emailDataInput) {\r\n+      this.closeDetailView.emit();\r\n+    } else {\r\n+      if (this.activeTabContext) {\r\n+        this.router.navigate(['/emails'], { queryParams: { tab: this.activeTabContext } });\r\n+      } else {\r\n+        this.router.navigate(['/emails']); // Fallback plus sûr que location.back()\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  getSender(): string {\r\n+    if (!this.email || !this.email.headers) return 'N/A';\r\n+    return this.email.headers.from || 'N/A';\r\n+  }\r\n+\r\n+  getRecipients(): string {\r\n+    if (!this.email || !this.email.headers) return 'N/A';\r\n+    const toHeader = this.email.headers.to;\r\n+    if (Array.isArray(toHeader)) return toHeader.join(', ');\r\n+    return toHeader || 'N/A';\r\n+  }\r\n+  \r\n+  getCc(): string {\r\n+    if (!this.email || !this.email.headers) return '';\r\n+    const ccHeader = this.email.headers.cc;\r\n+    if (Array.isArray(ccHeader)) return ccHeader.join(', ');\r\n+    return ccHeader || '';\r\n+  }\r\n+\r\n+  onDelete(): void {\r\n+    if (!this.emailId || !this.userEmail) {\r\n+      this.error = \"Impossible de supprimer l'email: informations manquantes.\";\r\n+      return;\r\n+    }\r\n+    const googleToken = this.googleAuthService.getAccessToken();\r\n+    if (!googleToken) {\r\n+      this.error = \"Session Google expirée.\";\r\n+      return;\r\n+    }\r\n+\r\n+    this.isLoading = true;\r\n+    this.gmailService.deleteEmail(googleToken, this.emailId, this.userEmail)\r\n+      .pipe(\r\n+        takeUntil(this.destroy$),\r\n+        finalize(() => this.isLoading = false)\r\n+      )\r\n+      .subscribe({\r\n+        next: () => {\r\n+          if (this.emailDataInput) {\r\n+            this.emailAction.emit({ action: 'delete', emailId: this.emailId!, tabContext: this.activeTabContext });\r\n+          } else {\r\n+            this.router.navigate(['/emails'], { \r\n+              queryParams: { \r\n+                tab: this.activeTabContext, \r\n+                emailDeleted: this.emailId \r\n+              } \r\n+            });\r\n+          }\r\n+        },\r\n+        error: (err) => {\r\n+          this.error = `Erreur lors de la suppression: ${err.message || 'Veuillez réessayer.'}`;\r\n+          if (err.status === 401) {\r\n+             this.googleAuthService.refreshToken()\r\n+                .then(() => this.onDelete()) // Réessayer après refresh\r\n+                .catch(() => this.googleAuthService.logout());\r\n+          }\r\n+        }\r\n+      });\r\n+  }\r\n+\r\n+  onReply(): void {\r\n+    // Logique pour répondre\r\n+    console.log('Répondre à:', this.emailId);\r\n+    // Exemple: this.router.navigate(['/compose'], { state: { mode: 'reply', originalEmail: this.email }});\r\n+  }\r\n+\r\n+  onForward(): void {\r\n+    // Logique pour transférer\r\n+    console.log('Transférer:', this.emailId);\r\n+    // Exemple: this.router.navigate(['/compose'], { state: { mode: 'forward', originalEmail: this.email }});\r\n+  }\r\n+\r\n+  ngOnDestroy(): void {\r\n+    this.destroy$.next();\r\n+    this.destroy$.complete();\r\n+  }\r\n }\r\n+\r\n"
                },
                {
                    "date": 1748713493181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,4 +257,5 @@\n     this.destroy$.complete();\r\n   }\r\n }\r\n \r\n+type ActiveEmailTab = 'received' | 'sent' | 'draft';\r\n"
                }
            ],
            "date": 1748712408715,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-email-detail',\r\n  templateUrl: './email-detail.component.html',\r\n  styleUrl: './email-detail.component.scss'\r\n})\r\nexport class EmailDetailComponent implements OnInit {\r\n  email: any; // Ou un type/interface plus spécifique\r\n  userEmail: string | null = null;\r\n  activeTabContext: string | null = null;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private location: Location\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Récupérer l'ID de la route (optionnel si vous utilisez seulement l'état)\r\n    // const emailId = this.route.snapshot.paramMap.get('id');\r\n\r\n    // Récupérer les données de l'email passées via l'état du routeur\r\n    const navigation = this.router.getCurrentNavigation();\r\n    if (navigation?.extras.state) {\r\n      this.email = navigation.extras.state['emailData'];\r\n      this.userEmail = navigation.extras.state['userEmail'];\r\n      this.activeTabContext = navigation.extras.state['activeTabContext'];\r\n      console.log('Email data received in detail component:', this.email);\r\n      console.log('User email:', this.userEmail);\r\n      console.log('Active tab context:', this.activeTabContext);\r\n    } else {\r\n      // Gérer le cas où les données ne sont pas là (ex: refresh de la page)\r\n      // Vous pourriez vouloir rediriger ou charger les données via un service\r\n      console.error('Données de l\\'email non trouvées. Redirection ou chargement nécessaire.');\r\n      // this.router.navigate(['/emails']); // Exemple de redirection\r\n    }\r\n\r\n    if (!this.email) {\r\n      // Si l'email n'est pas chargé (par exemple, après un F5 sur la page de détail),\r\n      // vous devrez implémenter une logique pour le récupérer,\r\n      // potentiellement en utilisant l'ID de l'email (emailId) et un service.\r\n      // Pour l'instant, nous allons simplement afficher un message si les données ne sont pas là.\r\n      console.warn('Aucune donnée d\\'email à afficher.');\r\n    }\r\n  }\r\n\r\n  goBack(): void {\r\n    this.location.back(); // Simple navigation arrière\r\n    // Ou, pour revenir à l'onglet correct :\r\n    // this.router.navigate(['/emails'], { queryParams: { tab: this.activeTabContext } });\r\n  }\r\n}\r\n"
        }
    ]
}