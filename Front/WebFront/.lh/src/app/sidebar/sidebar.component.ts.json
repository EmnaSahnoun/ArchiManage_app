{
    "sourceFile": "src/app/sidebar/sidebar.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 45,
            "patches": [
                {
                    "date": 1741687942503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741687950748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component } from '@angular/core';\r\n+import { Component, EventEmitter, Output } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-sidebar',\r\n   templateUrl: './sidebar.component.html',\r\n"
                },
                {
                    "date": 1742134030564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,5 +10,16 @@\n \r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n+  showSidebar = true;\r\n+  \r\n+    constructor(private router: Router) {\r\n+      this.router.events.subscribe(event => {\r\n+        if (event instanceof NavigationEnd) {\r\n+          console.log('Route actuelle:', event.url); // Debugging\r\n+          // Masquer la sidebar seulement sur login et signup\r\n+          this.showSidebar = !(event.url === '/signup' || event.url === '/login');\r\n+        }\r\n+      });\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1742134036798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n   styleUrl: './sidebar.component.scss'\r\n })\r\n export class SidebarComponent {\r\n   @Output() titleChange = new EventEmitter<string>();\r\n-\r\n+showSidebar = true;\r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n-  showSidebar = true;\r\n   \r\n-    constructor(private router: Router) {\r\n+  \r\n+  constructor(private router: Router) {\r\n       this.router.events.subscribe(event => {\r\n         if (event instanceof NavigationEnd) {\r\n           console.log('Route actuelle:', event.url); // Debugging\r\n           // Masquer la sidebar seulement sur login et signup\r\n"
                },
                {
                    "date": 1742134044117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { Component, EventEmitter, Output } from '@angular/core';\r\n+import { NavigationEnd, Router } from '@angular/router';\r\n \r\n @Component({\r\n   selector: 'app-sidebar',\r\n   templateUrl: './sidebar.component.html',\r\n"
                },
                {
                    "date": 1742134292713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n-  \r\n   constructor(private router: Router) {\r\n       this.router.events.subscribe(event => {\r\n         if (event instanceof NavigationEnd) {\r\n           console.log('Route actuelle:', event.url); // Debugging\r\n"
                },
                {
                    "date": 1742134300103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,11 @@\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n   constructor(private router: Router) {\r\n-      this.router.events.subscribe(event => {\r\n-        if (event instanceof NavigationEnd) {\r\n-          console.log('Route actuelle:', event.url); // Debugging\r\n-          // Masquer la sidebar seulement sur login et signup\r\n-          this.showSidebar = !(event.url === '/signup' || event.url === '/login');\r\n-        }\r\n-      });\r\n-    }\r\n+    this.router.events.subscribe(event => {\r\n+      if (event instanceof NavigationEnd) {\r\n+        console.log('Route actuelle:', event.url); // Debugging\r\n+        this.showSidebar = !(event.url === '/signup' || event.url === '/login');\r\n+      }\r\n+    });}\r\n }\r\n"
                },
                {
                    "date": 1742139258219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,6 @@\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n-  constructor(private router: Router) {\r\n-    this.router.events.subscribe(event => {\r\n-      if (event instanceof NavigationEnd) {\r\n-        console.log('Route actuelle:', event.url); // Debugging\r\n-        this.showSidebar = !(event.url === '/signup' || event.url === '/login');\r\n-      }\r\n-    });}\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1745009371529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n   styleUrl: './sidebar.component.scss'\r\n })\r\n export class SidebarComponent {\r\n   @Output() titleChange = new EventEmitter<string>();\r\n-showSidebar = true;\r\n+\r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n-  \r\n+  logou()\r\n }\r\n"
                },
                {
                    "date": 1745009384145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,15 @@\n   templateUrl: './sidebar.component.html',\r\n   styleUrl: './sidebar.component.scss'\r\n })\r\n export class SidebarComponent {\r\n+  constructor()\r\n   @Output() titleChange = new EventEmitter<string>();\r\n \r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n-  logou()\r\n+  logout(){\r\n+    this.authService.login();\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1745009400807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   templateUrl: './sidebar.component.html',\r\n   styleUrl: './sidebar.component.scss'\r\n })\r\n export class SidebarComponent {\r\n-  constructor()\r\n+  constructor(private authService:AuthService)\r\n   @Output() titleChange = new EventEmitter<string>();\r\n \r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n"
                },
                {
                    "date": 1745009408748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,21 @@\n import { Component, EventEmitter, Output } from '@angular/core';\r\n import { NavigationEnd, Router } from '@angular/router';\r\n+import { AuthService } from '../services/auth.service';\r\n \r\n @Component({\r\n   selector: 'app-sidebar',\r\n   templateUrl: './sidebar.component.html',\r\n   styleUrl: './sidebar.component.scss'\r\n })\r\n export class SidebarComponent {\r\n-  constructor(private authService:AuthService)\r\n+  constructor(private authService:AuthService){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n \r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n   logout(){\r\n-    this.authService.login();\r\n+    this.authService.lo();\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745009544826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,6 @@\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n-  logout(){\r\n-    this.authService.lo();\r\n-  }\r\n+ \r\n }\r\n"
                },
                {
                    "date": 1745326420969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,6 +14,9 @@\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n- \r\n+  logout(){\r\n+    this.authService.logout();\r\n+    \r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1745326441267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,7 @@\n   }\r\n   \r\n   logout(){\r\n     this.authService.logout();\r\n-    \r\n+    this.r\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745326450789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,18 @@\n   templateUrl: './sidebar.component.html',\r\n   styleUrl: './sidebar.component.scss'\r\n })\r\n export class SidebarComponent {\r\n-  constructor(private authService:AuthService){}\r\n+  constructor(private authService:AuthService,\r\n+    private \r\n+  ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n \r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n   logout(){\r\n     this.authService.logout();\r\n-    this.r\r\n+    this.router\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745326460677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   styleUrl: './sidebar.component.scss'\r\n })\r\n export class SidebarComponent {\r\n   constructor(private authService:AuthService,\r\n-    private \r\n+    private router:Router\r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n \r\n   changeTitle(title: string): void {\r\n@@ -18,7 +18,7 @@\n   }\r\n   \r\n   logout(){\r\n     this.authService.logout();\r\n-    this.router\r\n+    this.router.\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745326465791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,7 +18,7 @@\n   }\r\n   \r\n   logout(){\r\n     this.authService.logout();\r\n-    this.router.\r\n+    this.router.navigate(['/login']);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745326843417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,7 +18,6 @@\n   }\r\n   \r\n   logout(){\r\n     this.authService.logout();\r\n-    this.router.navigate(['/login']);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745326961618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,7 @@\n   }\r\n   \r\n   logout(){\r\n     this.authService.logout();\r\n+    this.router.navigate(['/login']);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745623610698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,28 @@\n-import { Component, EventEmitter, Output } from '@angular/core';\r\n+import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\n import { NavigationEnd, Router } from '@angular/router';\r\n import { AuthService } from '../services/auth.service';\r\n \r\n @Component({\r\n   selector: 'app-sidebar',\r\n   templateUrl: './sidebar.component.html',\r\n   styleUrl: './sidebar.component.scss'\r\n })\r\n-export class SidebarComponent {\r\n+export class SidebarComponent implements OnInit {\r\n+  isUser:boolean=false;\r\n+  isAdmin:boolean=false;\r\n+\r\n+  isSuperAdmin:boolean=false;\r\n   constructor(private authService:AuthService,\r\n     private router:Router\r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n-\r\n+ngOnInit(): void {\r\n+  this.isUser=this.authService.isUser();\r\n+  this.isSuperAdmin=this.authService.isSuperAdmin();\r\n+  this.isAdmin=this.authService.isAdmin();\r\n+  console\r\n+}\r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n   \r\n"
                },
                {
                    "date": 1745623624425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n ngOnInit(): void {\r\n   this.isUser=this.authService.isUser();\r\n   this.isSuperAdmin=this.authService.isSuperAdmin();\r\n   this.isAdmin=this.authService.isAdmin();\r\n-  console\r\n+  \r\n }\r\n   changeTitle(title: string): void {\r\n     this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n   }\r\n"
                },
                {
                    "date": 1746446002379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n \r\n @Component({\r\n   selector: 'app-sidebar',\r\n   templateUrl: './sidebar.component.html',\r\n-  styleUrl: './sidebar.component.scss'\r\n+  styleUrl: './sidebar.component.scss',\r\n+  standalone: false\r\n })\r\n export class SidebarComponent implements OnInit {\r\n   isUser:boolean=false;\r\n   isAdmin:boolean=false;\r\n"
                },
                {
                    "date": 1746974088045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   isUser:boolean=false;\r\n   isAdmin:boolean=false;\r\n \r\n   isSuperAdmin:boolean=false;\r\n+  titre\r\n   constructor(private authService:AuthService,\r\n     private router:Router\r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n"
                },
                {
                    "date": 1746974093798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   isUser:boolean=false;\r\n   isAdmin:boolean=false;\r\n \r\n   isSuperAdmin:boolean=false;\r\n-  titre\r\n+  titre:string\r\n   constructor(private authService:AuthService,\r\n     private router:Router\r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n"
                },
                {
                    "date": 1746974105490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   isUser:boolean=false;\r\n   isAdmin:boolean=false;\r\n \r\n   isSuperAdmin:boolean=false;\r\n-  titre:string\r\n+  titre:string=\"ArchiManage\";\r\n   constructor(private authService:AuthService,\r\n     private router:Router\r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n"
                },
                {
                    "date": 1746974129388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,6 @@\n   logout(){\r\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1746974135090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,6 @@\n   logout(){\r\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n-  \r\n+  this\r\n }\r\n"
                },
                {
                    "date": 1746974144198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,6 @@\n   logout(){\r\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n-  this\r\n+  getAgence\r\n }\r\n"
                },
                {
                    "date": 1746974152241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,6 @@\n   logout(){\r\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n-  getAgence\r\n+  getAgence(id:string)\r\n }\r\n"
                },
                {
                    "date": 1746974206599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,81 @@\n   logout(){\r\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n-  getAgence(id:string)\r\n+  getAgence(id:string){\r\n+\r\n+  }\r\n+  getProjects(){\r\n+    const idCompany=localStorage.getItem(\"idAgence\");\r\n+    if (idCompany){\r\n+      this.projectService.getAllProjects(idCompany).subscribe({\r\n+        next: (projects) => {\r\n+          \r\n+          projects.forEach(project => {\r\n+            this.getDates(project);\r\n+            this.checkProjectStatus(project);\r\n+          }); \r\n+          \r\n+          \r\n+          \r\n+          if(this.isUser){\r\n+            \r\n+            const idUser=localStorage.getItem(\"user_id\");\r\n+            //this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n+            \r\n+            projects.filter(p => p.deleted !== true);\r\n+            console.log(\"les projets apres le 1er filtrage\",projects);\r\n+            projects.forEach(projet => {\r\n+              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n+                next: (projectAccesses) => {\r\n+                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n+                  projectAccesses.forEach(projectAccess => {\r\n+                    console.log(\"projectAccess.idUser ===idUser\",projectAccess.idUser ===idUser)\r\n+                    console.log(\"projectAccess.invitationStatus===\",projectAccess.invitationStatus===\"ACCEPTED\")\r\n+                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n+                      this.projects.push(projet);                      \r\n+                    }\r\n+                  });\r\n+                  \r\n+                  this.projects.forEach((projet:any) => {\r\n+                    this.getProgress(projet);\r\n+                  })\r\n+                  console.log(\"les projets de user\",this.projects)\r\n+                  this.applyFilter();\r\n+                },\r\n+                error: (err) => {\r\n+                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n+                }\r\n+              });\r\n+            });\r\n+          } \r\n+          else if(this.isAdmin){\r\n+            this.projects = projects.filter(p => p.deleted !== true);\r\n+            this.projects.forEach((projet:any) => {\r\n+              this.getProgress(projet);\r\n+            })\r\n+            console.log(\"les projets de user\",this.projects)\r\n+            this.applyFilter();\r\n+          }   \r\n+          else{\r\n+            this.projects = projects.filter(p => p.deleted !== true);\r\n+            this.projects.forEach((projet:any) => {\r\n+              this.getProgress(projet);\r\n+            })\r\n+            this.applyFilter();\r\n+          }        \r\n+           // Appliquer le filtre une fois les projets chargés\r\n+          console.log(\"les projets\",this.projects);\r\n+          // Pour chaque projet, récupérer les détails des phases\r\n+        \r\n+          \r\n+        },\r\n+        error: (err) => {\r\n+          console.error('Erreur lors de la récupération des projets:', err);\r\n+          this.projects = []; // Vider en cas d'erreur\r\n+          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n+        }\r\n+      });\r\n+    };\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1746974221690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   logout(){\r\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n-  getAgence(id:string){\r\n+  getAgence(){\r\n \r\n   }\r\n   getProjects(){\r\n     const idCompany=localStorage.getItem(\"idAgence\");\r\n"
                },
                {
                    "date": 1746974227560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   getAgence(){\r\n \r\n   }\r\n   getProjects(){\r\n-    const idCompany=localStorage.getItem(\"idAgence\");\r\n+    \r\n     if (idCompany){\r\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n         next: (projects) => {\r\n           \r\n"
                },
                {
                    "date": 1746974236739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,80 +32,8 @@\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n   getAgence(){\r\n-\r\n+const idCompany=localStorage.getItem(\"idAgence\");\r\n   }\r\n-  getProjects(){\r\n-    \r\n-    if (idCompany){\r\n-      this.projectService.getAllProjects(idCompany).subscribe({\r\n-        next: (projects) => {\r\n-          \r\n-          projects.forEach(project => {\r\n-            this.getDates(project);\r\n-            this.checkProjectStatus(project);\r\n-          }); \r\n-          \r\n-          \r\n-          \r\n-          if(this.isUser){\r\n-            \r\n-            const idUser=localStorage.getItem(\"user_id\");\r\n-            //this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n-            \r\n-            projects.filter(p => p.deleted !== true);\r\n-            console.log(\"les projets apres le 1er filtrage\",projects);\r\n-            projects.forEach(projet => {\r\n-              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n-                next: (projectAccesses) => {\r\n-                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n-                  projectAccesses.forEach(projectAccess => {\r\n-                    console.log(\"projectAccess.idUser ===idUser\",projectAccess.idUser ===idUser)\r\n-                    console.log(\"projectAccess.invitationStatus===\",projectAccess.invitationStatus===\"ACCEPTED\")\r\n-                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n-                      this.projects.push(projet);                      \r\n-                    }\r\n-                  });\r\n-                  \r\n-                  this.projects.forEach((projet:any) => {\r\n-                    this.getProgress(projet);\r\n-                  })\r\n-                  console.log(\"les projets de user\",this.projects)\r\n-                  this.applyFilter();\r\n-                },\r\n-                error: (err) => {\r\n-                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n-                }\r\n-              });\r\n-            });\r\n-          } \r\n-          else if(this.isAdmin){\r\n-            this.projects = projects.filter(p => p.deleted !== true);\r\n-            this.projects.forEach((projet:any) => {\r\n-              this.getProgress(projet);\r\n-            })\r\n-            console.log(\"les projets de user\",this.projects)\r\n-            this.applyFilter();\r\n-          }   \r\n-          else{\r\n-            this.projects = projects.filter(p => p.deleted !== true);\r\n-            this.projects.forEach((projet:any) => {\r\n-              this.getProgress(projet);\r\n-            })\r\n-            this.applyFilter();\r\n-          }        \r\n-           // Appliquer le filtre une fois les projets chargés\r\n-          console.log(\"les projets\",this.projects);\r\n-          // Pour chaque projet, récupérer les détails des phases\r\n-        \r\n-          \r\n-        },\r\n-        error: (err) => {\r\n-          console.error('Erreur lors de la récupération des projets:', err);\r\n-          this.projects = []; // Vider en cas d'erreur\r\n-          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n-        }\r\n-      });\r\n-    };\r\n-  }\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1746974257891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n \r\n   isSuperAdmin:boolean=false;\r\n   titre:string=\"ArchiManage\";\r\n   constructor(private authService:AuthService,\r\n-    private router:Router\r\n+    private router:Router,\r\n+    \r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n ngOnInit(): void {\r\n   this.isUser=this.authService.isUser();\r\n@@ -33,7 +34,77 @@\n     this.router.navigate(['/login']);\r\n   }\r\n   getAgence(){\r\n const idCompany=localStorage.getItem(\"idAgence\");\r\n+ if (idCompany){\r\n+      this.projectService.getAllProjects(idCompany).subscribe({\r\n+        next: (projects) => {\r\n+          \r\n+          projects.forEach(project => {\r\n+            this.getDates(project);\r\n+            this.checkProjectStatus(project);\r\n+          }); \r\n+          \r\n+          \r\n+          \r\n+          if(this.isUser){\r\n+            \r\n+            const idUser=localStorage.getItem(\"user_id\");\r\n+            //this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n+            \r\n+            projects.filter(p => p.deleted !== true);\r\n+            console.log(\"les projets apres le 1er filtrage\",projects);\r\n+            projects.forEach(projet => {\r\n+              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n+                next: (projectAccesses) => {\r\n+                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n+                  projectAccesses.forEach(projectAccess => {\r\n+                    console.log(\"projectAccess.idUser ===idUser\",projectAccess.idUser ===idUser)\r\n+                    console.log(\"projectAccess.invitationStatus===\",projectAccess.invitationStatus===\"ACCEPTED\")\r\n+                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n+                      this.projects.push(projet);                      \r\n+                    }\r\n+                  });\r\n+                  \r\n+                  this.projects.forEach((projet:any) => {\r\n+                    this.getProgress(projet);\r\n+                  })\r\n+                  console.log(\"les projets de user\",this.projects)\r\n+                  this.applyFilter();\r\n+                },\r\n+                error: (err) => {\r\n+                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n+                }\r\n+              });\r\n+            });\r\n+          } \r\n+          else if(this.isAdmin){\r\n+            this.projects = projects.filter(p => p.deleted !== true);\r\n+            this.projects.forEach((projet:any) => {\r\n+              this.getProgress(projet);\r\n+            })\r\n+            console.log(\"les projets de user\",this.projects)\r\n+            this.applyFilter();\r\n+          }   \r\n+          else{\r\n+            this.projects = projects.filter(p => p.deleted !== true);\r\n+            this.projects.forEach((projet:any) => {\r\n+              this.getProgress(projet);\r\n+            })\r\n+            this.applyFilter();\r\n+          }        \r\n+           // Appliquer le filtre une fois les projets chargés\r\n+          console.log(\"les projets\",this.projects);\r\n+          // Pour chaque projet, récupérer les détails des phases\r\n+        \r\n+          \r\n+        },\r\n+        error: (err) => {\r\n+          console.error('Erreur lors de la récupération des projets:', err);\r\n+          this.projects = []; // Vider en cas d'erreur\r\n+          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n+        }\r\n+      });\r\n+    };\r\n   }\r\n   \r\n }\r\n"
                },
                {
                    "date": 1746974291831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\n import { NavigationEnd, Router } from '@angular/router';\r\n import { AuthService } from '../services/auth.service';\r\n+import { ProjectService } from '../services/ProjectService';\r\n \r\n @Component({\r\n   selector: 'app-sidebar',\r\n   templateUrl: './sidebar.component.html',\r\n@@ -15,9 +16,9 @@\n   isSuperAdmin:boolean=false;\r\n   titre:string=\"ArchiManage\";\r\n   constructor(private authService:AuthService,\r\n     private router:Router,\r\n-    \r\n+    private projectService:ProjectService,\r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n ngOnInit(): void {\r\n   this.isUser=this.authService.isUser();\r\n@@ -36,69 +37,9 @@\n   getAgence(){\r\n const idCompany=localStorage.getItem(\"idAgence\");\r\n  if (idCompany){\r\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n-        next: (projects) => {\r\n-          \r\n-          projects.forEach(project => {\r\n-            this.getDates(project);\r\n-            this.checkProjectStatus(project);\r\n-          }); \r\n-          \r\n-          \r\n-          \r\n-          if(this.isUser){\r\n-            \r\n-            const idUser=localStorage.getItem(\"user_id\");\r\n-            //this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n-            \r\n-            projects.filter(p => p.deleted !== true);\r\n-            console.log(\"les projets apres le 1er filtrage\",projects);\r\n-            projects.forEach(projet => {\r\n-              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n-                next: (projectAccesses) => {\r\n-                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n-                  projectAccesses.forEach(projectAccess => {\r\n-                    console.log(\"projectAccess.idUser ===idUser\",projectAccess.idUser ===idUser)\r\n-                    console.log(\"projectAccess.invitationStatus===\",projectAccess.invitationStatus===\"ACCEPTED\")\r\n-                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n-                      this.projects.push(projet);                      \r\n-                    }\r\n-                  });\r\n-                  \r\n-                  this.projects.forEach((projet:any) => {\r\n-                    this.getProgress(projet);\r\n-                  })\r\n-                  console.log(\"les projets de user\",this.projects)\r\n-                  this.applyFilter();\r\n-                },\r\n-                error: (err) => {\r\n-                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n-                }\r\n-              });\r\n-            });\r\n-          } \r\n-          else if(this.isAdmin){\r\n-            this.projects = projects.filter(p => p.deleted !== true);\r\n-            this.projects.forEach((projet:any) => {\r\n-              this.getProgress(projet);\r\n-            })\r\n-            console.log(\"les projets de user\",this.projects)\r\n-            this.applyFilter();\r\n-          }   \r\n-          else{\r\n-            this.projects = projects.filter(p => p.deleted !== true);\r\n-            this.projects.forEach((projet:any) => {\r\n-              this.getProgress(projet);\r\n-            })\r\n-            this.applyFilter();\r\n-          }        \r\n-           // Appliquer le filtre une fois les projets chargés\r\n-          console.log(\"les projets\",this.projects);\r\n-          // Pour chaque projet, récupérer les détails des phases\r\n-        \r\n-          \r\n-        },\r\n+        ,\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n           this.projects = []; // Vider en cas d'erreur\r\n           this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n"
                },
                {
                    "date": 1746974300227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,13 +37,13 @@\n   getAgence(){\r\n const idCompany=localStorage.getItem(\"idAgence\");\r\n  if (idCompany){\r\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n+        \r\n         ,\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n-          this.projects = []; // Vider en cas d'erreur\r\n-          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n+           // Appliquer le filtre même en cas d'erreur (liste vide)\r\n         }\r\n       });\r\n     };\r\n   }\r\n"
                },
                {
                    "date": 1746974307872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n   }\r\n   getAgence(){\r\n const idCompany=localStorage.getItem(\"idAgence\");\r\n  if (idCompany){\r\n-      this.projectService.getAllProjects(idCompany).subscribe({\r\n-        \r\n+      this.projectService.get.subscribe({\r\n+\r\n         ,\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n            // Appliquer le filtre même en cas d'erreur (liste vide)\r\n"
                },
                {
                    "date": 1746974580270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\n import { NavigationEnd, Router } from '@angular/router';\r\n import { AuthService } from '../services/auth.service';\r\n-import { ProjectService } from '../services/ProjectService';\r\n \r\n @Component({\r\n   selector: 'app-sidebar',\r\n   templateUrl: './sidebar.component.html',\r\n@@ -36,14 +35,74 @@\n   }\r\n   getAgence(){\r\n const idCompany=localStorage.getItem(\"idAgence\");\r\n  if (idCompany){\r\n-      this.projectService.get.subscribe({\r\n-\r\n-        ,\r\n+      this.projectService.getAllProjects(idCompany).subscribe({\r\n+        next: (projects) => {\r\n+          \r\n+          projects.forEach(project => {\r\n+            this.getDates(project);\r\n+            this.checkProjectStatus(project);\r\n+          }); \r\n+          \r\n+          \r\n+          \r\n+          if(this.isUser){\r\n+            \r\n+            const idUser=localStorage.getItem(\"user_id\");\r\n+            //this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n+            \r\n+            projects.filter(p => p.deleted !== true);\r\n+            console.log(\"les projets apres le 1er filtrage\",projects);\r\n+            projects.forEach(projet => {\r\n+              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n+                next: (projectAccesses) => {\r\n+                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n+                  projectAccesses.forEach(projectAccess => {\r\n+                    console.log(\"projectAccess.idUser ===idUser\",projectAccess.idUser ===idUser)\r\n+                    console.log(\"projectAccess.invitationStatus===\",projectAccess.invitationStatus===\"ACCEPTED\")\r\n+                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n+                      this.projects.push(projet);                      \r\n+                    }\r\n+                  });\r\n+                  \r\n+                  this.projects.forEach((projet:any) => {\r\n+                    this.getProgress(projet);\r\n+                  })\r\n+                  console.log(\"les projets de user\",this.projects)\r\n+                  this.applyFilter();\r\n+                },\r\n+                error: (err) => {\r\n+                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n+                }\r\n+              });\r\n+            });\r\n+          } \r\n+          else if(this.isAdmin){\r\n+            this.projects = projects.filter(p => p.deleted !== true);\r\n+            this.projects.forEach((projet:any) => {\r\n+              this.getProgress(projet);\r\n+            })\r\n+            console.log(\"les projets de user\",this.projects)\r\n+            this.applyFilter();\r\n+          }   \r\n+          else{\r\n+            this.projects = projects.filter(p => p.deleted !== true);\r\n+            this.projects.forEach((projet:any) => {\r\n+              this.getProgress(projet);\r\n+            })\r\n+            this.applyFilter();\r\n+          }        \r\n+           // Appliquer le filtre une fois les projets chargés\r\n+          console.log(\"les projets\",this.projects);\r\n+          // Pour chaque projet, récupérer les détails des phases\r\n+        \r\n+          \r\n+        },\r\n         error: (err) => {\r\n           console.error('Erreur lors de la récupération des projets:', err);\r\n-           // Appliquer le filtre même en cas d'erreur (liste vide)\r\n+          this.projects = []; // Vider en cas d'erreur\r\n+          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n         }\r\n       });\r\n     };\r\n   }\r\n"
                },
                {
                    "date": 1746974591266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   isSuperAdmin:boolean=false;\r\n   titre:string=\"ArchiManage\";\r\n   constructor(private authService:AuthService,\r\n     private router:Router,\r\n-    private projectService:ProjectService,\r\n+    \r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n ngOnInit(): void {\r\n   this.isUser=this.authService.isUser();\r\n@@ -32,9 +32,9 @@\n   logout(){\r\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n-  getAgence(){\r\n+  getTitleAgence(){\r\n const idCompany=localStorage.getItem(\"idAgence\");\r\n  if (idCompany){\r\n       this.projectService.getAllProjects(idCompany).subscribe({\r\n         next: (projects) => {\r\n"
                },
                {
                    "date": 1746974599695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,77 +34,7 @@\n     this.router.navigate(['/login']);\r\n   }\r\n   getTitleAgence(){\r\n const idCompany=localStorage.getItem(\"idAgence\");\r\n- if (idCompany){\r\n-      this.projectService.getAllProjects(idCompany).subscribe({\r\n-        next: (projects) => {\r\n-          \r\n-          projects.forEach(project => {\r\n-            this.getDates(project);\r\n-            this.checkProjectStatus(project);\r\n-          }); \r\n-          \r\n-          \r\n-          \r\n-          if(this.isUser){\r\n-            \r\n-            const idUser=localStorage.getItem(\"user_id\");\r\n-            //this.projects=this.projects.filter(p => p.idAdmin === idUser);\r\n-            \r\n-            projects.filter(p => p.deleted !== true);\r\n-            console.log(\"les projets apres le 1er filtrage\",projects);\r\n-            projects.forEach(projet => {\r\n-              this.projectService.getProjectAccessByIdProject(projet.id).subscribe({\r\n-                next: (projectAccesses) => {\r\n-                  console.log(\"Accès pour le projet\", projet.id, \":\", projectAccesses);\r\n-                  projectAccesses.forEach(projectAccess => {\r\n-                    console.log(\"projectAccess.idUser ===idUser\",projectAccess.idUser ===idUser)\r\n-                    console.log(\"projectAccess.invitationStatus===\",projectAccess.invitationStatus===\"ACCEPTED\")\r\n-                    if (projectAccess.idUser ===idUser && projectAccess.invitationStatus===\"ACCEPTED\" ){\r\n-                      this.projects.push(projet);                      \r\n-                    }\r\n-                  });\r\n-                  \r\n-                  this.projects.forEach((projet:any) => {\r\n-                    this.getProgress(projet);\r\n-                  })\r\n-                  console.log(\"les projets de user\",this.projects)\r\n-                  this.applyFilter();\r\n-                },\r\n-                error: (err) => {\r\n-                  console.error(\"Erreur récupération accès projet\", projet.id, \":\", err);\r\n-                }\r\n-              });\r\n-            });\r\n-          } \r\n-          else if(this.isAdmin){\r\n-            this.projects = projects.filter(p => p.deleted !== true);\r\n-            this.projects.forEach((projet:any) => {\r\n-              this.getProgress(projet);\r\n-            })\r\n-            console.log(\"les projets de user\",this.projects)\r\n-            this.applyFilter();\r\n-          }   \r\n-          else{\r\n-            this.projects = projects.filter(p => p.deleted !== true);\r\n-            this.projects.forEach((projet:any) => {\r\n-              this.getProgress(projet);\r\n-            })\r\n-            this.applyFilter();\r\n-          }        \r\n-           // Appliquer le filtre une fois les projets chargés\r\n-          console.log(\"les projets\",this.projects);\r\n-          // Pour chaque projet, récupérer les détails des phases\r\n-        \r\n-          \r\n-        },\r\n-        error: (err) => {\r\n-          console.error('Erreur lors de la récupération des projets:', err);\r\n-          this.projects = []; // Vider en cas d'erreur\r\n-          this.applyFilter(); // Appliquer le filtre même en cas d'erreur (liste vide)\r\n-        }\r\n-      });\r\n-    };\r\n   }\r\n   \r\n }\r\n"
                },
                {
                    "date": 1746974609902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n   getTitleAgence(){\r\n-const idCompany=localStorage.getItem(\"idAgence\");\r\n+const idCompany=localStorage.getItem(\"AgencyName\");\r\n+\r\n   }\r\n   \r\n }\r\n"
                },
                {
                    "date": 1746974615802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     this.authService.logout();\r\n     this.router.navigate(['/login']);\r\n   }\r\n   getTitleAgence(){\r\n-const idCompany=localStorage.getItem(\"AgencyName\");\r\n+const name=localStorage.getItem(\"AgencyName\");\r\n \r\n   }\r\n   \r\n }\r\n"
                },
                {
                    "date": 1746974622350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,11 @@\n     this.router.navigate(['/login']);\r\n   }\r\n   getTitleAgence(){\r\n const name=localStorage.getItem(\"AgencyName\");\r\n+if(name){\r\n+  this.titre=name;\r\n+})\r\n \r\n   }\r\n   \r\n }\r\n"
                },
                {
                    "date": 1746974672309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n     \r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n ngOnInit(): void {\r\n+  thi\r\n   this.isUser=this.authService.isUser();\r\n   this.isSuperAdmin=this.authService.isSuperAdmin();\r\n   this.isAdmin=this.authService.isAdmin();\r\n   \r\n@@ -36,9 +37,9 @@\n   getTitleAgence(){\r\n const name=localStorage.getItem(\"AgencyName\");\r\n if(name){\r\n   this.titre=name;\r\n-})\r\n+}\r\n \r\n   }\r\n   \r\n }\r\n"
                },
                {
                    "date": 1746974677479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     \r\n   ){}\r\n   @Output() titleChange = new EventEmitter<string>();\r\n ngOnInit(): void {\r\n-  thi\r\n+  this.getTitleAgence();\r\n   this.isUser=this.authService.isUser();\r\n   this.isSuperAdmin=this.authService.isSuperAdmin();\r\n   this.isAdmin=this.authService.isAdmin();\r\n   \r\n"
                }
            ],
            "date": 1741687942503,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrl: './sidebar.component.scss'\r\n})\r\nexport class SidebarComponent {\r\n  @Output() titleChange = new EventEmitter<string>();\r\n\r\n  changeTitle(title: string): void {\r\n    this.titleChange.emit(title);  // Émettre un événement pour changer le titre\r\n  }\r\n}\r\n"
        }
    ]
}