{
    "sourceFile": "src/app/super-admin/agency-details-modal-wrapper.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1745529842638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745529856804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   // Méthode de fallback si getAgencyByName n'existe pas\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n       return this.agenceService.getAllAgencies().pipe(\r\n-          map(agencies => {\r\n+          map(agencies:any => {\r\n               const foundAgency = agencies.find(a => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n               }\r\n"
                },
                {
                    "date": 1745529865891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,10 @@\n   // Méthode de fallback si getAgencyByName n'existe pas\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n       return this.agenceService.getAllAgencies().pipe(\r\n-          map(agencies:any => {\r\n-              const foundAgency = agencies.find(a => a.name === name);\r\n+          map((agencies:any) => {\r\n+              const foundAgency = agencies.find((a => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n               }\r\n               return foundAgency;\r\n"
                },
                {
                    "date": 1745529877736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n       return this.agenceService.getAllAgencies().pipe(\r\n           map((agencies:any) => {\r\n-              const foundAgency = agencies.find((a => a.name === name);\r\n+              const foundAgency = agencies.find((a:any) => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n               }\r\n               return foundAgency;\r\n"
                },
                {
                    "date": 1745529884257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,11 @@\n import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\n import { Subscription, throwError, of, Observable } from 'rxjs';\r\n import { switchMap, catchError, finalize, take, map } from 'rxjs/operators';\r\n import { AgencyDetailsComponent } from './agency-details/agency-details.component'; // La vraie modale\r\n-import { AgenceService } from '../../services/agenceService';\r\n+\r\n import { ToastrService } from 'ngx-toastr';\r\n+import { AgenceService } from '../services/agenceService';\r\n \r\n @Component({\r\n   selector: 'app-agency-details-modal-wrapper',\r\n   template: '', // Pas de HTML visible\r\n"
                },
                {
                    "date": 1745529949042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,12 +37,8 @@\n           return throwError(() => new Error('Agency name is missing'));\r\n         }\r\n         const agencyName = decodeURIComponent(agencyNameParam); // Décode le nom\r\n         console.log(`Wrapper: Recherche de l'agence nommée '${agencyName}'`);\r\n-\r\n-        // Utilisez la méthode de votre service pour trouver l'agence par nom\r\n-        // Adaptez ceci si votre service a une méthode différente ou si vous devez filtrer getAllAgencies\r\n-        // return this.agenceService.getAgencyByName(agencyName); // Méthode idéale\r\n         return this.findAgencyByNameFallback(agencyName); // Ou utilisez le fallback\r\n       }),\r\n       catchError(err => {\r\n         console.error('Wrapper: Erreur lors de la récupération de l\\'agence:', err);\r\n"
                },
                {
                    "date": 1745529974934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n \r\n   // Méthode de fallback si getAgencyByName n'existe pas\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n-      return this.agenceService.getAllAgencies().pipe(\r\n+      return this.agenceService.getA().pipe(\r\n           map((agencies:any) => {\r\n               const foundAgency = agencies.find((a:any) => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n"
                },
                {
                    "date": 1745529982083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n \r\n   // Méthode de fallback si getAgencyByName n'existe pas\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n-      return this.agenceService.getA().pipe(\r\n+      return this.agenceService.getAgence().pipe(\r\n           map((agencies:any) => {\r\n               const foundAgency = agencies.find((a:any) => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n"
                },
                {
                    "date": 1745530058436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n \r\n   // Méthode de fallback si getAgencyByName n'existe pas\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n-      return this.agenceService.getAgence().pipe(\r\n+      return this.agenceService.getAllAgencies().pipe(\r\n           map((agencies:any) => {\r\n               const foundAgency = agencies.find((a:any) => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n"
                },
                {
                    "date": 1745530280636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n \r\n   // Méthode de fallback si getAgencyByName n'existe pas\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n-      return this.agenceService.getAllAgencies().pipe(\r\n+      return this.agenceService.getIdGroup.pipe(\r\n           map((agencies:any) => {\r\n               const foundAgency = agencies.find((a:any) => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n"
                },
                {
                    "date": 1745530299590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,10 +62,10 @@\n \r\n   // Méthode de fallback si getAgencyByName n'existe pas\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n-      return this.agenceService.getIdGroup.pipe(\r\n-          map((agencies:any) => {\r\n+      return this.agenceService.getIdGroup(name).pipe(\r\n+          map((id:any) => {\r\n               const foundAgency = agencies.find((a:any) => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n               }\r\n"
                },
                {
                    "date": 1745531028263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,89 @@\n-// agency-details-modal-wrapper.component.ts\r\n+// src/app/super-admin/agency-details-modal-wrapper.component.ts\r\n import { Component, OnInit, OnDestroy } from '@angular/core';\r\n import { ActivatedRoute, Router } from '@angular/router';\r\n import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\n import { Subscription, throwError, of, Observable } from 'rxjs';\r\n import { switchMap, catchError, finalize, take, map } from 'rxjs/operators';\r\n-import { AgencyDetailsComponent } from './agency-details/agency-details.component'; // La vraie modale\r\n-\r\n+import { AgencyDetailsComponent } from './agency-details/agency-details.component';\r\n+import { AgenceService } from '../services/agenceService'; // Ajustez le chemin\r\n import { ToastrService } from 'ngx-toastr';\r\n-import { AgenceService } from '../services/agenceService';\r\n \r\n @Component({\r\n   selector: 'app-agency-details-modal-wrapper',\r\n-  template: '', // Pas de HTML visible\r\n+  template: '',\r\n })\r\n export class AgencyDetailsModalWrapperComponent implements OnInit, OnDestroy {\r\n   private modalRef: NgbModalRef | null = null;\r\n-  private dataSub: Subscription | null = null;\r\n+  private routeParamsSub: Subscription | null = null; // Renommé pour clarté\r\n \r\n   constructor(\r\n     private modalService: NgbModal,\r\n-    private route: ActivatedRoute, // Pour lire le paramètre :name\r\n-    private router: Router,         // Pour naviguer en arrière\r\n+    private route: ActivatedRoute,\r\n+    private router: Router,\r\n     private agenceService: AgenceService,\r\n     private toastr: ToastrService\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    this.dataSub = this.route.params.pipe(\r\n-      take(1),\r\n-      switchMap(params => {\r\n-        // Récupère le nom depuis l'URL et le décode\r\n-        const agencyNameParam = params['name'];\r\n-        if (!agencyNameParam) {\r\n-          this.toastr.error('Nom de l\\'agence manquant dans l\\'URL.');\r\n+    console.log(\"Wrapper: ngOnInit activé.\");\r\n+    // --- ESSAYER DE LIRE L'ÉTAT DE LA NAVIGATION ---\r\n+    const agencyFromState = history.state?.agency;\r\n+    console.log(\"Wrapper: history.state:\", history.state); // Pour déboguer\r\n+\r\n+    if (agencyFromState && typeof agencyFromState === 'object' && agencyFromState.name) {\r\n+      // CAS IDÉAL : L'objet a été passé via state\r\n+      console.log(\"Wrapper: Agence trouvée dans history.state. Ouverture modale...\", agencyFromState);\r\n+      // On utilise directement l'objet reçu\r\n+      // Utiliser setTimeout pour éviter ExpressionChangedAfterItHasBeenCheckedError potentiel\r\n+      // bien que l'ouverture de modale soit souvent asynchrone de toute façon.\r\n+      setTimeout(() => this.openModal(agencyFromState), 0);\r\n+\r\n+    } else {\r\n+      // FALLBACK : L'objet n'est pas dans state (refresh, lien direct)\r\n+      // On utilise le paramètre :name de l'URL pour fetcher l'agence\r\n+      console.warn(\"Wrapper: Agence non trouvée dans history.state. Tentative de récupération via paramètre d'URL.\");\r\n+      this.routeParamsSub = this.route.params.pipe(\r\n+        take(1),\r\n+        switchMap(params => {\r\n+          const agencyNameParam = params['name'];\r\n+          if (!agencyNameParam) {\r\n+            return throwError(() => new Error('Nom de l\\'agence manquant dans l\\'URL (fallback).'));\r\n+          }\r\n+          const agencyName = decodeURIComponent(agencyNameParam);\r\n+          console.log(`Wrapper (Fallback): Recherche de l'agence nommée '${agencyName}'`);\r\n+          // Utilisez votre méthode de service (idéalement getAgencyByName ou le fallback)\r\n+          return this.findAgencyByNameFallback(agencyName); // Ou this.agenceService.getAgencyByName(agencyName)\r\n+        }),\r\n+        catchError(err => {\r\n+          console.error('Wrapper (Fallback): Erreur lors de la récupération:', err);\r\n+          this.toastr.error(`Impossible de charger les détails (fallback) : ${err.message}`, 'Erreur');\r\n           this.navigateBack();\r\n-          return throwError(() => new Error('Agency name is missing'));\r\n+          return throwError(() => err);\r\n+        })\r\n+      ).subscribe({\r\n+        next: (fetchedAgency) => {\r\n+          if (fetchedAgency) {\r\n+            console.log(\"Wrapper (Fallback): Agence trouvée, ouverture modale...\", fetchedAgency);\r\n+            this.openModal(fetchedAgency);\r\n+          } else {\r\n+            this.toastr.error('Agence non trouvée (fallback).', 'Erreur');\r\n+            this.navigateBack();\r\n+          }\r\n         }\r\n-        const agencyName = decodeURIComponent(agencyNameParam); // Décode le nom\r\n-        console.log(`Wrapper: Recherche de l'agence nommée '${agencyName}'`);\r\n-        return this.findAgencyByNameFallback(agencyName); // Ou utilisez le fallback\r\n-      }),\r\n-      catchError(err => {\r\n-        console.error('Wrapper: Erreur lors de la récupération de l\\'agence:', err);\r\n-        this.toastr.error(`Impossible de charger les détails : ${err.message}`);\r\n-        this.navigateBack();\r\n-        return throwError(() => err);\r\n-      })\r\n-    ).subscribe({\r\n-      next: (agency) => {\r\n-        if (agency) {\r\n-          console.log(\"Wrapper: Agence trouvée, ouverture de la modale...\", agency);\r\n-          this.openModal(agency);\r\n-        } else {\r\n-          // Normalement géré par catchError\r\n-          this.toastr.error('Agence non trouvée.');\r\n-          this.navigateBack();\r\n-        }\r\n-      }\r\n-    });\r\n+      });\r\n+    }\r\n   }\r\n \r\n-  // Méthode de fallback si getAgencyByName n'existe pas\r\n+  // --- Le reste du wrapper reste identique ---\r\n+  // (findAgencyByNameFallback, openModal, navigateBack, ngOnDestroy)\r\n+\r\n+  // Méthode de fallback (si getAgencyByName n'existe pas dans le service)\r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n-      console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n-      return this.agenceService.getIdGroup(name).pipe(\r\n-          map((id:any) => {\r\n-              const foundAgency = agencies.find((a:any) => a.name === name);\r\n+      console.log(\"Wrapper (Fallback): Appel de getAllAgencies pour trouver:\", name);\r\n+      return this.agenceService.getAllAgencies().pipe(\r\n+          map((agencies: any[]) => {\r\n+              const foundAgency = agencies.find((a: any) => a.name === name);\r\n               if (!foundAgency) {\r\n                   throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n               }\r\n               return foundAgency;\r\n@@ -74,35 +91,35 @@\n       );\r\n   }\r\n \r\n   openModal(agencyData: any): void {\r\n-    if (this.modalRef) return; // Évite d'ouvrir plusieurs fois\r\n-\r\n-    this.modalRef = this.modalService.open(AgencyDetailsComponent, { // Ouvre la VRAIE modale\r\n+    if (this.modalRef) return;\r\n+    console.log(\"Wrapper: Ouverture de NgbModal avec AgencyDetailsComponent.\");\r\n+    this.modalRef = this.modalService.open(AgencyDetailsComponent, {\r\n       size: 'lg',\r\n       centered: true,\r\n       backdrop: 'static',\r\n+      keyboard: false\r\n     });\r\n+    console.log(\"Wrapper: Passage des données à modalRef.componentInstance.agency\");\r\n+    this.modalRef.componentInstance.agency = agencyData; // <-- Passage via @Input\r\n \r\n-    this.modalRef.componentInstance.agency = agencyData; // <-- Passe les données via @Input\r\n-\r\n     this.modalRef.result.then(\r\n-      (result) => { this.navigateBack(); }, // Fermeture normale\r\n-      (reason) => { this.navigateBack(); }  // Rejet (ESC, clic backdrop si non static, etc.)\r\n-    ).finally(() => {\r\n-        this.modalRef = null; // Nettoyage\r\n-    });\r\n+      (result) => { console.log('Wrapper: Modale fermée:', result); this.navigateBack(); },\r\n+      (reason) => { console.log('Wrapper: Modale rejetée:', reason); this.navigateBack(); }\r\n+    ).finally(() => { this.modalRef = null; });\r\n   }\r\n \r\n   navigateBack(): void {\r\n-    // Navigue vers la route parente ('/agences')\r\n+    console.log(\"Wrapper: Navigation retour vers '../'\");\r\n     this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\r\n   }\r\n \r\n   ngOnDestroy(): void {\r\n-    this.dataSub?.unsubscribe();\r\n+    console.log(\"Wrapper: ngOnDestroy appelé.\");\r\n+    this.routeParamsSub?.unsubscribe(); // Nettoie la subscription du fallback\r\n     if (this.modalRef) {\r\n-      this.modalRef.dismiss('Wrapper Destroyed'); // Ferme la modale si le wrapper est détruit\r\n+      this.modalRef.dismiss('Wrapper Destroyed');\r\n       this.modalRef = null;\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745531589907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,61 +24,22 @@\n     private toastr: ToastrService\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    console.log(\"Wrapper: ngOnInit activé.\");\r\n-    // --- ESSAYER DE LIRE L'ÉTAT DE LA NAVIGATION ---\r\n+    console.log(\"Wrapper: ngOnInit DÉMARRE.\"); // Log 1\r\n     const agencyFromState = history.state?.agency;\r\n-    console.log(\"Wrapper: history.state:\", history.state); // Pour déboguer\r\n-\r\n+    console.log(\"Wrapper: agencyFromState:\", agencyFromState); // Log 2\r\n+  \r\n     if (agencyFromState && typeof agencyFromState === 'object' && agencyFromState.name) {\r\n-      // CAS IDÉAL : L'objet a été passé via state\r\n-      console.log(\"Wrapper: Agence trouvée dans history.state. Ouverture modale...\", agencyFromState);\r\n-      // On utilise directement l'objet reçu\r\n-      // Utiliser setTimeout pour éviter ExpressionChangedAfterItHasBeenCheckedError potentiel\r\n-      // bien que l'ouverture de modale soit souvent asynchrone de toute façon.\r\n+      console.log(\"Wrapper: Agence trouvée dans state. Appel openModal...\"); // Log 3\r\n       setTimeout(() => this.openModal(agencyFromState), 0);\r\n-\r\n     } else {\r\n-      // FALLBACK : L'objet n'est pas dans state (refresh, lien direct)\r\n-      // On utilise le paramètre :name de l'URL pour fetcher l'agence\r\n-      console.warn(\"Wrapper: Agence non trouvée dans history.state. Tentative de récupération via paramètre d'URL.\");\r\n-      this.routeParamsSub = this.route.params.pipe(\r\n-        take(1),\r\n-        switchMap(params => {\r\n-          const agencyNameParam = params['name'];\r\n-          if (!agencyNameParam) {\r\n-            return throwError(() => new Error('Nom de l\\'agence manquant dans l\\'URL (fallback).'));\r\n-          }\r\n-          const agencyName = decodeURIComponent(agencyNameParam);\r\n-          console.log(`Wrapper (Fallback): Recherche de l'agence nommée '${agencyName}'`);\r\n-          // Utilisez votre méthode de service (idéalement getAgencyByName ou le fallback)\r\n-          return this.findAgencyByNameFallback(agencyName); // Ou this.agenceService.getAgencyByName(agencyName)\r\n-        }),\r\n-        catchError(err => {\r\n-          console.error('Wrapper (Fallback): Erreur lors de la récupération:', err);\r\n-          this.toastr.error(`Impossible de charger les détails (fallback) : ${err.message}`, 'Erreur');\r\n-          this.navigateBack();\r\n-          return throwError(() => err);\r\n-        })\r\n-      ).subscribe({\r\n-        next: (fetchedAgency) => {\r\n-          if (fetchedAgency) {\r\n-            console.log(\"Wrapper (Fallback): Agence trouvée, ouverture modale...\", fetchedAgency);\r\n-            this.openModal(fetchedAgency);\r\n-          } else {\r\n-            this.toastr.error('Agence non trouvée (fallback).', 'Erreur');\r\n-            this.navigateBack();\r\n-          }\r\n-        }\r\n-      });\r\n+      console.warn(\"Wrapper: Agence non trouvée dans state. Utilisation du fallback URL.\"); // Log 4\r\n+      // ... (votre logique de fallback avec this.route.params) ...\r\n+      // Ajoutez des logs dans le subscribe du fallback aussi\r\n     }\r\n   }\r\n-\r\n-  // --- Le reste du wrapper reste identique ---\r\n-  // (findAgencyByNameFallback, openModal, navigateBack, ngOnDestroy)\r\n-\r\n-  // Méthode de fallback (si getAgencyByName n'existe pas dans le service)\r\n+  \r\n   private findAgencyByNameFallback(name: string): Observable<any> {\r\n       console.log(\"Wrapper (Fallback): Appel de getAllAgencies pour trouver:\", name);\r\n       return this.agenceService.getAllAgencies().pipe(\r\n           map((agencies: any[]) => {\r\n"
                },
                {
                    "date": 1745531604415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,20 +38,9 @@\n       // Ajoutez des logs dans le subscribe du fallback aussi\r\n     }\r\n   }\r\n   \r\n-  private findAgencyByNameFallback(name: string): Observable<any> {\r\n-      console.log(\"Wrapper (Fallback): Appel de getAllAgencies pour trouver:\", name);\r\n-      return this.agenceService.getAllAgencies().pipe(\r\n-          map((agencies: any[]) => {\r\n-              const foundAgency = agencies.find((a: any) => a.name === name);\r\n-              if (!foundAgency) {\r\n-                  throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n-              }\r\n-              return foundAgency;\r\n-          })\r\n-      );\r\n-  }\r\n+ \r\n \r\n   openModal(agencyData: any): void {\r\n     if (this.modalRef) return;\r\n     console.log(\"Wrapper: Ouverture de NgbModal avec AgencyDetailsComponent.\");\r\n"
                },
                {
                    "date": 1745531787592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,39 +27,116 @@\n   ngOnInit(): void {\r\n     console.log(\"Wrapper: ngOnInit DÉMARRE.\"); // Log 1\r\n     const agencyFromState = history.state?.agency;\r\n     console.log(\"Wrapper: agencyFromState:\", agencyFromState); // Log 2\r\n-  \r\n+\r\n     if (agencyFromState && typeof agencyFromState === 'object' && agencyFromState.name) {\r\n+      // CAS 1: L'agence est trouvée dans l'état de navigation (history.state)\r\n       console.log(\"Wrapper: Agence trouvée dans state. Appel openModal...\"); // Log 3\r\n+      // Utiliser setTimeout pour éviter les erreurs potentielles liées au changement de détection\r\n       setTimeout(() => this.openModal(agencyFromState), 0);\r\n     } else {\r\n+      // CAS 2 (FALLBACK): L'agence n'est PAS dans l'état (ex: refresh, lien direct)\r\n+      // -> IL FAUT IMPLÉMENTER CETTE PARTIE !\r\n       console.warn(\"Wrapper: Agence non trouvée dans state. Utilisation du fallback URL.\"); // Log 4\r\n-      // ... (votre logique de fallback avec this.route.params) ...\r\n-      // Ajoutez des logs dans le subscribe du fallback aussi\r\n+\r\n+      // --- DÉBUT DE LA LOGIQUE DE FALLBACK À AJOUTER ---\r\n+      this.routeParamsSub = this.route.params.pipe(\r\n+        take(1), // Prend seulement la première valeur des paramètres\r\n+        switchMap(params => {\r\n+          const agencyNameParam = params['name']; // Récupère le ':name' de l'URL\r\n+          if (!agencyNameParam) {\r\n+            // Si le paramètre 'name' est manquant dans l'URL\r\n+            this.toastr.error('Nom de l\\'agence manquant dans l\\'URL (fallback).');\r\n+            this.navigateBack(); // Retour à la liste\r\n+            return throwError(() => new Error('Agency name is missing in URL params'));\r\n+          }\r\n+          // ActivatedRoute décode généralement les paramètres automatiquement.\r\n+          // Si vous voyez toujours du double encodage, vous pourriez avoir besoin de decodeURIComponent ici.\r\n+          const agencyName = agencyNameParam; // Normalement déjà décodé par le routeur\r\n+          console.log(`Wrapper (Fallback): Recherche de l'agence nommée '${agencyName}' via le service.`);\r\n+\r\n+          // Utilisez la méthode de votre service pour trouver l'agence par nom\r\n+          // Adaptez ceci si votre service a une méthode différente\r\n+          // return this.agenceService.getAgencyByName(agencyName); // Méthode idéale\r\n+          return this.findAgencyByNameFallback(agencyName); // Ou utilisez le fallback si getAgencyByName n'existe pas\r\n+        }),\r\n+        catchError(err => {\r\n+          // Gère les erreurs pendant la récupération de l'agence via le service\r\n+          console.error('Wrapper (Fallback): Erreur lors de la récupération de l\\'agence:', err);\r\n+          this.toastr.error(`Impossible de charger les détails (fallback) : ${err.message}`, 'Erreur');\r\n+          this.navigateBack(); // Retour à la liste\r\n+          return throwError(() => err); // Propage l'erreur\r\n+        })\r\n+      ).subscribe({\r\n+        next: (fetchedAgency) => {\r\n+          // Si l'agence est trouvée via le service\r\n+          if (fetchedAgency) {\r\n+            console.log(\"Wrapper (Fallback): Agence trouvée via service, ouverture modale...\", fetchedAgency);\r\n+            this.openModal(fetchedAgency); // Ouvre la modale avec les données récupérées\r\n+          } else {\r\n+            // Si le service retourne null/undefined (ne devrait pas arriver avec catchError)\r\n+            console.error(\"Wrapper (Fallback): Agence non trouvée après récupération service (cas inattendu).\");\r\n+            this.toastr.error('Agence non trouvée (fallback).', 'Erreur');\r\n+            this.navigateBack();\r\n+          }\r\n+        },\r\n+        error: (err) => {\r\n+            // L'erreur est déjà gérée dans catchError, log supplémentaire si besoin\r\n+            console.log(\"Wrapper (Fallback): Erreur finale dans la souscription (déjà gérée).\");\r\n+        }\r\n+      });\r\n+      // --- FIN DE LA LOGIQUE DE FALLBACK ---\r\n     }\r\n   }\r\n-  \r\n- \r\n \r\n+  // --- Assurez-vous que cette méthode existe si vous l'utilisez dans le fallback ---\r\n+  private findAgencyByNameFallback(name: string): Observable<any> {\r\n+      console.log(\"Wrapper (Fallback Interne): Appel de getAllAgencies pour trouver:\", name);\r\n+      return this.agenceService.getAllAgencies().pipe(\r\n+          map((agencies: any[]) => {\r\n+              console.log(\"Wrapper (Fallback Interne): Recherche dans la liste:\", agencies);\r\n+              const foundAgency = agencies.find((a: any) => a.name === name);\r\n+              if (!foundAgency) {\r\n+                  console.error(`Wrapper (Fallback Interne): Agence nommée '${name}' non trouvée.`);\r\n+                  throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n+              }\r\n+              console.log(\"Wrapper (Fallback Interne): Agence trouvée:\", foundAgency);\r\n+              return foundAgency;\r\n+          }),\r\n+          catchError(err => { // Attrape aussi les erreurs de getAllAgencies\r\n+              console.error(\"Wrapper (Fallback Interne): Erreur dans getAllAgencies ou map:\", err);\r\n+              // Relance l'erreur pour qu'elle soit attrapée par le catchError principal du fallback\r\n+              return throwError(() => err);\r\n+          })\r\n+      );\r\n+  }\r\n+  // --- Fin méthode fallback ---\r\n+\r\n   openModal(agencyData: any): void {\r\n-    if (this.modalRef) return;\r\n-    console.log(\"Wrapper: Ouverture de NgbModal avec AgencyDetailsComponent.\");\r\n+    // ... (votre code openModal existant, qui semble correct)\r\n+    if (this.modalRef) {\r\n+       console.warn(\"Wrapper: openModal appelé mais modalRef existe déjà.\");\r\n+       return;\r\n+    }\r\n+    console.log(\"Wrapper: APPEL de modalService.open avec:\", agencyData); // Log 5\r\n+    // Assurez-vous que les options sont correctes (size, centered, backdrop...)\r\n     this.modalRef = this.modalService.open(AgencyDetailsComponent, {\r\n-      size: 'lg',\r\n-      centered: true,\r\n-      backdrop: 'static',\r\n-      keyboard: false\r\n-    });\r\n-    console.log(\"Wrapper: Passage des données à modalRef.componentInstance.agency\");\r\n-    this.modalRef.componentInstance.agency = agencyData; // <-- Passage via @Input\r\n+        size: 'lg',\r\n+        centered: true,\r\n+        backdrop: 'static', // Ou true si vous voulez fermer en cliquant à côté\r\n+        keyboard: false // Ou true si vous voulez fermer avec ESC\r\n+     });\r\n+    this.modalRef.componentInstance.agency = agencyData;\r\n+    console.log(\"Wrapper: Données passées à componentInstance.\"); // Log 6\r\n \r\n     this.modalRef.result.then(\r\n-      (result) => { console.log('Wrapper: Modale fermée:', result); this.navigateBack(); },\r\n-      (reason) => { console.log('Wrapper: Modale rejetée:', reason); this.navigateBack(); }\r\n+       (result) => { console.log('Wrapper: Modale fermée:', result); this.navigateBack(); },\r\n+       (reason) => { console.log('Wrapper: Modale rejetée:', reason); this.navigateBack(); }\r\n     ).finally(() => { this.modalRef = null; });\r\n   }\r\n \r\n+\r\n   navigateBack(): void {\r\n     console.log(\"Wrapper: Navigation retour vers '../'\");\r\n     this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\r\n   }\r\n"
                }
            ],
            "date": 1745529842638,
            "name": "Commit-0",
            "content": "// agency-details-modal-wrapper.component.ts\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Subscription, throwError, of, Observable } from 'rxjs';\r\nimport { switchMap, catchError, finalize, take, map } from 'rxjs/operators';\r\nimport { AgencyDetailsComponent } from './agency-details/agency-details.component'; // La vraie modale\r\nimport { AgenceService } from '../../services/agenceService';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-agency-details-modal-wrapper',\r\n  template: '', // Pas de HTML visible\r\n})\r\nexport class AgencyDetailsModalWrapperComponent implements OnInit, OnDestroy {\r\n  private modalRef: NgbModalRef | null = null;\r\n  private dataSub: Subscription | null = null;\r\n\r\n  constructor(\r\n    private modalService: NgbModal,\r\n    private route: ActivatedRoute, // Pour lire le paramètre :name\r\n    private router: Router,         // Pour naviguer en arrière\r\n    private agenceService: AgenceService,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.dataSub = this.route.params.pipe(\r\n      take(1),\r\n      switchMap(params => {\r\n        // Récupère le nom depuis l'URL et le décode\r\n        const agencyNameParam = params['name'];\r\n        if (!agencyNameParam) {\r\n          this.toastr.error('Nom de l\\'agence manquant dans l\\'URL.');\r\n          this.navigateBack();\r\n          return throwError(() => new Error('Agency name is missing'));\r\n        }\r\n        const agencyName = decodeURIComponent(agencyNameParam); // Décode le nom\r\n        console.log(`Wrapper: Recherche de l'agence nommée '${agencyName}'`);\r\n\r\n        // Utilisez la méthode de votre service pour trouver l'agence par nom\r\n        // Adaptez ceci si votre service a une méthode différente ou si vous devez filtrer getAllAgencies\r\n        // return this.agenceService.getAgencyByName(agencyName); // Méthode idéale\r\n        return this.findAgencyByNameFallback(agencyName); // Ou utilisez le fallback\r\n      }),\r\n      catchError(err => {\r\n        console.error('Wrapper: Erreur lors de la récupération de l\\'agence:', err);\r\n        this.toastr.error(`Impossible de charger les détails : ${err.message}`);\r\n        this.navigateBack();\r\n        return throwError(() => err);\r\n      })\r\n    ).subscribe({\r\n      next: (agency) => {\r\n        if (agency) {\r\n          console.log(\"Wrapper: Agence trouvée, ouverture de la modale...\", agency);\r\n          this.openModal(agency);\r\n        } else {\r\n          // Normalement géré par catchError\r\n          this.toastr.error('Agence non trouvée.');\r\n          this.navigateBack();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Méthode de fallback si getAgencyByName n'existe pas\r\n  private findAgencyByNameFallback(name: string): Observable<any> {\r\n      console.log(\"Wrapper: Utilisation du fallback getAllAgencies pour trouver:\", name);\r\n      return this.agenceService.getAllAgencies().pipe(\r\n          map(agencies => {\r\n              const foundAgency = agencies.find(a => a.name === name);\r\n              if (!foundAgency) {\r\n                  throw new Error(`Agence nommée '${name}' non trouvée (fallback).`);\r\n              }\r\n              return foundAgency;\r\n          })\r\n      );\r\n  }\r\n\r\n  openModal(agencyData: any): void {\r\n    if (this.modalRef) return; // Évite d'ouvrir plusieurs fois\r\n\r\n    this.modalRef = this.modalService.open(AgencyDetailsComponent, { // Ouvre la VRAIE modale\r\n      size: 'lg',\r\n      centered: true,\r\n      backdrop: 'static',\r\n    });\r\n\r\n    this.modalRef.componentInstance.agency = agencyData; // <-- Passe les données via @Input\r\n\r\n    this.modalRef.result.then(\r\n      (result) => { this.navigateBack(); }, // Fermeture normale\r\n      (reason) => { this.navigateBack(); }  // Rejet (ESC, clic backdrop si non static, etc.)\r\n    ).finally(() => {\r\n        this.modalRef = null; // Nettoyage\r\n    });\r\n  }\r\n\r\n  navigateBack(): void {\r\n    // Navigue vers la route parente ('/agences')\r\n    this.router.navigate(['../'], { relativeTo: this.route, replaceUrl: true });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dataSub?.unsubscribe();\r\n    if (this.modalRef) {\r\n      this.modalRef.dismiss('Wrapper Destroyed'); // Ferme la modale si le wrapper est détruit\r\n      this.modalRef = null;\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}