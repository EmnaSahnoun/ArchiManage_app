{
    "sourceFile": "src/app/super-admin/super-admin-dashboard/super-admin-dashboard.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1743945903485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743945918373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Component } from '@angular/core';\r\n-\r\n+import Chart from 'chart.js/auto';\r\n @Component({\r\n   selector: 'app-super-admin-dashboard',\r\n   templateUrl: './super-admin-dashboard.component.html',\r\n   styleUrl: './super-admin-dashboard.component.scss'\r\n"
                },
                {
                    "date": 1745432993217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+import { Component } from '@angular/core';\r\n+import Chart from 'chart.js/auto';\r\n+@Component({\r\n+  selector: 'app-super-admin-dashboard',\r\n+  templateUrl: './super-admin-dashboard.component.html',\r\n+  styleUrl: './super-admin-dashboard.component.scss'\r\n+})\r\n+export interface ProjectElement {\r\n+  name: string;\r\n+  statusClass: string;\r\n+  statusText: string;\r\n+  progress: number;\r\n+}\r\n+\r\n+@Component({\r\n+  selector: 'app-super-admin-dashboard',\r\n+  templateUrl: './super-admin-dashboard.component.html',\r\n+  styleUrls: ['./super-admin-dashboard.component.scss']\r\n+})\r\n+export class SuperAdminDashboardComponent implements OnInit {\r\n+\r\n+  // Données d'exemple pour mat-table\r\n+  displayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n+  dataSource: ProjectElement[] = [\r\n+    { name: 'Rénovation Villa \"Horizon\"', statusClass: 'status-in-progress', statusText: 'En cours', progress: 60 },\r\n+    { name: 'Construction Immeuble \"Le Central\"', statusClass: 'status-completed', statusText: 'Terminé', progress: 100 },\r\n+    { name: 'Étude Centre Commercial \"Agora\"', statusClass: 'status-pending', statusText: 'En attente', progress: 15 },\r\n+    // Ajoutez d'autres projets ici\r\n+  ];\r\n+\r\n+  constructor() { }\r\n+\r\n+  ngOnInit(): void {\r\n+    // Initialisation du graphique (si vous utilisez Chart.js ou autre)\r\n+    this.initializeChart();\r\n+  }\r\n+\r\n+  initializeChart(): void {\r\n+    // Votre logique d'initialisation de graphique ici\r\n+    // Exemple simple (nécessite d'importer Chart depuis 'chart.js')\r\n+    /*\r\n+    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n+    if (ctx) {\r\n+      new Chart(ctx, {\r\n+        type: 'line', // ou 'bar', 'doughnut', etc.\r\n+        data: {\r\n+          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n+          datasets: [{\r\n+            label: 'Tâches Complétées',\r\n+            data: [12, 19, 3, 5, 2, 3],\r\n+            borderColor: 'var(--primary-color)',\r\n+            tension: 0.1\r\n+          }]\r\n+        },\r\n+        options: {\r\n+          responsive: true,\r\n+          maintainAspectRatio: false // Important pour le conteneur flex/grid\r\n+        }\r\n+      });\r\n+    }\r\n+    */\r\n+  }\r\n+\r\n+  // Méthodes pour les actions (nouvelle agence, voir/modifier projet)\r\n+  addAgency(): void {\r\n+    console.log('Ajouter une nouvelle agence');\r\n+    // Logique d'ajout...\r\n+  }\r\n+\r\n+  viewProject(project: ProjectElement): void {\r\n+    console.log('Voir projet:', project.name);\r\n+    // Logique de navigation ou affichage modal...\r\n+  }\r\n+\r\n+  editProject(project: ProjectElement): void {\r\n+    console.log('Modifier projet:', project.name);\r\n+    // Logique d'édition...\r\n+  }\r\n+}\r\n+ngAfterViewInit(): void {\r\n+    this.createChart();\r\n+  }\r\n+\r\n+  createChart() {\r\n+    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n+    if (ctx) {\r\n+      new Chart(ctx, {\r\n+        type: 'bar',\r\n+        data: {\r\n+          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n+          datasets: [{\r\n+            label: 'Tâches complétées',\r\n+            data: [50, 60, 75, 90, 110, 130],\r\n+            backgroundColor: '#3498db',\r\n+            borderColor: '#2980b9',\r\n+            borderWidth: 1\r\n+          }]\r\n+        },\r\n+        options: {\r\n+          responsive: true,\r\n+          scales: {\r\n+            y: { beginAtZero: true }\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1745433003573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n import Chart from 'chart.js/auto';\r\n @Component({\r\n   selector: 'app-super-admin-dashboard',\r\n   templateUrl: './super-admin-dashboard.component.html',\r\n@@ -75,46 +75,9 @@\n   editProject(project: ProjectElement): void {\r\n     console.log('Modifier projet:', project.name);\r\n     // Logique d'édition...\r\n   }\r\n-}\r\n-ngAfterViewInit(): void {\r\n-    this.createChart();\r\n-  }\r\n \r\n-  createChart() {\r\n-    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n-    if (ctx) {\r\n-      new Chart(ctx, {\r\n-        type: 'bar',\r\n-        data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n-          datasets: [{\r\n-            label: 'Tâches complétées',\r\n-            data: [50, 60, 75, 90, 110, 130],\r\n-            backgroundColor: '#3498db',\r\n-            borderColor: '#2980b9',\r\n-            borderWidth: 1\r\n-          }]\r\n-        },\r\n-        options: {\r\n-          responsive: true,\r\n-          scales: {\r\n-            y: { beginAtZero: true }\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-  }\r\n-}\r\n-import { Component } from '@angular/core';\r\n-import Chart from 'chart.js/auto';\r\n-@Component({\r\n-  selector: 'app-super-admin-dashboard',\r\n-  templateUrl: './super-admin-dashboard.component.html',\r\n-  styleUrl: './super-admin-dashboard.component.scss'\r\n-})\r\n-export class SuperAdminDashboardComponent {\r\n ngAfterViewInit(): void {\r\n     this.createChart();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1745433138162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,7 @@\n import { Component, OnInit } from '@angular/core';\r\n import Chart from 'chart.js/auto';\r\n-@Component({\r\n-  selector: 'app-super-admin-dashboard',\r\n-  templateUrl: './super-admin-dashboard.component.html',\r\n-  styleUrl: './super-admin-dashboard.component.scss'\r\n-})\r\n+\r\n export interface ProjectElement {\r\n   name: string;\r\n   statusClass: string;\r\n   statusText: string;\r\n"
                },
                {
                    "date": 1745433267927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n import { Component, OnInit } from '@angular/core';\r\n import Chart from 'chart.js/auto';\r\n-\r\n+@Component({\r\n+  selector: 'app-super-admin-dashboard',\r\n+  templateUrl: './super-admin-dashboard.component.html',\r\n+  styleUrl: './super-admin-dashboard.component.scss'\r\n+})\r\n export interface ProjectElement {\r\n   name: string;\r\n   statusClass: string;\r\n   statusText: string;\r\n"
                },
                {
                    "date": 1745433273802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,12 @@\n-import { Component, OnInit } from '@angular/core';\r\n+import { Component } from '@angular/core';\r\n import Chart from 'chart.js/auto';\r\n @Component({\r\n   selector: 'app-super-admin-dashboard',\r\n   templateUrl: './super-admin-dashboard.component.html',\r\n   styleUrl: './super-admin-dashboard.component.scss'\r\n })\r\n-export interface ProjectElement {\r\n-  name: string;\r\n-  statusClass: string;\r\n-  statusText: string;\r\n-  progress: number;\r\n-}\r\n-\r\n-@Component({\r\n-  selector: 'app-super-admin-dashboard',\r\n-  templateUrl: './super-admin-dashboard.component.html',\r\n-  styleUrls: ['./super-admin-dashboard.component.scss']\r\n-})\r\n-export class SuperAdminDashboardComponent implements OnInit {\r\n-\r\n-  // Données d'exemple pour mat-table\r\n-  displayedColumns: string[] = ['name', 'status', 'progress', 'actions'];\r\n-  dataSource: ProjectElement[] = [\r\n-    { name: 'Rénovation Villa \"Horizon\"', statusClass: 'status-in-progress', statusText: 'En cours', progress: 60 },\r\n-    { name: 'Construction Immeuble \"Le Central\"', statusClass: 'status-completed', statusText: 'Terminé', progress: 100 },\r\n-    { name: 'Étude Centre Commercial \"Agora\"', statusClass: 'status-pending', statusText: 'En attente', progress: 15 },\r\n-    // Ajoutez d'autres projets ici\r\n-  ];\r\n-\r\n-  constructor() { }\r\n-\r\n-  ngOnInit(): void {\r\n-    // Initialisation du graphique (si vous utilisez Chart.js ou autre)\r\n-    this.initializeChart();\r\n-  }\r\n-\r\n-  initializeChart(): void {\r\n-    // Votre logique d'initialisation de graphique ici\r\n-    // Exemple simple (nécessite d'importer Chart depuis 'chart.js')\r\n-    /*\r\n-    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n-    if (ctx) {\r\n-      new Chart(ctx, {\r\n-        type: 'line', // ou 'bar', 'doughnut', etc.\r\n-        data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n-          datasets: [{\r\n-            label: 'Tâches Complétées',\r\n-            data: [12, 19, 3, 5, 2, 3],\r\n-            borderColor: 'var(--primary-color)',\r\n-            tension: 0.1\r\n-          }]\r\n-        },\r\n-        options: {\r\n-          responsive: true,\r\n-          maintainAspectRatio: false // Important pour le conteneur flex/grid\r\n-        }\r\n-      });\r\n-    }\r\n-    */\r\n-  }\r\n-\r\n-  // Méthodes pour les actions (nouvelle agence, voir/modifier projet)\r\n-  addAgency(): void {\r\n-    console.log('Ajouter une nouvelle agence');\r\n-    // Logique d'ajout...\r\n-  }\r\n-\r\n-  viewProject(project: ProjectElement): void {\r\n-    console.log('Voir projet:', project.name);\r\n-    // Logique de navigation ou affichage modal...\r\n-  }\r\n-\r\n-  editProject(project: ProjectElement): void {\r\n-    console.log('Modifier projet:', project.name);\r\n-    // Logique d'édition...\r\n-  }\r\n-\r\n+export class SuperAdminDashboardComponent {\r\n ngAfterViewInit(): void {\r\n     this.createChart();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1745598984247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,33 +5,177 @@\n   templateUrl: './super-admin-dashboard.component.html',\r\n   styleUrl: './super-admin-dashboard.component.scss'\r\n })\r\n export class SuperAdminDashboardComponent {\r\n-ngAfterViewInit(): void {\r\n-    this.createChart();\r\n-  }\r\n+  export class SuperAdminDashboardComponent implements AfterViewInit, OnDestroy {\r\n \r\n-  createChart() {\r\n-    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n-    if (ctx) {\r\n-      new Chart(ctx, {\r\n-        type: 'bar',\r\n+    // --- Propriétés pour les cartes statistiques ---\r\n+    agencyCount: number = 0; // Initialiser avec des valeurs par défaut ou via service\r\n+    projectCount: number = 0;\r\n+    userCount: number = 0;\r\n+  \r\n+    // --- Propriétés pour la section activité ---\r\n+    totalTasks: number = 0;\r\n+    activeMembers: number = 0;\r\n+    activeProjects: number = 0;\r\n+    private chartInstance: Chart | null = null;\r\n+    private chartUpdateSubscription: Subscription | null = null; // Pour gérer les mises à jour du graphique\r\n+  \r\n+    // --- Propriétés pour la table des agences ---\r\n+    agencyDataSource = new MatTableDataSource<Agency>([]);\r\n+    agencyDisplayedColumns: string[] = ['name', 'userCount', 'status', 'actions']; // Colonnes à afficher\r\n+  \r\n+    // --- Indicateurs de chargement ---\r\n+    isLoadingStats: boolean = true;\r\n+    isLoadingChart: boolean = true;\r\n+    isLoadingAgencies: boolean = true;\r\n+  \r\n+    constructor(private changeDetectorRef: ChangeDetectorRef) {} // Injecter ChangeDetectorRef si besoin\r\n+  \r\n+    ngAfterViewInit(): void {\r\n+      this.loadDashboardData(); // Charger les données\r\n+    }\r\n+  \r\n+    ngOnDestroy(): void {\r\n+      // Détruire le graphique et se désabonner\r\n+      this.chartInstance?.destroy();\r\n+      this.chartUpdateSubscription?.unsubscribe();\r\n+    }\r\n+  \r\n+    loadDashboardData(): void {\r\n+      // Simuler le chargement des données (remplacer par appels API réels)\r\n+      this.isLoadingStats = true;\r\n+      this.isLoadingChart = true;\r\n+      this.isLoadingAgencies = true;\r\n+  \r\n+      // Simuler un délai API\r\n+      setTimeout(() => {\r\n+        // Charger les statistiques des cartes\r\n+        this.agencyCount = 12; // Exemple\r\n+        this.projectCount = 64; // Exemple\r\n+        this.userCount = 105; // Exemple\r\n+        this.isLoadingStats = false;\r\n+  \r\n+        // Charger les statistiques d'activité\r\n+        this.totalTasks = 56; // Exemple\r\n+        this.activeMembers = 8; // Exemple\r\n+        this.activeProjects = 30; // Exemple\r\n+        this.isLoadingChart = false;\r\n+        this.createOrUpdateChart(); // Créer/Mettre à jour le graphique une fois les données chargées\r\n+  \r\n+        // Charger les données de la table des agences\r\n+        const agencies: Agency[] = [ // Exemple de données\r\n+          { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n+          { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n+          { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n+        ];\r\n+        this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n+        this.isLoadingAgencies = false;\r\n+  \r\n+        this.changeDetectorRef.detectChanges(); // Forcer la détection de changements si nécessaire\r\n+      }, 1500); // Simule 1.5s de chargement\r\n+    }\r\n+  \r\n+    prepareAgencyDataForDisplay(agencies: Agency[]): Agency[] {\r\n+      return agencies.map(agency => ({\r\n+        ...agency,\r\n+        statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n+        statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n+      }));\r\n+    }\r\n+  \r\n+    createOrUpdateChart(): void {\r\n+      const canvas = document.getElementById('superAdminTaskChart') as HTMLCanvasElement;\r\n+      if (!canvas) {\r\n+        console.error(\"Canvas element 'superAdminTaskChart' not found.\");\r\n+        return;\r\n+      }\r\n+  \r\n+      // Détruire l'instance précédente si elle existe\r\n+      this.chartInstance?.destroy();\r\n+  \r\n+      // Créer une nouvelle instance de Chart.js\r\n+      this.chartInstance = new Chart(canvas, {\r\n+        type: 'bar', // Ou 'line', 'pie', etc.\r\n         data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n+          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Exemples de labels\r\n           datasets: [{\r\n-            label: 'Tâches complétées',\r\n-            data: [50, 60, 75, 90, 110, 130],\r\n-            backgroundColor: '#3498db',\r\n-            borderColor: '#2980b9',\r\n-            borderWidth: 1\r\n-          }]\r\n+            label: 'Projets Créés', // Exemple de données\r\n+            data: [10, 15, 8, 12, 20, 18], // Exemples de données\r\n+            backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur primaire avec transparence\r\n+            borderColor: 'rgba(74, 144, 226, 1)', // Couleur primaire solide\r\n+            borderWidth: 1,\r\n+            borderRadius: 4, // Coins arrondis pour les barres\r\n+          },\r\n+          {\r\n+             label: 'Utilisateurs Ajoutés', // Exemple de deuxième jeu de données\r\n+             data: [5, 8, 10, 7, 12, 9],\r\n+             backgroundColor: 'rgba(80, 227, 194, 0.6)', // Couleur accent avec transparence\r\n+             borderColor: 'rgba(80, 227, 194, 1)', // Couleur accent solide\r\n+             borderWidth: 1,\r\n+             borderRadius: 4,\r\n+           }]\r\n         },\r\n         options: {\r\n           responsive: true,\r\n+          maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n           scales: {\r\n-            y: { beginAtZero: true }\r\n+            y: {\r\n+              beginAtZero: true,\r\n+              grid: {\r\n+                color: '#e0e0e0', // Couleur de la grille Y\r\n+                borderColor: '#e0e0e0',\r\n+              },\r\n+              ticks: {\r\n+                color: '#666' // Couleur des labels Y\r\n+              }\r\n+            },\r\n+            x: {\r\n+               grid: {\r\n+                 display: false // Masquer la grille X\r\n+               },\r\n+               ticks: {\r\n+                 color: '#666' // Couleur des labels X\r\n+               }\r\n+             }\r\n+          },\r\n+          plugins: {\r\n+            legend: {\r\n+              position: 'top', // Position de la légende\r\n+               labels: {\r\n+                 color: '#333', // Couleur du texte de la légende\r\n+                 padding: 20 // Espace autour de la légende\r\n+               }\r\n+            },\r\n+            tooltip: {\r\n+              backgroundColor: 'rgba(0, 0, 0, 0.7)', // Fond de l'infobulle\r\n+              titleColor: '#fff',\r\n+              bodyColor: '#fff',\r\n+              padding: 10,\r\n+              cornerRadius: 4,\r\n+            }\r\n           }\r\n         }\r\n       });\r\n     }\r\n-  }\r\n+  \r\n+    // --- Méthodes d'action (placeholders) ---\r\n+    addNewAgency(): void {\r\n+      console.log('Ajouter une nouvelle agence...');\r\n+      // Implémenter la logique (ex: ouvrir une modale, naviguer vers un formulaire)\r\n+    }\r\n+  \r\n+    viewAgency(agency: Agency): void {\r\n+      console.log('Voir agence:', agency);\r\n+      // Implémenter la logique\r\n+    }\r\n+  \r\n+    editAgency(agency: Agency): void {\r\n+      console.log('Modifier agence:', agency);\r\n+      // Implémenter la logique\r\n+    }\r\n+  \r\n+    deleteAgency(agency: Agency): void {\r\n+      console.log('Supprimer agence:', agency);\r\n+      // Implémenter la logique (avec confirmation)\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1745598996528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n         this.isLoadingChart = false;\r\n         this.createOrUpdateChart(); // Créer/Mettre à jour le graphique une fois les données chargées\r\n   \r\n         // Charger les données de la table des agences\r\n-        const agencies: Agency[] = [ // Exemple de données\r\n+        const agencies: any = [ // Exemple de données\r\n           { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n           { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n           { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n         ];\r\n"
                },
                {
                    "date": 1745599004284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         this.changeDetectorRef.detectChanges(); // Forcer la détection de changements si nécessaire\r\n       }, 1500); // Simule 1.5s de chargement\r\n     }\r\n   \r\n-    prepareAgencyDataForDisplay(agencies: Agency[]): Agency[] {\r\n+    prepareAgencyDataForDisplay(agencies: any): any {\r\n       return agencies.map(agency => ({\r\n         ...agency,\r\n         statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n         statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n"
                },
                {
                    "date": 1745599012188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       }, 1500); // Simule 1.5s de chargement\r\n     }\r\n   \r\n     prepareAgencyDataForDisplay(agencies: any): any {\r\n-      return agencies.map(agency => ({\r\n+      return agencies.map((gency:any({\r\n         ...agency,\r\n         statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n         statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n       }));\r\n"
                },
                {
                    "date": 1745599096359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       }, 1500); // Simule 1.5s de chargement\r\n     }\r\n   \r\n     prepareAgencyDataForDisplay(agencies: any): any {\r\n-      return agencies.map((gency:any({\r\n+      return agencies.map((agency:any):any({\r\n         ...agency,\r\n         statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n         statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n       }));\r\n"
                },
                {
                    "date": 1745599104673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,10 @@\n         this.changeDetectorRef.detectChanges(); // Forcer la détection de changements si nécessaire\r\n       }, 1500); // Simule 1.5s de chargement\r\n     }\r\n   \r\n-    prepareAgencyDataForDisplay(agencies: any): any {\r\n-      return agencies.map((agency:any):any({\r\n+    prepareAgencyDataForDisplay(agencies: any): Agency[] {\r\n+      return agencies.map(agency => ({\r\n         ...agency,\r\n         statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n         statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n       }));\r\n"
                },
                {
                    "date": 1745599109959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       }, 1500); // Simule 1.5s de chargement\r\n     }\r\n   \r\n     prepareAgencyDataForDisplay(agencies: any): Agency[] {\r\n-      return agencies.map(agency => ({\r\n+      return agencies.map((agency:any) => ({\r\n         ...agency,\r\n         statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n         statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n       }));\r\n"
                },
                {
                    "date": 1745599126156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n       console.log('Ajouter une nouvelle agence...');\r\n       // Implémenter la logique (ex: ouvrir une modale, naviguer vers un formulaire)\r\n     }\r\n   \r\n-    viewAgency(agency: Agency): void {\r\n+    viewAgency(agency: any): void {\r\n       console.log('Voir agence:', agency);\r\n       // Implémenter la logique\r\n     }\r\n   \r\n"
                },
                {
                    "date": 1745599134508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n       console.log('Voir agence:', agency);\r\n       // Implémenter la logique\r\n     }\r\n   \r\n-    editAgency(agency: Agency): void {\r\n+    editAgency(agency: any): void {\r\n       console.log('Modifier agence:', agency);\r\n       // Implémenter la logique\r\n     }\r\n   \r\n"
                },
                {
                    "date": 1745599158094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Component } from '@angular/core';\r\n import Chart from 'chart.js/auto';\r\n+import { Subscription } from 'rxjs';\r\n @Component({\r\n   selector: 'app-super-admin-dashboard',\r\n   templateUrl: './super-admin-dashboard.component.html',\r\n   styleUrl: './super-admin-dashboard.component.scss'\r\n@@ -173,9 +174,9 @@\n       console.log('Modifier agence:', agency);\r\n       // Implémenter la logique\r\n     }\r\n   \r\n-    deleteAgency(agency: Agency): void {\r\n+    deleteAgency(agency: any): void {\r\n       console.log('Supprimer agence:', agency);\r\n       // Implémenter la logique (avec confirmation)\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1745599167775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     private chartInstance: Chart | null = null;\r\n     private chartUpdateSubscription: Subscription | null = null; // Pour gérer les mises à jour du graphique\r\n   \r\n     // --- Propriétés pour la table des agences ---\r\n-    agencyDataSource = new MatTableDataSource<Agency>([]);\r\n+    agencyDataSource = new MatTableDataSource<any>([]);\r\n     agencyDisplayedColumns: string[] = ['name', 'userCount', 'status', 'actions']; // Colonnes à afficher\r\n   \r\n     // --- Indicateurs de chargement ---\r\n     isLoadingStats: boolean = true;\r\n"
                },
                {
                    "date": 1745599178057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import { Component } from '@angular/core';\r\n+import { ChangeDetectorRef, Component } from '@angular/core';\r\n+import { MatTableDataSource } from '@angular/material/table';\r\n import Chart from 'chart.js/auto';\r\n import { Subscription } from 'rxjs';\r\n @Component({\r\n   selector: 'app-super-admin-dashboard',\r\n"
                },
                {
                    "date": 1745599209821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,9 @@\n           scales: {\r\n             y: {\r\n               beginAtZero: true,\r\n               grid: {\r\n-                color: '#e0e0e0', // Couleur de la grille Y\r\n-                borderColor: '#e0e0e0',\r\n+                color: '#e0e0e0'\r\n               },\r\n               ticks: {\r\n                 color: '#666' // Couleur des labels Y\r\n               }\r\n"
                },
                {
                    "date": 1745599217712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n         this.changeDetectorRef.detectChanges(); // Forcer la détection de changements si nécessaire\r\n       }, 1500); // Simule 1.5s de chargement\r\n     }\r\n   \r\n-    prepareAgencyDataForDisplay(agencies: any): Agency[] {\r\n+    prepareAgencyDataForDisplay(agencies: any): any[] {\r\n       return agencies.map((agency:any) => ({\r\n         ...agency,\r\n         statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n         statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n"
                },
                {
                    "date": 1745599348186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,182 +1,181 @@\n-import { ChangeDetectorRef, Component } from '@angular/core';\r\n+import { Component, AfterViewInit, OnDestroy, ChangeDetectorRef } from '@angular/core'; // Import necessary decorators and interfaces\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import Chart from 'chart.js/auto';\r\n import { Subscription } from 'rxjs';\r\n+\r\n+// Define the Agency interface for strong typing\r\n+export interface Agency {\r\n+  id: number;\r\n+  name: string;\r\n+  status: 'active' | 'inactive'; // Use specific types instead of 'any'\r\n+  userCount: number;\r\n+  // Optional properties added by prepareAgencyDataForDisplay\r\n+  statusText?: string;\r\n+  statusClass?: string;\r\n+}\r\n+\r\n @Component({\r\n   selector: 'app-super-admin-dashboard',\r\n   templateUrl: './super-admin-dashboard.component.html',\r\n-  styleUrl: './super-admin-dashboard.component.scss'\r\n+  styleUrls: ['./super-admin-dashboard.component.scss'] // Corrected: Use styleUrls and .scss extension\r\n })\r\n-export class SuperAdminDashboardComponent {\r\n-  export class SuperAdminDashboardComponent implements AfterViewInit, OnDestroy {\r\n+// Implement the interfaces correctly\r\n+export class SuperAdminDashboardComponent implements AfterViewInit, OnDestroy {\r\n \r\n-    // --- Propriétés pour les cartes statistiques ---\r\n-    agencyCount: number = 0; // Initialiser avec des valeurs par défaut ou via service\r\n-    projectCount: number = 0;\r\n-    userCount: number = 0;\r\n-  \r\n-    // --- Propriétés pour la section activité ---\r\n-    totalTasks: number = 0;\r\n-    activeMembers: number = 0;\r\n-    activeProjects: number = 0;\r\n-    private chartInstance: Chart | null = null;\r\n-    private chartUpdateSubscription: Subscription | null = null; // Pour gérer les mises à jour du graphique\r\n-  \r\n-    // --- Propriétés pour la table des agences ---\r\n-    agencyDataSource = new MatTableDataSource<any>([]);\r\n-    agencyDisplayedColumns: string[] = ['name', 'userCount', 'status', 'actions']; // Colonnes à afficher\r\n-  \r\n-    // --- Indicateurs de chargement ---\r\n-    isLoadingStats: boolean = true;\r\n-    isLoadingChart: boolean = true;\r\n-    isLoadingAgencies: boolean = true;\r\n-  \r\n-    constructor(private changeDetectorRef: ChangeDetectorRef) {} // Injecter ChangeDetectorRef si besoin\r\n-  \r\n-    ngAfterViewInit(): void {\r\n-      this.loadDashboardData(); // Charger les données\r\n+  // --- Propriétés pour les cartes statistiques ---\r\n+  agencyCount: number = 0;\r\n+  projectCount: number = 0;\r\n+  userCount: number = 0;\r\n+\r\n+  // --- Propriétés pour la section activité ---\r\n+  totalTasks: number = 0;\r\n+  activeMembers: number = 0;\r\n+  activeProjects: number = 0;\r\n+  private chartInstance: Chart | null = null;\r\n+  private chartUpdateSubscription: Subscription | null = null;\r\n+\r\n+  // --- Propriétés pour la table des agences ---\r\n+  // Use the Agency interface for MatTableDataSource\r\n+  agencyDataSource = new MatTableDataSource<Agency>([]);\r\n+  agencyDisplayedColumns: string[] = ['name', 'userCount', 'status', 'actions'];\r\n+\r\n+  // --- Indicateurs de chargement ---\r\n+  isLoadingStats: boolean = true;\r\n+  isLoadingChart: boolean = true;\r\n+  isLoadingAgencies: boolean = true;\r\n+\r\n+  constructor(private changeDetectorRef: ChangeDetectorRef) {}\r\n+\r\n+  ngAfterViewInit(): void {\r\n+    this.loadDashboardData();\r\n+  }\r\n+\r\n+  ngOnDestroy(): void {\r\n+    this.chartInstance?.destroy();\r\n+    this.chartUpdateSubscription?.unsubscribe();\r\n+  }\r\n+\r\n+  loadDashboardData(): void {\r\n+    this.isLoadingStats = true;\r\n+    this.isLoadingChart = true;\r\n+    this.isLoadingAgencies = true;\r\n+\r\n+    setTimeout(() => {\r\n+      this.agencyCount = 12;\r\n+      this.projectCount = 64;\r\n+      this.userCount = 105;\r\n+      this.isLoadingStats = false;\r\n+\r\n+      this.totalTasks = 56;\r\n+      this.activeMembers = 8;\r\n+      this.activeProjects = 30;\r\n+      this.isLoadingChart = false;\r\n+      this.createOrUpdateChart();\r\n+\r\n+      // Use the Agency interface for the sample data\r\n+      const agencies: Agency[] = [\r\n+        { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n+        { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n+        { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n+      ];\r\n+      this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n+      this.isLoadingAgencies = false;\r\n+\r\n+      this.changeDetectorRef.detectChanges();\r\n+    }, 1500);\r\n+  }\r\n+\r\n+  // Use the Agency interface for input and output types\r\n+  prepareAgencyDataForDisplay(agencies: Agency[]): Agency[] {\r\n+    return agencies.map(agency => ({\r\n+      ...agency,\r\n+      statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n+      statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n+    }));\r\n+  }\r\n+\r\n+  createOrUpdateChart(): void {\r\n+    const canvas = document.getElementById('superAdminTaskChart') as HTMLCanvasElement;\r\n+    if (!canvas) {\r\n+      console.error(\"Canvas element 'superAdminTaskChart' not found.\");\r\n+      return;\r\n     }\r\n-  \r\n-    ngOnDestroy(): void {\r\n-      // Détruire le graphique et se désabonner\r\n-      this.chartInstance?.destroy();\r\n-      this.chartUpdateSubscription?.unsubscribe();\r\n-    }\r\n-  \r\n-    loadDashboardData(): void {\r\n-      // Simuler le chargement des données (remplacer par appels API réels)\r\n-      this.isLoadingStats = true;\r\n-      this.isLoadingChart = true;\r\n-      this.isLoadingAgencies = true;\r\n-  \r\n-      // Simuler un délai API\r\n-      setTimeout(() => {\r\n-        // Charger les statistiques des cartes\r\n-        this.agencyCount = 12; // Exemple\r\n-        this.projectCount = 64; // Exemple\r\n-        this.userCount = 105; // Exemple\r\n-        this.isLoadingStats = false;\r\n-  \r\n-        // Charger les statistiques d'activité\r\n-        this.totalTasks = 56; // Exemple\r\n-        this.activeMembers = 8; // Exemple\r\n-        this.activeProjects = 30; // Exemple\r\n-        this.isLoadingChart = false;\r\n-        this.createOrUpdateChart(); // Créer/Mettre à jour le graphique une fois les données chargées\r\n-  \r\n-        // Charger les données de la table des agences\r\n-        const agencies: any = [ // Exemple de données\r\n-          { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n-          { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n-          { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n-        ];\r\n-        this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n-        this.isLoadingAgencies = false;\r\n-  \r\n-        this.changeDetectorRef.detectChanges(); // Forcer la détection de changements si nécessaire\r\n-      }, 1500); // Simule 1.5s de chargement\r\n-    }\r\n-  \r\n-    prepareAgencyDataForDisplay(agencies: any): any[] {\r\n-      return agencies.map((agency:any) => ({\r\n-        ...agency,\r\n-        statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n-        statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n-      }));\r\n-    }\r\n-  \r\n-    createOrUpdateChart(): void {\r\n-      const canvas = document.getElementById('superAdminTaskChart') as HTMLCanvasElement;\r\n-      if (!canvas) {\r\n-        console.error(\"Canvas element 'superAdminTaskChart' not found.\");\r\n-        return;\r\n-      }\r\n-  \r\n-      // Détruire l'instance précédente si elle existe\r\n-      this.chartInstance?.destroy();\r\n-  \r\n-      // Créer une nouvelle instance de Chart.js\r\n-      this.chartInstance = new Chart(canvas, {\r\n-        type: 'bar', // Ou 'line', 'pie', etc.\r\n-        data: {\r\n-          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'], // Exemples de labels\r\n-          datasets: [{\r\n-            label: 'Projets Créés', // Exemple de données\r\n-            data: [10, 15, 8, 12, 20, 18], // Exemples de données\r\n-            backgroundColor: 'rgba(74, 144, 226, 0.6)', // Couleur primaire avec transparence\r\n-            borderColor: 'rgba(74, 144, 226, 1)', // Couleur primaire solide\r\n-            borderWidth: 1,\r\n-            borderRadius: 4, // Coins arrondis pour les barres\r\n+\r\n+    this.chartInstance?.destroy();\r\n+\r\n+    this.chartInstance = new Chart(canvas, {\r\n+      type: 'bar',\r\n+      data: {\r\n+        labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n+        datasets: [{\r\n+          label: 'Projets Créés',\r\n+          data: [10, 15, 8, 12, 20, 18],\r\n+          backgroundColor: 'rgba(74, 144, 226, 0.6)',\r\n+          borderColor: 'rgba(74, 144, 226, 1)',\r\n+          borderWidth: 1,\r\n+          borderRadius: 4,\r\n+        },\r\n+        {\r\n+           label: 'Utilisateurs Ajoutés',\r\n+           data: [5, 8, 10, 7, 12, 9],\r\n+           backgroundColor: 'rgba(80, 227, 194, 0.6)',\r\n+           borderColor: 'rgba(80, 227, 194, 1)',\r\n+           borderWidth: 1,\r\n+           borderRadius: 4,\r\n+         }]\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        scales: {\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: { color: '#e0e0e0' },\r\n+            ticks: { color: '#666' }\r\n           },\r\n-          {\r\n-             label: 'Utilisateurs Ajoutés', // Exemple de deuxième jeu de données\r\n-             data: [5, 8, 10, 7, 12, 9],\r\n-             backgroundColor: 'rgba(80, 227, 194, 0.6)', // Couleur accent avec transparence\r\n-             borderColor: 'rgba(80, 227, 194, 1)', // Couleur accent solide\r\n-             borderWidth: 1,\r\n-             borderRadius: 4,\r\n-           }]\r\n+          x: {\r\n+             grid: { display: false },\r\n+             ticks: { color: '#666' }\r\n+           }\r\n         },\r\n-        options: {\r\n-          responsive: true,\r\n-          maintainAspectRatio: false, // Permet de contrôler la hauteur via CSS si nécessaire\r\n-          scales: {\r\n-            y: {\r\n-              beginAtZero: true,\r\n-              grid: {\r\n-                color: '#e0e0e0'\r\n-              },\r\n-              ticks: {\r\n-                color: '#666' // Couleur des labels Y\r\n-              }\r\n-            },\r\n-            x: {\r\n-               grid: {\r\n-                 display: false // Masquer la grille X\r\n-               },\r\n-               ticks: {\r\n-                 color: '#666' // Couleur des labels X\r\n-               }\r\n-             }\r\n+        plugins: {\r\n+          legend: {\r\n+            position: 'top',\r\n+             labels: { color: '#333', padding: 20 }\r\n           },\r\n-          plugins: {\r\n-            legend: {\r\n-              position: 'top', // Position de la légende\r\n-               labels: {\r\n-                 color: '#333', // Couleur du texte de la légende\r\n-                 padding: 20 // Espace autour de la légende\r\n-               }\r\n-            },\r\n-            tooltip: {\r\n-              backgroundColor: 'rgba(0, 0, 0, 0.7)', // Fond de l'infobulle\r\n-              titleColor: '#fff',\r\n-              bodyColor: '#fff',\r\n-              padding: 10,\r\n-              cornerRadius: 4,\r\n-            }\r\n+          tooltip: {\r\n+            backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+            titleColor: '#fff',\r\n+            bodyColor: '#fff',\r\n+            padding: 10,\r\n+            cornerRadius: 4,\r\n           }\r\n         }\r\n-      });\r\n-    }\r\n-  \r\n-    // --- Méthodes d'action (placeholders) ---\r\n-    addNewAgency(): void {\r\n-      console.log('Ajouter une nouvelle agence...');\r\n-      // Implémenter la logique (ex: ouvrir une modale, naviguer vers un formulaire)\r\n-    }\r\n-  \r\n-    viewAgency(agency: any): void {\r\n-      console.log('Voir agence:', agency);\r\n-      // Implémenter la logique\r\n-    }\r\n-  \r\n-    editAgency(agency: any): void {\r\n-      console.log('Modifier agence:', agency);\r\n-      // Implémenter la logique\r\n-    }\r\n-  \r\n-    deleteAgency(agency: any): void {\r\n-      console.log('Supprimer agence:', agency);\r\n-      // Implémenter la logique (avec confirmation)\r\n-    }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // --- Méthodes d'action (placeholders) ---\r\n+  addNewAgency(): void {\r\n+    console.log('Ajouter une nouvelle agence...');\r\n+    // Implement logic (e.g., open modal, navigate)\r\n+  }\r\n+\r\n+  // Use the Agency interface for the parameter type\r\n+  viewAgency(agency: Agency): void {\r\n+    console.log('Voir agence:', agency);\r\n+    // Implement logic\r\n+  }\r\n+\r\n+  // Use the Agency interface for the parameter type\r\n+  editAgency(agency: Agency): void {\r\n+    console.log('Modifier agence:', agency);\r\n+    // Implement logic\r\n+  }\r\n+\r\n+  // Use the Agency interface for the parameter type\r\n+  deleteAgency(agency: Agency): void {\r\n+    console.log('Supprimer agence:', agency);\r\n+    // Implement logic (with confirmation)\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1745613949183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,18 @@\n import { Subscription } from 'rxjs';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n-  id: number;\r\n+  _id: string; // Assuming MongoDB uses _id\r\n+  id?: number; // Keep if used elsewhere, otherwise use _id\r\n   name: string;\r\n-  status: 'active' | 'inactive'; // Use specific types instead of 'any'\r\n-  userCount: number;\r\n-  // Optional properties added by prepareAgencyDataForDisplay\r\n+  address: string;\r\n+  email: string;\r\n+  phone: string;\r\n+  createdAt: string | Date; // Or Date if you parse it\r\n+  status?: 'active' | 'inactive'; // Keep if still relevant for display, otherwise remove\r\n+  userCount?: number; // Keep if still relevant for display, otherwise remove\r\n+  // Optional properties added by prepareAgencyDataForDisplay (if needed, otherwise remove)\r\n   statusText?: string;\r\n   statusClass?: string;\r\n }\r\n \r\n"
                },
                {
                    "date": 1745613997436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,19 +38,33 @@\n   activeProjects: number = 0;\r\n   private chartInstance: Chart | null = null;\r\n   private chartUpdateSubscription: Subscription | null = null;\r\n \r\n-  // --- Propriétés pour la table des agences ---\r\n-  // Use the Agency interface for MatTableDataSource\r\n+  /// --- Propriétés pour la table des agences ---\r\n+  searchQuery: string = ''; // For filtering\r\n+  agencies: Agency[] = []; // Full list of agencies\r\n+  filteredAgencies: Agency[] = []; // List displayed in the table\r\n+  // Use MatTableDataSource if you need its features (sorting, pagination), otherwise use filteredAgencies directly\r\n   agencyDataSource = new MatTableDataSource<Agency>([]);\r\n-  agencyDisplayedColumns: string[] = ['name', 'userCount', 'status', 'actions'];\r\n+  // Update displayed columns to match agences.component.html\r\n+  agencyDisplayedColumns: string[] = ['name', 'address', 'email', 'phone', 'createdAt', 'actions'];\r\n \r\n   // --- Indicateurs de chargement ---\r\n   isLoadingStats: boolean = true;\r\n   isLoadingChart: boolean = true;\r\n-  isLoadingAgencies: boolean = true;\r\n+  isLoadingAgencies: boolean = true; // Use this for the agency table\r\n+  errorMessage: string | null = null; // For agency loading errors\r\n \r\n-  constructor(private changeDetectorRef: ChangeDetectorRef) {}\r\n+  constructor(\r\n+    private changeDetectorRef: ChangeDetectorRef,\r\n+    private agenceService: AgenceService, // Inject AgenceService\r\n+    private authService: AuthService, // Inject AuthService\r\n+    private modalService: NgbModal, // Inject NgbModal\r\n+    private toastr: ToastrService, // Inject ToastrService\r\n+    private snackBar: MatSnackBar, // Inject MatSnackBar\r\n+    private router: Router, // Inject Router\r\n+    private dialog: MatDialog // Inject MatDialog (if needed for other confirmations)\r\n+  ) {}\r\n \r\n   ngAfterViewInit(): void {\r\n     this.loadDashboardData();\r\n   }\r\n"
                },
                {
                    "date": 1745614009867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,14 @@\n     private snackBar: MatSnackBar, // Inject MatSnackBar\r\n     private router: Router, // Inject Router\r\n     private dialog: MatDialog // Inject MatDialog (if needed for other confirmations)\r\n   ) {}\r\n-\r\n+// Use ngOnInit for initial data loading that doesn't depend on the view\r\n+ngOnInit(): void {\r\n+  this.loadInitialStats(); // Load stats separately\r\n+  this.loadAgencies(); // Load agencies\r\n+  this.authService.getDecodedToken(); // If needed\r\n+}\r\n   ngAfterViewInit(): void {\r\n     this.loadDashboardData();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1745614045297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,24 @@\n   ngOnDestroy(): void {\r\n     this.chartInstance?.destroy();\r\n     this.chartUpdateSubscription?.unsubscribe();\r\n   }\r\n+  loadInitialStats(): void {\r\n+    this.isLoadingStats = true;\r\n+    // Replace setTimeout with actual API calls for stats\r\n+    setTimeout(() => {\r\n+      // These might come from a separate API endpoint or be calculated\r\n+      this.projectCount = 64;\r\n+      this.userCount = 105; // This might also be calculated across all agencies later\r\n \r\n+      this.totalTasks = 56; // Example data\r\n+      this.activeMembers = 8; // Example data\r\n+      this.activeProjects = 30; // Example data\r\n+\r\n+      this.isLoadingStats = false;\r\n+      this.changeDetectorRef.detectChanges();\r\n+    }, 1000);\r\n+ }\r\n   loadDashboardData(): void {\r\n     this.isLoadingStats = true;\r\n     this.isLoadingChart = true;\r\n     this.isLoadingAgencies = true;\r\n"
                },
                {
                    "date": 1745614064640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,8 +93,43 @@\n       this.isLoadingStats = false;\r\n       this.changeDetectorRef.detectChanges();\r\n     }, 1000);\r\n  }\r\n+ loadChartData(): void {\r\n+  this.isLoadingChart = true;\r\n+  // Replace setTimeout with actual API calls for chart data\r\n+  setTimeout(() => {\r\n+      this.isLoadingChart = false;\r\n+      this.createOrUpdateChart(); // Create chart after data is ready\r\n+      this.changeDetectorRef.detectChanges();\r\n+  }, 1200);\r\n+}\r\n+\r\n+\r\n+loadAgencies(): void {\r\n+  this.isLoadingAgencies = true;\r\n+  this.errorMessage = null;\r\n+  this.agenceService.getAllAgencies().subscribe({\r\n+    next: (agencies) => {\r\n+      this.agencies = agencies;\r\n+      this.agencyCount = agencies.length; // Update agency count card\r\n+      this.filterAgencies(); // Apply initial filter (shows all)\r\n+      console.log('Agences chargées:', this.agencies);\r\n+      this.isLoadingAgencies = false;\r\n+      this.changeDetectorRef.detectChanges(); // Trigger change detection\r\n+    },\r\n+    error: (err) => {\r\n+      console.error('Erreur chargement agences:', err);\r\n+      this.errorMessage = 'Impossible de charger les agences.';\r\n+      this.showError(this.errorMessage); // Show snackbar error\r\n+      this.isLoadingAgencies = false;\r\n+      this.agencies = [];\r\n+      this.filterAgencies(); // Ensure table shows empty state\r\n+      this.changeDetectorRef.detectChanges(); // Trigger change detection\r\n+    }\r\n+  });\r\n+}\r\n+\r\n   loadDashboardData(): void {\r\n     this.isLoadingStats = true;\r\n     this.isLoadingChart = true;\r\n     this.isLoadingAgencies = true;\r\n"
                },
                {
                    "date": 1745614096734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,8 +128,14 @@\n     }\r\n   });\r\n }\r\n \r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n   loadDashboardData(): void {\r\n     this.isLoadingStats = true;\r\n     this.isLoadingChart = true;\r\n     this.isLoadingAgencies = true;\r\n"
                },
                {
                    "date": 1745614102295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,14 +128,220 @@\n     }\r\n   });\r\n }\r\n \r\n+filterAgencies(): void {\r\n+  const query = this.searchQuery.toLowerCase().trim();\r\n+  if (!query) {\r\n+    this.filteredAgencies = [...this.agencies];\r\n+  } else {\r\n+    this.filteredAgencies = this.agencies.filter(agency =>\r\n+      agency.name.toLowerCase().includes(query) ||\r\n+      agency.address.toLowerCase().includes(query) ||\r\n+      agency.email.toLowerCase().includes(query) ||\r\n+      agency.phone.toLowerCase().includes(query)\r\n+    );\r\n+  }\r\n+  // Update MatTableDataSource if using it\r\n+  this.agencyDataSource.data = this.filteredAgencies;\r\n+}\r\n \r\n+addNewAgency(): void {\r\n+  const modalRef = this.modalService.open(AgenceFormComponent, {\r\n+    size: 'lg',\r\n+    centered: true,\r\n+    backdrop: 'static' // Prevent closing on backdrop click\r\n+  });\r\n+  modalRef.componentInstance.isEditMode = false;\r\n \r\n+  modalRef.result.then((result) => {\r\n+    if (result) {\r\n+      // Add to the main list and re-filter\r\n+      this.agencies.unshift(result); // Add to beginning\r\n+      this.filterAgencies();\r\n+      this.agencyCount = this.agencies.length; // Update count\r\n+      this.showSuccess('Nouvelle agence ajoutée');\r\n+      this.changeDetectorRef.detectChanges();\r\n+    }\r\n+  }).catch(() => { console.log('Ajout annulé'); });\r\n+}\r\n \r\n+editAgency(agency: Agency): void {\r\n+  const modalRef = this.modalService.open(AgenceFormComponent, {\r\n+    size: 'lg',\r\n+    centered: true,\r\n+    backdrop: 'static'\r\n+  });\r\n+  modalRef.componentInstance.isEditMode = true;\r\n+  // Pass a copy to avoid modifying the original object directly if the modal is cancelled\r\n+  modalRef.componentInstance.agencyData = { ...agency };\r\n \r\n+  modalRef.result.then((result) => {\r\n+    if (result) {\r\n+      const index = this.agencies.findIndex(a => a._id === agency._id);\r\n+      if (index !== -1) {\r\n+        this.agencies[index] = result;\r\n+        this.filterAgencies(); // Re-apply filter\r\n+        this.showSuccess('Agence mise à jour');\r\n+        this.changeDetectorRef.detectChanges();\r\n+      }\r\n+    }\r\n+  }).catch(() => { console.log('Modification annulée'); });\r\n+}\r\n \r\n+deleteAgency(agency: Agency): void {\r\n+  // Use the NgbModal ConfirmationDialogComponent\r\n+  const modalRef = this.modalService.open(ConfirmationDialogComponent, {\r\n+      centered: true,\r\n+      windowClass: 'confirmation-modal' // Ensure this class is styled globally or locally if needed\r\n+  });\r\n \r\n+  // Pass data to the confirmation dialog\r\n+  // Assuming ConfirmationDialogComponent has inputs like 'message' and 'username'/'itemName'\r\n+  modalRef.componentInstance.message = `Voulez-vous vraiment supprimer l'agence ${agency.name} ?`;\r\n+  modalRef.componentInstance.username = agency.name; // Or use a more generic input name\r\n+\r\n+  modalRef.result.then((confirm) => {\r\n+      if (confirm) {\r\n+        const token = this.authService.getAccessToken();\r\n+        if (!token) {\r\n+          this.showError('Non authentifié. Impossible de supprimer.');\r\n+          return;\r\n+        }\r\n+        this.isLoadingAgencies = true; // Show loading indicator during delete\r\n+        this.agenceService.deleteAgence(agency._id, token).subscribe({\r\n+          next: () => {\r\n+            this.showSuccess('Agence supprimée avec succès');\r\n+            // Remove from the main list and re-filter\r\n+            this.agencies = this.agencies.filter(a => a._id !== agency._id);\r\n+            this.filterAgencies();\r\n+            this.agencyCount = this.agencies.length; // Update count\r\n+            this.isLoadingAgencies = false;\r\n+            this.changeDetectorRef.detectChanges();\r\n+          },\r\n+          error: (err) => {\r\n+            console.error(err);\r\n+            this.showError('Échec de la suppression de l\\'agence');\r\n+            this.isLoadingAgencies = false;\r\n+            this.changeDetectorRef.detectChanges();\r\n+          }\r\n+        });\r\n+      }\r\n+  }).catch(() => {\r\n+      console.log('Suppression annulée');\r\n+  });\r\n+}\r\n+\r\n+showAgencyDetails(agency: Agency): void {\r\n+  const modalRef = this.modalService.open(AgencyDetailsComponent, {\r\n+    size: 'lg',\r\n+    centered: true,\r\n+    backdrop: 'static'\r\n+  });\r\n+  modalRef.componentInstance.agency = agency;\r\n+}\r\n+\r\n+// --- Chart Method ---\r\n+createOrUpdateChart(): void {\r\n+  const canvas = document.getElementById('superAdminTaskChart') as HTMLCanvasElement;\r\n+  if (!canvas || this.isLoadingChart) { // Don't render if canvas not found or still loading\r\n+    // Optionally retry after a short delay if canvas isn't ready in ngAfterViewInit\r\n+    // setTimeout(() => this.createOrUpdateChart(), 100);\r\n+    return;\r\n+  }\r\n+\r\n+  this.chartInstance?.destroy(); // Destroy previous instance\r\n+\r\n+  // Replace with actual dynamic data for the chart if available\r\n+  const chartData = {\r\n+      labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n+      datasets: [{\r\n+        label: 'Projets Créés',\r\n+        data: [10, 15, 8, 12, 20, 18], // Example data\r\n+        backgroundColor: 'rgba(74, 144, 226, 0.6)',\r\n+        borderColor: 'rgba(74, 144, 226, 1)',\r\n+        borderWidth: 1,\r\n+        borderRadius: 4,\r\n+      },\r\n+      {\r\n+         label: 'Utilisateurs Ajoutés',\r\n+         data: [5, 8, 10, 7, 12, 9], // Example data\r\n+         backgroundColor: 'rgba(80, 227, 194, 0.6)',\r\n+         borderColor: 'rgba(80, 227, 194, 1)',\r\n+         borderWidth: 1,\r\n+         borderRadius: 4,\r\n+       }]\r\n+    };\r\n+\r\n+  this.chartInstance = new Chart(canvas, {\r\n+    type: 'bar',\r\n+    data: chartData,\r\n+    options: {\r\n+      responsive: true,\r\n+      maintainAspectRatio: false,\r\n+      scales: {\r\n+        y: {\r\n+          beginAtZero: true,\r\n+          grid: { color: '#e0e0e0' },\r\n+          ticks: { color: '#666' }\r\n+        },\r\n+        x: {\r\n+           grid: { display: false },\r\n+           ticks: { color: '#666' }\r\n+         }\r\n+      },\r\n+      plugins: {\r\n+        legend: {\r\n+          position: 'top',\r\n+           labels: { color: '#333', padding: 20 }\r\n+        },\r\n+        tooltip: {\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          titleColor: '#fff',\r\n+          bodyColor: '#fff',\r\n+          padding: 10,\r\n+          cornerRadius: 4,\r\n+        }\r\n+      }\r\n+    }\r\n+  });\r\n+}\r\n+\r\n+// --- Utility Methods for Notifications ---\r\n+private showSuccess(message: string): void {\r\n+  // Use Toastr or MatSnackBar\r\n+  this.toastr.success(message);\r\n+  // Or:\r\n+  // this.snackBar.open(message, 'Fermer', {\r\n+  //   duration: 3000,\r\n+  //   panelClass: ['success-snackbar'] // Ensure this class is styled\r\n+  // });\r\n+}\r\n+\r\n+private showError(message: string): void {\r\n+   // Use Toastr or MatSnackBar\r\n+   this.toastr.error(message);\r\n+   // Or:\r\n+   // this.snackBar.open(message, 'Fermer', {\r\n+   //   duration: 5000,\r\n+   //   panelClass: ['error-snackbar'] // Ensure this class is styled\r\n+   // });\r\n+}\r\n+\r\n+// --- Placeholder Action Methods (if needed for other parts of dashboard) ---\r\n+// Keep viewAgency/editAgency/deleteAgency above for the table actions\r\n+// Remove the old placeholder methods if they are fully replaced\r\n+\r\n+// Method triggered by the top \"Nouvelle Agence\" button\r\n+triggerAddNewAgencyModal(): void {\r\n+    this.addNewAgency(); // Call the method that opens the modal\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n   loadDashboardData(): void {\r\n     this.isLoadingStats = true;\r\n     this.isLoadingChart = true;\r\n     this.isLoadingAgencies = true;\r\n@@ -173,69 +379,10 @@\n       statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n     }));\r\n   }\r\n \r\n-  createOrUpdateChart(): void {\r\n-    const canvas = document.getElementById('superAdminTaskChart') as HTMLCanvasElement;\r\n-    if (!canvas) {\r\n-      console.error(\"Canvas element 'superAdminTaskChart' not found.\");\r\n-      return;\r\n-    }\r\n+  \r\n \r\n-    this.chartInstance?.destroy();\r\n-\r\n-    this.chartInstance = new Chart(canvas, {\r\n-      type: 'bar',\r\n-      data: {\r\n-        labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n-        datasets: [{\r\n-          label: 'Projets Créés',\r\n-          data: [10, 15, 8, 12, 20, 18],\r\n-          backgroundColor: 'rgba(74, 144, 226, 0.6)',\r\n-          borderColor: 'rgba(74, 144, 226, 1)',\r\n-          borderWidth: 1,\r\n-          borderRadius: 4,\r\n-        },\r\n-        {\r\n-           label: 'Utilisateurs Ajoutés',\r\n-           data: [5, 8, 10, 7, 12, 9],\r\n-           backgroundColor: 'rgba(80, 227, 194, 0.6)',\r\n-           borderColor: 'rgba(80, 227, 194, 1)',\r\n-           borderWidth: 1,\r\n-           borderRadius: 4,\r\n-         }]\r\n-      },\r\n-      options: {\r\n-        responsive: true,\r\n-        maintainAspectRatio: false,\r\n-        scales: {\r\n-          y: {\r\n-            beginAtZero: true,\r\n-            grid: { color: '#e0e0e0' },\r\n-            ticks: { color: '#666' }\r\n-          },\r\n-          x: {\r\n-             grid: { display: false },\r\n-             ticks: { color: '#666' }\r\n-           }\r\n-        },\r\n-        plugins: {\r\n-          legend: {\r\n-            position: 'top',\r\n-             labels: { color: '#333', padding: 20 }\r\n-          },\r\n-          tooltip: {\r\n-            backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-            titleColor: '#fff',\r\n-            bodyColor: '#fff',\r\n-            padding: 10,\r\n-            cornerRadius: 4,\r\n-          }\r\n-        }\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n   // --- Méthodes d'action (placeholders) ---\r\n   addNewAgency(): void {\r\n     console.log('Ajouter une nouvelle agence...');\r\n     // Implement logic (e.g., open modal, navigate)\r\n"
                },
                {
                    "date": 1745614108361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,25 +381,17 @@\n   }\r\n \r\n   \r\n \r\n-  // --- Méthodes d'action (placeholders) ---\r\n-  addNewAgency(): void {\r\n-    console.log('Ajouter une nouvelle agence...');\r\n-    // Implement logic (e.g., open modal, navigate)\r\n-  }\r\n+  \r\n \r\n   // Use the Agency interface for the parameter type\r\n   viewAgency(agency: Agency): void {\r\n     console.log('Voir agence:', agency);\r\n     // Implement logic\r\n   }\r\n \r\n-  // Use the Agency interface for the parameter type\r\n-  editAgency(agency: Agency): void {\r\n-    console.log('Modifier agence:', agency);\r\n-    // Implement logic\r\n-  }\r\n+  \r\n \r\n   // Use the Agency interface for the parameter type\r\n   deleteAgency(agency: Agency): void {\r\n     console.log('Supprimer agence:', agency);\r\n"
                },
                {
                    "date": 1745614398924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Component, AfterViewInit, OnDestroy, ChangeDetectorRef } from '@angular/core'; // Import necessary decorators and interfaces\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import Chart from 'chart.js/auto';\r\n import { Subscription } from 'rxjs';\r\n+import { AgencyDetailsComponent } from '../agency-details/agency-details.component';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n   _id: string; // Assuming MongoDB uses _id\r\n@@ -391,10 +392,6 @@\n   }\r\n \r\n   \r\n \r\n-  // Use the Agency interface for the parameter type\r\n-  deleteAgency(agency: Agency): void {\r\n-    console.log('Supprimer agence:', agency);\r\n-    // Implement logic (with confirmation)\r\n-  }\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1745614410126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { MatTableDataSource } from '@angular/material/table';\r\n import Chart from 'chart.js/auto';\r\n import { Subscription } from 'rxjs';\r\n import { AgencyDetailsComponent } from '../agency-details/agency-details.component';\r\n+import { ConfirmationDialogComponent } from '../confirmation-dialog/confirmation-dialog.component';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n   _id: string; // Assuming MongoDB uses _id\r\n"
                },
                {
                    "date": 1745614418095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import Chart from 'chart.js/auto';\r\n import { Subscription } from 'rxjs';\r\n import { AgencyDetailsComponent } from '../agency-details/agency-details.component';\r\n import { ConfirmationDialogComponent } from '../confirmation-dialog/confirmation-dialog.component';\r\n+import { AgenceService } from '../../services/agenceService';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n   _id: string; // Assuming MongoDB uses _id\r\n"
                },
                {
                    "date": 1745614427446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { Subscription } from 'rxjs';\r\n import { AgencyDetailsComponent } from '../agency-details/agency-details.component';\r\n import { ConfirmationDialogComponent } from '../confirmation-dialog/confirmation-dialog.component';\r\n import { AgenceService } from '../../services/agenceService';\r\n+import { AuthService } from '../../services/auth.service';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n   _id: string; // Assuming MongoDB uses _id\r\n"
                },
                {
                    "date": 1745614433798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,11 @@\n import { AgencyDetailsComponent } from '../agency-details/agency-details.component';\r\n import { ConfirmationDialogComponent } from '../confirmation-dialog/confirmation-dialog.component';\r\n import { AgenceService } from '../../services/agenceService';\r\n import { AuthService } from '../../services/auth.service';\r\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n+import { ToastrService } from 'ngx-toastr';\r\n+import { MatSnackBar } from '@angular/material/snack-bar';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n   _id: string; // Assuming MongoDB uses _id\r\n"
                },
                {
                    "date": 1745614445614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,11 @@\n import { AuthService } from '../../services/auth.service';\r\n import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n import { ToastrService } from 'ngx-toastr';\r\n import { MatSnackBar } from '@angular/material/snack-bar';\r\n+import { Router } from '@angular/router';\r\n+import { MatDialog } from '@angular/material/dialog';\r\n+import { AgenceFormComponent } from '../agence-form/agence-form.component';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n   _id: string; // Assuming MongoDB uses _id\r\n"
                },
                {
                    "date": 1745614475851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,57 +350,10 @@\n \r\n \r\n \r\n \r\n-  loadDashboardData(): void {\r\n-    this.isLoadingStats = true;\r\n-    this.isLoadingChart = true;\r\n-    this.isLoadingAgencies = true;\r\n \r\n-    setTimeout(() => {\r\n-      this.agencyCount = 12;\r\n-      this.projectCount = 64;\r\n-      this.userCount = 105;\r\n-      this.isLoadingStats = false;\r\n \r\n-      this.totalTasks = 56;\r\n-      this.activeMembers = 8;\r\n-      this.activeProjects = 30;\r\n-      this.isLoadingChart = false;\r\n-      this.createOrUpdateChart();\r\n-\r\n-      // Use the Agency interface for the sample data\r\n-      const agencies: Agency[] = [\r\n-        { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n-        { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n-        { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n-      ];\r\n-      this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n-      this.isLoadingAgencies = false;\r\n-\r\n-      this.changeDetectorRef.detectChanges();\r\n-    }, 1500);\r\n-  }\r\n-\r\n-  // Use the Agency interface for input and output types\r\n-  prepareAgencyDataForDisplay(agencies: Agency[]): Agency[] {\r\n-    return agencies.map(agency => ({\r\n-      ...agency,\r\n-      statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n-      statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n-    }));\r\n-  }\r\n-\r\n   \r\n \r\n   \r\n-\r\n-  // Use the Agency interface for the parameter type\r\n-  viewAgency(agency: Agency): void {\r\n-    console.log('Voir agence:', agency);\r\n-    // Implement logic\r\n-  }\r\n-\r\n-  \r\n-\r\n-  \r\n }\r\n"
                },
                {
                    "date": 1745614482516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,10 +350,57 @@\n \r\n \r\n \r\n \r\n+  loadDashboardData(): void {\r\n+    this.isLoadingStats = true;\r\n+    this.isLoadingChart = true;\r\n+    this.isLoadingAgencies = true;\r\n \r\n+    setTimeout(() => {\r\n+      this.agencyCount = 12;\r\n+      this.projectCount = 64;\r\n+      this.userCount = 105;\r\n+      this.isLoadingStats = false;\r\n \r\n+      this.totalTasks = 56;\r\n+      this.activeMembers = 8;\r\n+      this.activeProjects = 30;\r\n+      this.isLoadingChart = false;\r\n+      this.createOrUpdateChart();\r\n+\r\n+      // Use the Agency interface for the sample data\r\n+      const agencies: Agency[] = [\r\n+        { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n+        { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n+        { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n+      ];\r\n+      this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n+      this.isLoadingAgencies = false;\r\n+\r\n+      this.changeDetectorRef.detectChanges();\r\n+    }, 1500);\r\n+  }\r\n+\r\n+  // Use the Agency interface for input and output types\r\n+  prepareAgencyDataForDisplay(agencies: Agency[]): Agency[] {\r\n+    return agencies.map(agency => ({\r\n+      ...agency,\r\n+      statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n+      statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n+    }));\r\n+  }\r\n+\r\n   \r\n \r\n   \r\n+\r\n+  // Use the Agency interface for the parameter type\r\n+  viewAgency(agency: Agency): void {\r\n+    console.log('Voir agence:', agency);\r\n+    // Implement logic\r\n+  }\r\n+\r\n+  \r\n+\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1745614490114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,16 +380,9 @@\n       this.changeDetectorRef.detectChanges();\r\n     }, 1500);\r\n   }\r\n \r\n-  // Use the Agency interface for input and output types\r\n-  prepareAgencyDataForDisplay(agencies: Agency[]): Agency[] {\r\n-    return agencies.map(agency => ({\r\n-      ...agency,\r\n-      statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n-      statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n-    }));\r\n-  }\r\n+  \r\n \r\n   \r\n \r\n   \r\n"
                },
                {
                    "date": 1745614506503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,9 +380,16 @@\n       this.changeDetectorRef.detectChanges();\r\n     }, 1500);\r\n   }\r\n \r\n-  \r\n+  // Use the Agency interface for input and output types\r\n+  prepareAgencyDataForDisplay(agencies: Agency[]): Agency[] {\r\n+    return agencies.map(agency => ({\r\n+      ...agency,\r\n+      statusText: agency.status === 'active' ? 'Actif' : 'Inactif',\r\n+      statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n+    }));\r\n+  }\r\n \r\n   \r\n \r\n   \r\n"
                },
                {
                    "date": 1745614713535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,13 +368,9 @@\n       this.isLoadingChart = false;\r\n       this.createOrUpdateChart();\r\n \r\n       // Use the Agency interface for the sample data\r\n-      const agencies: Agency[] = [\r\n-        { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n-        { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n-        { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n-      ];\r\n+      \r\n       this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n       this.isLoadingAgencies = false;\r\n \r\n       this.changeDetectorRef.detectChanges();\r\n"
                },
                {
                    "date": 1745614752716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n       this.createOrUpdateChart();\r\n \r\n       // Use the Agency interface for the sample data\r\n       \r\n-      this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n+      this.agencyDataSource.data = this.prepareAgencyDataForDisplay(this.agencies);\r\n       this.isLoadingAgencies = false;\r\n \r\n       this.changeDetectorRef.detectChanges();\r\n     }, 1500);\r\n"
                },
                {
                    "date": 1745614958755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,16 @@\n import { Component, AfterViewInit, OnDestroy, ChangeDetectorRef } from '@angular/core'; // Import necessary decorators and interfaces\r\n import { MatTableDataSource } from '@angular/material/table';\r\n import Chart from 'chart.js/auto';\r\n import { Subscription } from 'rxjs';\r\n-import { AgencyDetailsComponent } from '../agency-details/agency-details.component';\r\n-import { ConfirmationDialogComponent } from '../confirmation-dialog/confirmation-dialog.component';\r\n-import { AgenceService } from '../../services/agenceService';\r\n-import { AuthService } from '../../services/auth.service';\r\n-import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n-import { ToastrService } from 'ngx-toastr';\r\n-import { MatSnackBar } from '@angular/material/snack-bar';\r\n-import { Router } from '@angular/router';\r\n-import { MatDialog } from '@angular/material/dialog';\r\n-import { AgenceFormComponent } from '../agence-form/agence-form.component';\r\n \r\n // Define the Agency interface for strong typing\r\n export interface Agency {\r\n-  _id: string; // Assuming MongoDB uses _id\r\n-  id?: number; // Keep if used elsewhere, otherwise use _id\r\n+  id: number;\r\n   name: string;\r\n-  address: string;\r\n-  email: string;\r\n-  phone: string;\r\n-  createdAt: string | Date; // Or Date if you parse it\r\n-  status?: 'active' | 'inactive'; // Keep if still relevant for display, otherwise remove\r\n-  userCount?: number; // Keep if still relevant for display, otherwise remove\r\n-  // Optional properties added by prepareAgencyDataForDisplay (if needed, otherwise remove)\r\n+  status: 'active' | 'inactive'; // Use specific types instead of 'any'\r\n+  userCount: number;\r\n+  // Optional properties added by prepareAgencyDataForDisplay\r\n   statusText?: string;\r\n   statusClass?: string;\r\n }\r\n \r\n@@ -48,310 +33,29 @@\n   activeProjects: number = 0;\r\n   private chartInstance: Chart | null = null;\r\n   private chartUpdateSubscription: Subscription | null = null;\r\n \r\n-  /// --- Propriétés pour la table des agences ---\r\n-  searchQuery: string = ''; // For filtering\r\n-  agencies: Agency[] = []; // Full list of agencies\r\n-  filteredAgencies: Agency[] = []; // List displayed in the table\r\n-  // Use MatTableDataSource if you need its features (sorting, pagination), otherwise use filteredAgencies directly\r\n+  // --- Propriétés pour la table des agences ---\r\n+  // Use the Agency interface for MatTableDataSource\r\n   agencyDataSource = new MatTableDataSource<Agency>([]);\r\n-  // Update displayed columns to match agences.component.html\r\n-  agencyDisplayedColumns: string[] = ['name', 'address', 'email', 'phone', 'createdAt', 'actions'];\r\n+  agencyDisplayedColumns: string[] = ['name', 'userCount', 'status', 'actions'];\r\n \r\n   // --- Indicateurs de chargement ---\r\n   isLoadingStats: boolean = true;\r\n   isLoadingChart: boolean = true;\r\n-  isLoadingAgencies: boolean = true; // Use this for the agency table\r\n-  errorMessage: string | null = null; // For agency loading errors\r\n+  isLoadingAgencies: boolean = true;\r\n \r\n-  constructor(\r\n-    private changeDetectorRef: ChangeDetectorRef,\r\n-    private agenceService: AgenceService, // Inject AgenceService\r\n-    private authService: AuthService, // Inject AuthService\r\n-    private modalService: NgbModal, // Inject NgbModal\r\n-    private toastr: ToastrService, // Inject ToastrService\r\n-    private snackBar: MatSnackBar, // Inject MatSnackBar\r\n-    private router: Router, // Inject Router\r\n-    private dialog: MatDialog // Inject MatDialog (if needed for other confirmations)\r\n-  ) {}\r\n-// Use ngOnInit for initial data loading that doesn't depend on the view\r\n-ngOnInit(): void {\r\n-  this.loadInitialStats(); // Load stats separately\r\n-  this.loadAgencies(); // Load agencies\r\n-  this.authService.getDecodedToken(); // If needed\r\n-}\r\n+  constructor(private changeDetectorRef: ChangeDetectorRef) {}\r\n+\r\n   ngAfterViewInit(): void {\r\n     this.loadDashboardData();\r\n   }\r\n \r\n   ngOnDestroy(): void {\r\n     this.chartInstance?.destroy();\r\n     this.chartUpdateSubscription?.unsubscribe();\r\n   }\r\n-  loadInitialStats(): void {\r\n-    this.isLoadingStats = true;\r\n-    // Replace setTimeout with actual API calls for stats\r\n-    setTimeout(() => {\r\n-      // These might come from a separate API endpoint or be calculated\r\n-      this.projectCount = 64;\r\n-      this.userCount = 105; // This might also be calculated across all agencies later\r\n \r\n-      this.totalTasks = 56; // Example data\r\n-      this.activeMembers = 8; // Example data\r\n-      this.activeProjects = 30; // Example data\r\n-\r\n-      this.isLoadingStats = false;\r\n-      this.changeDetectorRef.detectChanges();\r\n-    }, 1000);\r\n- }\r\n- loadChartData(): void {\r\n-  this.isLoadingChart = true;\r\n-  // Replace setTimeout with actual API calls for chart data\r\n-  setTimeout(() => {\r\n-      this.isLoadingChart = false;\r\n-      this.createOrUpdateChart(); // Create chart after data is ready\r\n-      this.changeDetectorRef.detectChanges();\r\n-  }, 1200);\r\n-}\r\n-\r\n-\r\n-loadAgencies(): void {\r\n-  this.isLoadingAgencies = true;\r\n-  this.errorMessage = null;\r\n-  this.agenceService.getAllAgencies().subscribe({\r\n-    next: (agencies) => {\r\n-      this.agencies = agencies;\r\n-      this.agencyCount = agencies.length; // Update agency count card\r\n-      this.filterAgencies(); // Apply initial filter (shows all)\r\n-      console.log('Agences chargées:', this.agencies);\r\n-      this.isLoadingAgencies = false;\r\n-      this.changeDetectorRef.detectChanges(); // Trigger change detection\r\n-    },\r\n-    error: (err) => {\r\n-      console.error('Erreur chargement agences:', err);\r\n-      this.errorMessage = 'Impossible de charger les agences.';\r\n-      this.showError(this.errorMessage); // Show snackbar error\r\n-      this.isLoadingAgencies = false;\r\n-      this.agencies = [];\r\n-      this.filterAgencies(); // Ensure table shows empty state\r\n-      this.changeDetectorRef.detectChanges(); // Trigger change detection\r\n-    }\r\n-  });\r\n-}\r\n-\r\n-filterAgencies(): void {\r\n-  const query = this.searchQuery.toLowerCase().trim();\r\n-  if (!query) {\r\n-    this.filteredAgencies = [...this.agencies];\r\n-  } else {\r\n-    this.filteredAgencies = this.agencies.filter(agency =>\r\n-      agency.name.toLowerCase().includes(query) ||\r\n-      agency.address.toLowerCase().includes(query) ||\r\n-      agency.email.toLowerCase().includes(query) ||\r\n-      agency.phone.toLowerCase().includes(query)\r\n-    );\r\n-  }\r\n-  // Update MatTableDataSource if using it\r\n-  this.agencyDataSource.data = this.filteredAgencies;\r\n-}\r\n-\r\n-addNewAgency(): void {\r\n-  const modalRef = this.modalService.open(AgenceFormComponent, {\r\n-    size: 'lg',\r\n-    centered: true,\r\n-    backdrop: 'static' // Prevent closing on backdrop click\r\n-  });\r\n-  modalRef.componentInstance.isEditMode = false;\r\n-\r\n-  modalRef.result.then((result) => {\r\n-    if (result) {\r\n-      // Add to the main list and re-filter\r\n-      this.agencies.unshift(result); // Add to beginning\r\n-      this.filterAgencies();\r\n-      this.agencyCount = this.agencies.length; // Update count\r\n-      this.showSuccess('Nouvelle agence ajoutée');\r\n-      this.changeDetectorRef.detectChanges();\r\n-    }\r\n-  }).catch(() => { console.log('Ajout annulé'); });\r\n-}\r\n-\r\n-editAgency(agency: Agency): void {\r\n-  const modalRef = this.modalService.open(AgenceFormComponent, {\r\n-    size: 'lg',\r\n-    centered: true,\r\n-    backdrop: 'static'\r\n-  });\r\n-  modalRef.componentInstance.isEditMode = true;\r\n-  // Pass a copy to avoid modifying the original object directly if the modal is cancelled\r\n-  modalRef.componentInstance.agencyData = { ...agency };\r\n-\r\n-  modalRef.result.then((result) => {\r\n-    if (result) {\r\n-      const index = this.agencies.findIndex(a => a._id === agency._id);\r\n-      if (index !== -1) {\r\n-        this.agencies[index] = result;\r\n-        this.filterAgencies(); // Re-apply filter\r\n-        this.showSuccess('Agence mise à jour');\r\n-        this.changeDetectorRef.detectChanges();\r\n-      }\r\n-    }\r\n-  }).catch(() => { console.log('Modification annulée'); });\r\n-}\r\n-\r\n-deleteAgency(agency: Agency): void {\r\n-  // Use the NgbModal ConfirmationDialogComponent\r\n-  const modalRef = this.modalService.open(ConfirmationDialogComponent, {\r\n-      centered: true,\r\n-      windowClass: 'confirmation-modal' // Ensure this class is styled globally or locally if needed\r\n-  });\r\n-\r\n-  // Pass data to the confirmation dialog\r\n-  // Assuming ConfirmationDialogComponent has inputs like 'message' and 'username'/'itemName'\r\n-  modalRef.componentInstance.message = `Voulez-vous vraiment supprimer l'agence ${agency.name} ?`;\r\n-  modalRef.componentInstance.username = agency.name; // Or use a more generic input name\r\n-\r\n-  modalRef.result.then((confirm) => {\r\n-      if (confirm) {\r\n-        const token = this.authService.getAccessToken();\r\n-        if (!token) {\r\n-          this.showError('Non authentifié. Impossible de supprimer.');\r\n-          return;\r\n-        }\r\n-        this.isLoadingAgencies = true; // Show loading indicator during delete\r\n-        this.agenceService.deleteAgence(agency._id, token).subscribe({\r\n-          next: () => {\r\n-            this.showSuccess('Agence supprimée avec succès');\r\n-            // Remove from the main list and re-filter\r\n-            this.agencies = this.agencies.filter(a => a._id !== agency._id);\r\n-            this.filterAgencies();\r\n-            this.agencyCount = this.agencies.length; // Update count\r\n-            this.isLoadingAgencies = false;\r\n-            this.changeDetectorRef.detectChanges();\r\n-          },\r\n-          error: (err) => {\r\n-            console.error(err);\r\n-            this.showError('Échec de la suppression de l\\'agence');\r\n-            this.isLoadingAgencies = false;\r\n-            this.changeDetectorRef.detectChanges();\r\n-          }\r\n-        });\r\n-      }\r\n-  }).catch(() => {\r\n-      console.log('Suppression annulée');\r\n-  });\r\n-}\r\n-\r\n-showAgencyDetails(agency: Agency): void {\r\n-  const modalRef = this.modalService.open(AgencyDetailsComponent, {\r\n-    size: 'lg',\r\n-    centered: true,\r\n-    backdrop: 'static'\r\n-  });\r\n-  modalRef.componentInstance.agency = agency;\r\n-}\r\n-\r\n-// --- Chart Method ---\r\n-createOrUpdateChart(): void {\r\n-  const canvas = document.getElementById('superAdminTaskChart') as HTMLCanvasElement;\r\n-  if (!canvas || this.isLoadingChart) { // Don't render if canvas not found or still loading\r\n-    // Optionally retry after a short delay if canvas isn't ready in ngAfterViewInit\r\n-    // setTimeout(() => this.createOrUpdateChart(), 100);\r\n-    return;\r\n-  }\r\n-\r\n-  this.chartInstance?.destroy(); // Destroy previous instance\r\n-\r\n-  // Replace with actual dynamic data for the chart if available\r\n-  const chartData = {\r\n-      labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n-      datasets: [{\r\n-        label: 'Projets Créés',\r\n-        data: [10, 15, 8, 12, 20, 18], // Example data\r\n-        backgroundColor: 'rgba(74, 144, 226, 0.6)',\r\n-        borderColor: 'rgba(74, 144, 226, 1)',\r\n-        borderWidth: 1,\r\n-        borderRadius: 4,\r\n-      },\r\n-      {\r\n-         label: 'Utilisateurs Ajoutés',\r\n-         data: [5, 8, 10, 7, 12, 9], // Example data\r\n-         backgroundColor: 'rgba(80, 227, 194, 0.6)',\r\n-         borderColor: 'rgba(80, 227, 194, 1)',\r\n-         borderWidth: 1,\r\n-         borderRadius: 4,\r\n-       }]\r\n-    };\r\n-\r\n-  this.chartInstance = new Chart(canvas, {\r\n-    type: 'bar',\r\n-    data: chartData,\r\n-    options: {\r\n-      responsive: true,\r\n-      maintainAspectRatio: false,\r\n-      scales: {\r\n-        y: {\r\n-          beginAtZero: true,\r\n-          grid: { color: '#e0e0e0' },\r\n-          ticks: { color: '#666' }\r\n-        },\r\n-        x: {\r\n-           grid: { display: false },\r\n-           ticks: { color: '#666' }\r\n-         }\r\n-      },\r\n-      plugins: {\r\n-        legend: {\r\n-          position: 'top',\r\n-           labels: { color: '#333', padding: 20 }\r\n-        },\r\n-        tooltip: {\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          titleColor: '#fff',\r\n-          bodyColor: '#fff',\r\n-          padding: 10,\r\n-          cornerRadius: 4,\r\n-        }\r\n-      }\r\n-    }\r\n-  });\r\n-}\r\n-\r\n-// --- Utility Methods for Notifications ---\r\n-private showSuccess(message: string): void {\r\n-  // Use Toastr or MatSnackBar\r\n-  this.toastr.success(message);\r\n-  // Or:\r\n-  // this.snackBar.open(message, 'Fermer', {\r\n-  //   duration: 3000,\r\n-  //   panelClass: ['success-snackbar'] // Ensure this class is styled\r\n-  // });\r\n-}\r\n-\r\n-private showError(message: string): void {\r\n-   // Use Toastr or MatSnackBar\r\n-   this.toastr.error(message);\r\n-   // Or:\r\n-   // this.snackBar.open(message, 'Fermer', {\r\n-   //   duration: 5000,\r\n-   //   panelClass: ['error-snackbar'] // Ensure this class is styled\r\n-   // });\r\n-}\r\n-\r\n-// --- Placeholder Action Methods (if needed for other parts of dashboard) ---\r\n-// Keep viewAgency/editAgency/deleteAgency above for the table actions\r\n-// Remove the old placeholder methods if they are fully replaced\r\n-\r\n-// Method triggered by the top \"Nouvelle Agence\" button\r\n-triggerAddNewAgencyModal(): void {\r\n-    this.addNewAgency(); // Call the method that opens the modal\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n   loadDashboardData(): void {\r\n     this.isLoadingStats = true;\r\n     this.isLoadingChart = true;\r\n     this.isLoadingAgencies = true;\r\n@@ -368,10 +72,14 @@\n       this.isLoadingChart = false;\r\n       this.createOrUpdateChart();\r\n \r\n       // Use the Agency interface for the sample data\r\n-      \r\n-      this.agencyDataSource.data = this.prepareAgencyDataForDisplay(this.agencies);\r\n+      const agencies: Agency[] = [\r\n+        { id: 1, name: 'Agence Paris Centre', status: 'active', userCount: 15 },\r\n+        { id: 2, name: 'Agence Lyon Sud', status: 'active', userCount: 8 },\r\n+        { id: 3, name: 'Agence Lille Nord', status: 'inactive', userCount: 5 },\r\n+      ];\r\n+      this.agencyDataSource.data = this.prepareAgencyDataForDisplay(agencies);\r\n       this.isLoadingAgencies = false;\r\n \r\n       this.changeDetectorRef.detectChanges();\r\n     }, 1500);\r\n@@ -385,18 +93,89 @@\n       statusClass: agency.status === 'active' ? 'status-active' : 'status-inactive'\r\n     }));\r\n   }\r\n \r\n-  \r\n+  createOrUpdateChart(): void {\r\n+    const canvas = document.getElementById('superAdminTaskChart') as HTMLCanvasElement;\r\n+    if (!canvas) {\r\n+      console.error(\"Canvas element 'superAdminTaskChart' not found.\");\r\n+      return;\r\n+    }\r\n \r\n-  \r\n+    this.chartInstance?.destroy();\r\n \r\n+    this.chartInstance = new Chart(canvas, {\r\n+      type: 'bar',\r\n+      data: {\r\n+        labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n+        datasets: [{\r\n+          label: 'Projets Créés',\r\n+          data: [10, 15, 8, 12, 20, 18],\r\n+          backgroundColor: 'rgba(74, 144, 226, 0.6)',\r\n+          borderColor: 'rgba(74, 144, 226, 1)',\r\n+          borderWidth: 1,\r\n+          borderRadius: 4,\r\n+        },\r\n+        {\r\n+           label: 'Utilisateurs Ajoutés',\r\n+           data: [5, 8, 10, 7, 12, 9],\r\n+           backgroundColor: 'rgba(80, 227, 194, 0.6)',\r\n+           borderColor: 'rgba(80, 227, 194, 1)',\r\n+           borderWidth: 1,\r\n+           borderRadius: 4,\r\n+         }]\r\n+      },\r\n+      options: {\r\n+        responsive: true,\r\n+        maintainAspectRatio: false,\r\n+        scales: {\r\n+          y: {\r\n+            beginAtZero: true,\r\n+            grid: { color: '#e0e0e0' },\r\n+            ticks: { color: '#666' }\r\n+          },\r\n+          x: {\r\n+             grid: { display: false },\r\n+             ticks: { color: '#666' }\r\n+           }\r\n+        },\r\n+        plugins: {\r\n+          legend: {\r\n+            position: 'top',\r\n+             labels: { color: '#333', padding: 20 }\r\n+          },\r\n+          tooltip: {\r\n+            backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+            titleColor: '#fff',\r\n+            bodyColor: '#fff',\r\n+            padding: 10,\r\n+            cornerRadius: 4,\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // --- Méthodes d'action (placeholders) ---\r\n+  addNewAgency(): void {\r\n+    console.log('Ajouter une nouvelle agence...');\r\n+    // Implement logic (e.g., open modal, navigate)\r\n+  }\r\n+\r\n   // Use the Agency interface for the parameter type\r\n   viewAgency(agency: Agency): void {\r\n     console.log('Voir agence:', agency);\r\n     // Implement logic\r\n   }\r\n \r\n-  \r\n+  // Use the Agency interface for the parameter type\r\n+  editAgency(agency: Agency): void {\r\n+    console.log('Modifier agence:', agency);\r\n+    // Implement logic\r\n+  }\r\n \r\n-  \r\n+  // Use the Agency interface for the parameter type\r\n+  deleteAgency(agency: Agency): void {\r\n+    console.log('Supprimer agence:', agency);\r\n+    // Implement logic (with confirmation)\r\n+  }\r\n }\r\n"
                }
            ],
            "date": 1743945903485,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-super-admin-dashboard',\r\n  templateUrl: './super-admin-dashboard.component.html',\r\n  styleUrl: './super-admin-dashboard.component.scss'\r\n})\r\nexport class SuperAdminDashboardComponent {\r\nngAfterViewInit(): void {\r\n    this.createChart();\r\n  }\r\n\r\n  createChart() {\r\n    const ctx = document.getElementById('taskChart') as HTMLCanvasElement;\r\n    if (ctx) {\r\n      new Chart(ctx, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin'],\r\n          datasets: [{\r\n            label: 'Tâches complétées',\r\n            data: [50, 60, 75, 90, 110, 130],\r\n            backgroundColor: '#3498db',\r\n            borderColor: '#2980b9',\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            y: { beginAtZero: true }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}